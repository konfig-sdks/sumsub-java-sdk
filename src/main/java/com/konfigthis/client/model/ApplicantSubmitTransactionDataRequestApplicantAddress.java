/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Participant address.
 */
@ApiModel(description = "Participant address.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantSubmitTransactionDataRequestApplicantAddress {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_POST_CODE = "postCode";
  @SerializedName(SERIALIZED_NAME_POST_CODE)
  private String postCode;

  public static final String SERIALIZED_NAME_TOWN = "town";
  @SerializedName(SERIALIZED_NAME_TOWN)
  private String town;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_SUB_STREET = "subStreet";
  @SerializedName(SERIALIZED_NAME_SUB_STREET)
  private String subStreet;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_BUILDING_NAME = "buildingName";
  @SerializedName(SERIALIZED_NAME_BUILDING_NAME)
  private String buildingName;

  public static final String SERIALIZED_NAME_FLAT_NUMBER = "flatNumber";
  @SerializedName(SERIALIZED_NAME_FLAT_NUMBER)
  private String flatNumber;

  public static final String SERIALIZED_NAME_BUILDING_NUMBER = "buildingNumber";
  @SerializedName(SERIALIZED_NAME_BUILDING_NUMBER)
  private String buildingNumber;

  public ApplicantSubmitTransactionDataRequestApplicantAddress() {
  }

  public ApplicantSubmitTransactionDataRequestApplicantAddress country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Alpha-3 country code.
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Alpha-3 country code.")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public ApplicantSubmitTransactionDataRequestApplicantAddress postCode(String postCode) {
    
    
    
    
    this.postCode = postCode;
    return this;
  }

   /**
   * Postal code.
   * @return postCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal code.")

  public String getPostCode() {
    return postCode;
  }


  public void setPostCode(String postCode) {
    
    
    
    this.postCode = postCode;
  }


  public ApplicantSubmitTransactionDataRequestApplicantAddress town(String town) {
    
    
    
    
    this.town = town;
    return this;
  }

   /**
   * Town or city name.
   * @return town
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Town or city name.")

  public String getTown() {
    return town;
  }


  public void setTown(String town) {
    
    
    
    this.town = town;
  }


  public ApplicantSubmitTransactionDataRequestApplicantAddress street(String street) {
    
    
    
    
    this.street = street;
    return this;
  }

   /**
   * Street name.
   * @return street
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Street name.")

  public String getStreet() {
    return street;
  }


  public void setStreet(String street) {
    
    
    
    this.street = street;
  }


  public ApplicantSubmitTransactionDataRequestApplicantAddress subStreet(String subStreet) {
    
    
    
    
    this.subStreet = subStreet;
    return this;
  }

   /**
   * Additional street information.
   * @return subStreet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional street information.")

  public String getSubStreet() {
    return subStreet;
  }


  public void setSubStreet(String subStreet) {
    
    
    
    this.subStreet = subStreet;
  }


  public ApplicantSubmitTransactionDataRequestApplicantAddress state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * State name (if applicable).
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State name (if applicable).")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public ApplicantSubmitTransactionDataRequestApplicantAddress buildingName(String buildingName) {
    
    
    
    
    this.buildingName = buildingName;
    return this;
  }

   /**
   * Building name (if applicable).
   * @return buildingName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Building name (if applicable).")

  public String getBuildingName() {
    return buildingName;
  }


  public void setBuildingName(String buildingName) {
    
    
    
    this.buildingName = buildingName;
  }


  public ApplicantSubmitTransactionDataRequestApplicantAddress flatNumber(String flatNumber) {
    
    
    
    
    this.flatNumber = flatNumber;
    return this;
  }

   /**
   * Flat or apartment number.
   * @return flatNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flat or apartment number.")

  public String getFlatNumber() {
    return flatNumber;
  }


  public void setFlatNumber(String flatNumber) {
    
    
    
    this.flatNumber = flatNumber;
  }


  public ApplicantSubmitTransactionDataRequestApplicantAddress buildingNumber(String buildingNumber) {
    
    
    
    
    this.buildingNumber = buildingNumber;
    return this;
  }

   /**
   * Building number.
   * @return buildingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Building number.")

  public String getBuildingNumber() {
    return buildingNumber;
  }


  public void setBuildingNumber(String buildingNumber) {
    
    
    
    this.buildingNumber = buildingNumber;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantSubmitTransactionDataRequestApplicantAddress instance itself
   */
  public ApplicantSubmitTransactionDataRequestApplicantAddress putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantSubmitTransactionDataRequestApplicantAddress applicantSubmitTransactionDataRequestApplicantAddress = (ApplicantSubmitTransactionDataRequestApplicantAddress) o;
    return Objects.equals(this.country, applicantSubmitTransactionDataRequestApplicantAddress.country) &&
        Objects.equals(this.postCode, applicantSubmitTransactionDataRequestApplicantAddress.postCode) &&
        Objects.equals(this.town, applicantSubmitTransactionDataRequestApplicantAddress.town) &&
        Objects.equals(this.street, applicantSubmitTransactionDataRequestApplicantAddress.street) &&
        Objects.equals(this.subStreet, applicantSubmitTransactionDataRequestApplicantAddress.subStreet) &&
        Objects.equals(this.state, applicantSubmitTransactionDataRequestApplicantAddress.state) &&
        Objects.equals(this.buildingName, applicantSubmitTransactionDataRequestApplicantAddress.buildingName) &&
        Objects.equals(this.flatNumber, applicantSubmitTransactionDataRequestApplicantAddress.flatNumber) &&
        Objects.equals(this.buildingNumber, applicantSubmitTransactionDataRequestApplicantAddress.buildingNumber)&&
        Objects.equals(this.additionalProperties, applicantSubmitTransactionDataRequestApplicantAddress.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, postCode, town, street, subStreet, state, buildingName, flatNumber, buildingNumber, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantSubmitTransactionDataRequestApplicantAddress {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    town: ").append(toIndentedString(town)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    subStreet: ").append(toIndentedString(subStreet)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    buildingName: ").append(toIndentedString(buildingName)).append("\n");
    sb.append("    flatNumber: ").append(toIndentedString(flatNumber)).append("\n");
    sb.append("    buildingNumber: ").append(toIndentedString(buildingNumber)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("postCode");
    openapiFields.add("town");
    openapiFields.add("street");
    openapiFields.add("subStreet");
    openapiFields.add("state");
    openapiFields.add("buildingName");
    openapiFields.add("flatNumber");
    openapiFields.add("buildingNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantAddress
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantSubmitTransactionDataRequestApplicantAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantSubmitTransactionDataRequestApplicantAddress is not found in the empty JSON string", ApplicantSubmitTransactionDataRequestApplicantAddress.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("postCode") != null && !jsonObj.get("postCode").isJsonNull()) && !jsonObj.get("postCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postCode").toString()));
      }
      if ((jsonObj.get("town") != null && !jsonObj.get("town").isJsonNull()) && !jsonObj.get("town").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `town` to be a primitive type in the JSON string but got `%s`", jsonObj.get("town").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("subStreet") != null && !jsonObj.get("subStreet").isJsonNull()) && !jsonObj.get("subStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subStreet").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("buildingName") != null && !jsonObj.get("buildingName").isJsonNull()) && !jsonObj.get("buildingName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildingName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildingName").toString()));
      }
      if ((jsonObj.get("flatNumber") != null && !jsonObj.get("flatNumber").isJsonNull()) && !jsonObj.get("flatNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flatNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flatNumber").toString()));
      }
      if ((jsonObj.get("buildingNumber") != null && !jsonObj.get("buildingNumber").isJsonNull()) && !jsonObj.get("buildingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildingNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantSubmitTransactionDataRequestApplicantAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantSubmitTransactionDataRequestApplicantAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantSubmitTransactionDataRequestApplicantAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantAddress>() {
           @Override
           public void write(JsonWriter out, ApplicantSubmitTransactionDataRequestApplicantAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantSubmitTransactionDataRequestApplicantAddress read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantSubmitTransactionDataRequestApplicantAddress instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantSubmitTransactionDataRequestApplicantAddress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantSubmitTransactionDataRequestApplicantAddress
  * @throws IOException if the JSON string is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantAddress
  */
  public static ApplicantSubmitTransactionDataRequestApplicantAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantSubmitTransactionDataRequestApplicantAddress.class);
  }

 /**
  * Convert an instance of ApplicantSubmitTransactionDataRequestApplicantAddress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

