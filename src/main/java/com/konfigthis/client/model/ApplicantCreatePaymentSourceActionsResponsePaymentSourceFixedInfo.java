/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo {
  public static final String SERIALIZED_NAME_INSTITUTION_NAME = "institutionName";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_NAME)
  private String institutionName;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ACCOUNT_IDENTIFIER = "accountIdentifier";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IDENTIFIER)
  private String accountIdentifier;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo() {
  }

  public ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo institutionName(String institutionName) {
    
    
    
    
    this.institutionName = institutionName;
    return this;
  }

   /**
   * Get institutionName
   * @return institutionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Name", value = "")

  public String getInstitutionName() {
    return institutionName;
  }


  public void setInstitutionName(String institutionName) {
    
    
    
    this.institutionName = institutionName;
  }


  public ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Doe", value = "")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo accountIdentifier(String accountIdentifier) {
    
    
    
    
    this.accountIdentifier = accountIdentifier;
    return this;
  }

   /**
   * Get accountIdentifier
   * @return accountIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "120834387", value = "")

  public String getAccountIdentifier() {
    return accountIdentifier;
  }


  public void setAccountIdentifier(String accountIdentifier) {
    
    
    
    this.accountIdentifier = accountIdentifier;
  }


  public ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "JohnDoe@mail.com", value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo instance itself
   */
  public ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo applicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo = (ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo) o;
    return Objects.equals(this.institutionName, applicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.institutionName) &&
        Objects.equals(this.fullName, applicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.fullName) &&
        Objects.equals(this.accountIdentifier, applicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.accountIdentifier) &&
        Objects.equals(this.email, applicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.email)&&
        Objects.equals(this.additionalProperties, applicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(institutionName, fullName, accountIdentifier, email, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo {\n");
    sb.append("    institutionName: ").append(toIndentedString(institutionName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    accountIdentifier: ").append(toIndentedString(accountIdentifier)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("institutionName");
    openapiFields.add("fullName");
    openapiFields.add("accountIdentifier");
    openapiFields.add("email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo is not found in the empty JSON string", ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("institutionName") != null && !jsonObj.get("institutionName").isJsonNull()) && !jsonObj.get("institutionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institutionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institutionName").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("accountIdentifier") != null && !jsonObj.get("accountIdentifier").isJsonNull()) && !jsonObj.get("accountIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountIdentifier").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo>() {
           @Override
           public void write(JsonWriter out, ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo
  * @throws IOException if the JSON string is invalid with respect to ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo
  */
  public static ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo.class);
  }

 /**
  * Convert an instance of ApplicantCreatePaymentSourceActionsResponsePaymentSourceFixedInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

