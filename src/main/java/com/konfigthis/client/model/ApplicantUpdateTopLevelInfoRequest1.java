/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicantUpdateTopLevelInfoRequest1
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantUpdateTopLevelInfoRequest1 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXTERNAL_USER_ID = "externalUserId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_USER_ID)
  private String externalUserId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_SOURCE_KEY = "sourceKey";
  @SerializedName(SERIALIZED_NAME_SOURCE_KEY)
  private String sourceKey;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_QUESTIONNAIRES = "questionnaires";
  @SerializedName(SERIALIZED_NAME_QUESTIONNAIRES)
  private List<Object> questionnaires = null;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<Object> metadata = null;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public ApplicantUpdateTopLevelInfoRequest1() {
  }

  public ApplicantUpdateTopLevelInfoRequest1 id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * A unique applicant identifier.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique applicant identifier.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ApplicantUpdateTopLevelInfoRequest1 externalUserId(String externalUserId) {
    
    
    
    
    this.externalUserId = externalUserId;
    return this;
  }

   /**
   * An external applicant identifier.
   * @return externalUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An external applicant identifier.")

  public String getExternalUserId() {
    return externalUserId;
  }


  public void setExternalUserId(String externalUserId) {
    
    
    
    this.externalUserId = externalUserId;
  }


  public ApplicantUpdateTopLevelInfoRequest1 email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * A new email address that you want to assign to the given applicant.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A new email address that you want to assign to the given applicant.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public ApplicantUpdateTopLevelInfoRequest1 phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * A new phone number that you want to assign to the given applicant.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A new phone number that you want to assign to the given applicant.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public ApplicantUpdateTopLevelInfoRequest1 sourceKey(String sourceKey) {
    
    
    
    
    this.sourceKey = sourceKey;
    return this;
  }

   /**
   * A new [source key](https://docs.sumsub.com/reference) that you want to assign to the given applicant.
   * @return sourceKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A new [source key](https://docs.sumsub.com/reference) that you want to assign to the given applicant.")

  public String getSourceKey() {
    return sourceKey;
  }


  public void setSourceKey(String sourceKey) {
    
    
    
    this.sourceKey = sourceKey;
  }


  public ApplicantUpdateTopLevelInfoRequest1 lang(String lang) {
    
    
    
    
    this.lang = lang;
    return this;
  }

   /**
   * The language, in which the applicant should see the verification results.
   * @return lang
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The language, in which the applicant should see the verification results.")

  public String getLang() {
    return lang;
  }


  public void setLang(String lang) {
    
    
    
    this.lang = lang;
  }


  public ApplicantUpdateTopLevelInfoRequest1 questionnaires(List<Object> questionnaires) {
    
    
    
    
    this.questionnaires = questionnaires;
    return this;
  }

  public ApplicantUpdateTopLevelInfoRequest1 addQuestionnairesItem(Object questionnairesItem) {
    if (this.questionnaires == null) {
      this.questionnaires = new ArrayList<>();
    }
    this.questionnaires.add(questionnairesItem);
    return this;
  }

   /**
   * A [questionnaire](https://docs.sumsub.com/reference) configuration with answers.
   * @return questionnaires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A [questionnaire](https://docs.sumsub.com/reference) configuration with answers.")

  public List<Object> getQuestionnaires() {
    return questionnaires;
  }


  public void setQuestionnaires(List<Object> questionnaires) {
    
    
    
    this.questionnaires = questionnaires;
  }


  public ApplicantUpdateTopLevelInfoRequest1 metadata(List<Object> metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

  public ApplicantUpdateTopLevelInfoRequest1 addMetadataItem(Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Additional information about the applicant.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information about the applicant.")

  public List<Object> getMetadata() {
    return metadata;
  }


  public void setMetadata(List<Object> metadata) {
    
    
    
    this.metadata = metadata;
  }


  public ApplicantUpdateTopLevelInfoRequest1 deleted(Boolean deleted) {
    
    
    
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Marks an applicant as inactive if set to &#x60;true&#x60;. The applicant will not be considered a duplicate. SDKs will not initiate checks for this applicant.
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Marks an applicant as inactive if set to `true`. The applicant will not be considered a duplicate. SDKs will not initiate checks for this applicant.")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    
    
    
    this.deleted = deleted;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantUpdateTopLevelInfoRequest1 instance itself
   */
  public ApplicantUpdateTopLevelInfoRequest1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantUpdateTopLevelInfoRequest1 applicantUpdateTopLevelInfoRequest1 = (ApplicantUpdateTopLevelInfoRequest1) o;
    return Objects.equals(this.id, applicantUpdateTopLevelInfoRequest1.id) &&
        Objects.equals(this.externalUserId, applicantUpdateTopLevelInfoRequest1.externalUserId) &&
        Objects.equals(this.email, applicantUpdateTopLevelInfoRequest1.email) &&
        Objects.equals(this.phone, applicantUpdateTopLevelInfoRequest1.phone) &&
        Objects.equals(this.sourceKey, applicantUpdateTopLevelInfoRequest1.sourceKey) &&
        Objects.equals(this.lang, applicantUpdateTopLevelInfoRequest1.lang) &&
        Objects.equals(this.questionnaires, applicantUpdateTopLevelInfoRequest1.questionnaires) &&
        Objects.equals(this.metadata, applicantUpdateTopLevelInfoRequest1.metadata) &&
        Objects.equals(this.deleted, applicantUpdateTopLevelInfoRequest1.deleted)&&
        Objects.equals(this.additionalProperties, applicantUpdateTopLevelInfoRequest1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, externalUserId, email, phone, sourceKey, lang, questionnaires, metadata, deleted, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantUpdateTopLevelInfoRequest1 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalUserId: ").append(toIndentedString(externalUserId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    sourceKey: ").append(toIndentedString(sourceKey)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    questionnaires: ").append(toIndentedString(questionnaires)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("externalUserId");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("sourceKey");
    openapiFields.add("lang");
    openapiFields.add("questionnaires");
    openapiFields.add("metadata");
    openapiFields.add("deleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantUpdateTopLevelInfoRequest1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantUpdateTopLevelInfoRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantUpdateTopLevelInfoRequest1 is not found in the empty JSON string", ApplicantUpdateTopLevelInfoRequest1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicantUpdateTopLevelInfoRequest1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("externalUserId") != null && !jsonObj.get("externalUserId").isJsonNull()) && !jsonObj.get("externalUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalUserId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("sourceKey") != null && !jsonObj.get("sourceKey").isJsonNull()) && !jsonObj.get("sourceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceKey").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("questionnaires") != null && !jsonObj.get("questionnaires").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionnaires` to be an array in the JSON string but got `%s`", jsonObj.get("questionnaires").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantUpdateTopLevelInfoRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantUpdateTopLevelInfoRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantUpdateTopLevelInfoRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantUpdateTopLevelInfoRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantUpdateTopLevelInfoRequest1>() {
           @Override
           public void write(JsonWriter out, ApplicantUpdateTopLevelInfoRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantUpdateTopLevelInfoRequest1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantUpdateTopLevelInfoRequest1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantUpdateTopLevelInfoRequest1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantUpdateTopLevelInfoRequest1
  * @throws IOException if the JSON string is invalid with respect to ApplicantUpdateTopLevelInfoRequest1
  */
  public static ApplicantUpdateTopLevelInfoRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantUpdateTopLevelInfoRequest1.class);
  }

 /**
  * Convert an instance of ApplicantUpdateTopLevelInfoRequest1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

