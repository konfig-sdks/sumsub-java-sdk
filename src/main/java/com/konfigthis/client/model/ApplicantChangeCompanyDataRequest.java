/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicantChangeCompanyDataRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantChangeCompanyDataRequest {
  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_LEGAL_ADDRESS = "legalAddress";
  @SerializedName(SERIALIZED_NAME_LEGAL_ADDRESS)
  private String legalAddress;

  public static final String SERIALIZED_NAME_INCORPORATED_ON = "incorporatedOn";
  @SerializedName(SERIALIZED_NAME_INCORPORATED_ON)
  private String incorporatedOn;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_CONTROL_SCHEME = "controlScheme";
  @SerializedName(SERIALIZED_NAME_CONTROL_SCHEME)
  private String controlScheme;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_REGISTRATION_LOCATION = "registrationLocation";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_LOCATION)
  private String registrationLocation;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_POSTAL_ADDRESS = "postalAddress";
  @SerializedName(SERIALIZED_NAME_POSTAL_ADDRESS)
  private String postalAddress;

  public static final String SERIALIZED_NAME_BENEFICIARIES = "beneficiaries";
  @SerializedName(SERIALIZED_NAME_BENEFICIARIES)
  private List<String> beneficiaries = null;

  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<String> addresses = null;

  public ApplicantChangeCompanyDataRequest() {
  }

  public ApplicantChangeCompanyDataRequest companyName(String companyName) {
    
    
    
    
    this.companyName = companyName;
    return this;
  }

   /**
   * Name of the company.
   * @return companyName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the company.")

  public String getCompanyName() {
    return companyName;
  }


  public void setCompanyName(String companyName) {
    
    
    
    this.companyName = companyName;
  }


  public ApplicantChangeCompanyDataRequest registrationNumber(String registrationNumber) {
    
    
    
    
    this.registrationNumber = registrationNumber;
    return this;
  }

   /**
   * Registration number.
   * @return registrationNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Registration number.")

  public String getRegistrationNumber() {
    return registrationNumber;
  }


  public void setRegistrationNumber(String registrationNumber) {
    
    
    
    this.registrationNumber = registrationNumber;
  }


  public ApplicantChangeCompanyDataRequest country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * A three-letter country code (e.g. &#x60;DEU&#x60;).
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A three-letter country code (e.g. `DEU`).")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public ApplicantChangeCompanyDataRequest legalAddress(String legalAddress) {
    
    
    
    
    this.legalAddress = legalAddress;
    return this;
  }

   /**
   * Legal name.
   * @return legalAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Legal name.")

  public String getLegalAddress() {
    return legalAddress;
  }


  public void setLegalAddress(String legalAddress) {
    
    
    
    this.legalAddress = legalAddress;
  }


  public ApplicantChangeCompanyDataRequest incorporatedOn(String incorporatedOn) {
    
    
    
    
    this.incorporatedOn = incorporatedOn;
    return this;
  }

   /**
   * Date of incorporation (format &#x60;YYYY-mm-dd&#x60;, e.g. 2001-09-25).
   * @return incorporatedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of incorporation (format `YYYY-mm-dd`, e.g. 2001-09-25).")

  public String getIncorporatedOn() {
    return incorporatedOn;
  }


  public void setIncorporatedOn(String incorporatedOn) {
    
    
    
    this.incorporatedOn = incorporatedOn;
  }


  public ApplicantChangeCompanyDataRequest type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of entity.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of entity.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public ApplicantChangeCompanyDataRequest email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Email address.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email address.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public ApplicantChangeCompanyDataRequest controlScheme(String controlScheme) {
    
    
    
    
    this.controlScheme = controlScheme;
    return this;
  }

   /**
   * Description of the control scheme of the group of entities.
   * @return controlScheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the control scheme of the group of entities.")

  public String getControlScheme() {
    return controlScheme;
  }


  public void setControlScheme(String controlScheme) {
    
    
    
    this.controlScheme = controlScheme;
  }


  public ApplicantChangeCompanyDataRequest phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Phone number.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Phone number.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public ApplicantChangeCompanyDataRequest taxId(String taxId) {
    
    
    
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Taxpayer registration number/Code of taxpayer registration.
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Taxpayer registration number/Code of taxpayer registration.")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    
    
    
    this.taxId = taxId;
  }


  public ApplicantChangeCompanyDataRequest registrationLocation(String registrationLocation) {
    
    
    
    
    this.registrationLocation = registrationLocation;
    return this;
  }

   /**
   * Location of registration.
   * @return registrationLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location of registration.")

  public String getRegistrationLocation() {
    return registrationLocation;
  }


  public void setRegistrationLocation(String registrationLocation) {
    
    
    
    this.registrationLocation = registrationLocation;
  }


  public ApplicantChangeCompanyDataRequest website(String website) {
    
    
    
    
    this.website = website;
    return this;
  }

   /**
   * Website&#39;s URL.
   * @return website
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Website's URL.")

  public String getWebsite() {
    return website;
  }


  public void setWebsite(String website) {
    
    
    
    this.website = website;
  }


  public ApplicantChangeCompanyDataRequest postalAddress(String postalAddress) {
    
    
    
    
    this.postalAddress = postalAddress;
    return this;
  }

   /**
   * Postal address.
   * @return postalAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal address.")

  public String getPostalAddress() {
    return postalAddress;
  }


  public void setPostalAddress(String postalAddress) {
    
    
    
    this.postalAddress = postalAddress;
  }


  public ApplicantChangeCompanyDataRequest beneficiaries(List<String> beneficiaries) {
    
    
    
    
    this.beneficiaries = beneficiaries;
    return this;
  }

  public ApplicantChangeCompanyDataRequest addBeneficiariesItem(String beneficiariesItem) {
    if (this.beneficiaries == null) {
      this.beneficiaries = new ArrayList<>();
    }
    this.beneficiaries.add(beneficiariesItem);
    return this;
  }

   /**
   * Contains applicantIds of beneficiaries and additional info like position and type.
   * @return beneficiaries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contains applicantIds of beneficiaries and additional info like position and type.")

  public List<String> getBeneficiaries() {
    return beneficiaries;
  }


  public void setBeneficiaries(List<String> beneficiaries) {
    
    
    
    this.beneficiaries = beneficiaries;
  }


  public ApplicantChangeCompanyDataRequest addresses(List<String> addresses) {
    
    
    
    
    this.addresses = addresses;
    return this;
  }

  public ApplicantChangeCompanyDataRequest addAddressesItem(String addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * List of addresses.
   * @return addresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of addresses.")

  public List<String> getAddresses() {
    return addresses;
  }


  public void setAddresses(List<String> addresses) {
    
    
    
    this.addresses = addresses;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantChangeCompanyDataRequest instance itself
   */
  public ApplicantChangeCompanyDataRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest = (ApplicantChangeCompanyDataRequest) o;
    return Objects.equals(this.companyName, applicantChangeCompanyDataRequest.companyName) &&
        Objects.equals(this.registrationNumber, applicantChangeCompanyDataRequest.registrationNumber) &&
        Objects.equals(this.country, applicantChangeCompanyDataRequest.country) &&
        Objects.equals(this.legalAddress, applicantChangeCompanyDataRequest.legalAddress) &&
        Objects.equals(this.incorporatedOn, applicantChangeCompanyDataRequest.incorporatedOn) &&
        Objects.equals(this.type, applicantChangeCompanyDataRequest.type) &&
        Objects.equals(this.email, applicantChangeCompanyDataRequest.email) &&
        Objects.equals(this.controlScheme, applicantChangeCompanyDataRequest.controlScheme) &&
        Objects.equals(this.phone, applicantChangeCompanyDataRequest.phone) &&
        Objects.equals(this.taxId, applicantChangeCompanyDataRequest.taxId) &&
        Objects.equals(this.registrationLocation, applicantChangeCompanyDataRequest.registrationLocation) &&
        Objects.equals(this.website, applicantChangeCompanyDataRequest.website) &&
        Objects.equals(this.postalAddress, applicantChangeCompanyDataRequest.postalAddress) &&
        Objects.equals(this.beneficiaries, applicantChangeCompanyDataRequest.beneficiaries) &&
        Objects.equals(this.addresses, applicantChangeCompanyDataRequest.addresses)&&
        Objects.equals(this.additionalProperties, applicantChangeCompanyDataRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyName, registrationNumber, country, legalAddress, incorporatedOn, type, email, controlScheme, phone, taxId, registrationLocation, website, postalAddress, beneficiaries, addresses, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantChangeCompanyDataRequest {\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    legalAddress: ").append(toIndentedString(legalAddress)).append("\n");
    sb.append("    incorporatedOn: ").append(toIndentedString(incorporatedOn)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    controlScheme: ").append(toIndentedString(controlScheme)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    registrationLocation: ").append(toIndentedString(registrationLocation)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    postalAddress: ").append(toIndentedString(postalAddress)).append("\n");
    sb.append("    beneficiaries: ").append(toIndentedString(beneficiaries)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companyName");
    openapiFields.add("registrationNumber");
    openapiFields.add("country");
    openapiFields.add("legalAddress");
    openapiFields.add("incorporatedOn");
    openapiFields.add("type");
    openapiFields.add("email");
    openapiFields.add("controlScheme");
    openapiFields.add("phone");
    openapiFields.add("taxId");
    openapiFields.add("registrationLocation");
    openapiFields.add("website");
    openapiFields.add("postalAddress");
    openapiFields.add("beneficiaries");
    openapiFields.add("addresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("companyName");
    openapiRequiredFields.add("registrationNumber");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantChangeCompanyDataRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantChangeCompanyDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantChangeCompanyDataRequest is not found in the empty JSON string", ApplicantChangeCompanyDataRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicantChangeCompanyDataRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if (!jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("legalAddress") != null && !jsonObj.get("legalAddress").isJsonNull()) && !jsonObj.get("legalAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalAddress").toString()));
      }
      if ((jsonObj.get("incorporatedOn") != null && !jsonObj.get("incorporatedOn").isJsonNull()) && !jsonObj.get("incorporatedOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incorporatedOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incorporatedOn").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("controlScheme") != null && !jsonObj.get("controlScheme").isJsonNull()) && !jsonObj.get("controlScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlScheme").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if ((jsonObj.get("registrationLocation") != null && !jsonObj.get("registrationLocation").isJsonNull()) && !jsonObj.get("registrationLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationLocation").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if ((jsonObj.get("postalAddress") != null && !jsonObj.get("postalAddress").isJsonNull()) && !jsonObj.get("postalAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("beneficiaries") != null && !jsonObj.get("beneficiaries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaries` to be an array in the JSON string but got `%s`", jsonObj.get("beneficiaries").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantChangeCompanyDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantChangeCompanyDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantChangeCompanyDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantChangeCompanyDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantChangeCompanyDataRequest>() {
           @Override
           public void write(JsonWriter out, ApplicantChangeCompanyDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantChangeCompanyDataRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantChangeCompanyDataRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantChangeCompanyDataRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantChangeCompanyDataRequest
  * @throws IOException if the JSON string is invalid with respect to ApplicantChangeCompanyDataRequest
  */
  public static ApplicantChangeCompanyDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantChangeCompanyDataRequest.class);
  }

 /**
  * Convert an instance of ApplicantChangeCompanyDataRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

