/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicantSubmitTransactionDataRequestApplicantIdDocsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantSubmitTransactionDataRequestApplicantIdDocsInner {
  public static final String SERIALIZED_NAME_ID_DOC_TYPE = "idDocType";
  @SerializedName(SERIALIZED_NAME_ID_DOC_TYPE)
  private String idDocType;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private String dob;

  public static final String SERIALIZED_NAME_PLACE_OF_BIRTH = "placeOfBirth";
  @SerializedName(SERIALIZED_NAME_PLACE_OF_BIRTH)
  private String placeOfBirth;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public ApplicantSubmitTransactionDataRequestApplicantIdDocsInner() {
  }

  public ApplicantSubmitTransactionDataRequestApplicantIdDocsInner idDocType(String idDocType) {
    
    
    
    
    this.idDocType = idDocType;
    return this;
  }

   /**
   * A [document type](ref:add-id-documents#supported-document-types).
   * @return idDocType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A [document type](ref:add-id-documents#supported-document-types).")

  public String getIdDocType() {
    return idDocType;
  }


  public void setIdDocType(String idDocType) {
    
    
    
    this.idDocType = idDocType;
  }


  public ApplicantSubmitTransactionDataRequestApplicantIdDocsInner dob(String dob) {
    
    
    
    
    this.dob = dob;
    return this;
  }

   /**
   * Date of birth (format YYYY-mm-dd, e.g. 2001-09-25).
   * @return dob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of birth (format YYYY-mm-dd, e.g. 2001-09-25).")

  public String getDob() {
    return dob;
  }


  public void setDob(String dob) {
    
    
    
    this.dob = dob;
  }


  public ApplicantSubmitTransactionDataRequestApplicantIdDocsInner placeOfBirth(String placeOfBirth) {
    
    
    
    
    this.placeOfBirth = placeOfBirth;
    return this;
  }

   /**
   * Birthplace.
   * @return placeOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Birthplace.")

  public String getPlaceOfBirth() {
    return placeOfBirth;
  }


  public void setPlaceOfBirth(String placeOfBirth) {
    
    
    
    this.placeOfBirth = placeOfBirth;
  }


  public ApplicantSubmitTransactionDataRequestApplicantIdDocsInner country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Alpha-3 country code of the provided document.
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Alpha-3 country code of the provided document.")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public ApplicantSubmitTransactionDataRequestApplicantIdDocsInner number(String number) {
    
    
    
    
    this.number = number;
    return this;
  }

   /**
   * A document number.
   * @return number
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A document number.")

  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    
    
    
    this.number = number;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantSubmitTransactionDataRequestApplicantIdDocsInner instance itself
   */
  public ApplicantSubmitTransactionDataRequestApplicantIdDocsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantSubmitTransactionDataRequestApplicantIdDocsInner applicantSubmitTransactionDataRequestApplicantIdDocsInner = (ApplicantSubmitTransactionDataRequestApplicantIdDocsInner) o;
    return Objects.equals(this.idDocType, applicantSubmitTransactionDataRequestApplicantIdDocsInner.idDocType) &&
        Objects.equals(this.dob, applicantSubmitTransactionDataRequestApplicantIdDocsInner.dob) &&
        Objects.equals(this.placeOfBirth, applicantSubmitTransactionDataRequestApplicantIdDocsInner.placeOfBirth) &&
        Objects.equals(this.country, applicantSubmitTransactionDataRequestApplicantIdDocsInner.country) &&
        Objects.equals(this.number, applicantSubmitTransactionDataRequestApplicantIdDocsInner.number)&&
        Objects.equals(this.additionalProperties, applicantSubmitTransactionDataRequestApplicantIdDocsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idDocType, dob, placeOfBirth, country, number, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantSubmitTransactionDataRequestApplicantIdDocsInner {\n");
    sb.append("    idDocType: ").append(toIndentedString(idDocType)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    placeOfBirth: ").append(toIndentedString(placeOfBirth)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idDocType");
    openapiFields.add("dob");
    openapiFields.add("placeOfBirth");
    openapiFields.add("country");
    openapiFields.add("number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantIdDocsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantSubmitTransactionDataRequestApplicantIdDocsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantSubmitTransactionDataRequestApplicantIdDocsInner is not found in the empty JSON string", ApplicantSubmitTransactionDataRequestApplicantIdDocsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("idDocType") != null && !jsonObj.get("idDocType").isJsonNull()) && !jsonObj.get("idDocType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idDocType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idDocType").toString()));
      }
      if ((jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) && !jsonObj.get("dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dob").toString()));
      }
      if ((jsonObj.get("placeOfBirth") != null && !jsonObj.get("placeOfBirth").isJsonNull()) && !jsonObj.get("placeOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeOfBirth").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantSubmitTransactionDataRequestApplicantIdDocsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantSubmitTransactionDataRequestApplicantIdDocsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantIdDocsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantSubmitTransactionDataRequestApplicantIdDocsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantIdDocsInner>() {
           @Override
           public void write(JsonWriter out, ApplicantSubmitTransactionDataRequestApplicantIdDocsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantSubmitTransactionDataRequestApplicantIdDocsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantSubmitTransactionDataRequestApplicantIdDocsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantSubmitTransactionDataRequestApplicantIdDocsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantSubmitTransactionDataRequestApplicantIdDocsInner
  * @throws IOException if the JSON string is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantIdDocsInner
  */
  public static ApplicantSubmitTransactionDataRequestApplicantIdDocsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantSubmitTransactionDataRequestApplicantIdDocsInner.class);
  }

 /**
  * Convert an instance of ApplicantSubmitTransactionDataRequestApplicantIdDocsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

