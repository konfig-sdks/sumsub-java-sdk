/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the payment method.
 */
@ApiModel(description = "Information about the payment method.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantSubmitTransactionDataRequestApplicantPaymentMethod {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ISSUING_COUNTRY = "issuingCountry";
  @SerializedName(SERIALIZED_NAME_ISSUING_COUNTRY)
  private String issuingCountry;

  public static final String SERIALIZED_NAME_3DS_USED = "3dsUsed";
  @SerializedName(SERIALIZED_NAME_3DS_USED)
  private Boolean _3dsUsed;

  public static final String SERIALIZED_NAME_2FA_USED = "2faUsed";
  @SerializedName(SERIALIZED_NAME_2FA_USED)
  private Boolean _2faUsed;

  public ApplicantSubmitTransactionDataRequestApplicantPaymentMethod() {
  }

  public ApplicantSubmitTransactionDataRequestApplicantPaymentMethod type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Payment method type: &#x60;card&#x60;/&#x60;account&#x60;/&#x60;crypto&#x60;.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment method type: `card`/`account`/`crypto`.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public ApplicantSubmitTransactionDataRequestApplicantPaymentMethod accountId(String accountId) {
    
    
    
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Representation of the account ID: Account number, IBAN or DC hash for &#x60;card&#x60;, crypto wallet address for &#x60;crypto&#x60; type etc.
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Representation of the account ID: Account number, IBAN or DC hash for `card`, crypto wallet address for `crypto` type etc.")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    
    this.accountId = accountId;
  }


  public ApplicantSubmitTransactionDataRequestApplicantPaymentMethod issuingCountry(String issuingCountry) {
    
    
    
    
    this.issuingCountry = issuingCountry;
    return this;
  }

   /**
   * The payment issuing country code in Alpha-3 format.
   * @return issuingCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The payment issuing country code in Alpha-3 format.")

  public String getIssuingCountry() {
    return issuingCountry;
  }


  public void setIssuingCountry(String issuingCountry) {
    
    
    
    this.issuingCountry = issuingCountry;
  }


  public ApplicantSubmitTransactionDataRequestApplicantPaymentMethod _3dsUsed(Boolean _3dsUsed) {
    
    
    
    
    this._3dsUsed = _3dsUsed;
    return this;
  }

   /**
   * Indication of 3d secure auth being used.
   * @return _3dsUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indication of 3d secure auth being used.")

  public Boolean get3dsUsed() {
    return _3dsUsed;
  }


  public void set3dsUsed(Boolean _3dsUsed) {
    
    
    
    this._3dsUsed = _3dsUsed;
  }


  public ApplicantSubmitTransactionDataRequestApplicantPaymentMethod _2faUsed(Boolean _2faUsed) {
    
    
    
    
    this._2faUsed = _2faUsed;
    return this;
  }

   /**
   * Indication of 2fa being used.
   * @return _2faUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indication of 2fa being used.")

  public Boolean get2faUsed() {
    return _2faUsed;
  }


  public void set2faUsed(Boolean _2faUsed) {
    
    
    
    this._2faUsed = _2faUsed;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantSubmitTransactionDataRequestApplicantPaymentMethod instance itself
   */
  public ApplicantSubmitTransactionDataRequestApplicantPaymentMethod putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantSubmitTransactionDataRequestApplicantPaymentMethod applicantSubmitTransactionDataRequestApplicantPaymentMethod = (ApplicantSubmitTransactionDataRequestApplicantPaymentMethod) o;
    return Objects.equals(this.type, applicantSubmitTransactionDataRequestApplicantPaymentMethod.type) &&
        Objects.equals(this.accountId, applicantSubmitTransactionDataRequestApplicantPaymentMethod.accountId) &&
        Objects.equals(this.issuingCountry, applicantSubmitTransactionDataRequestApplicantPaymentMethod.issuingCountry) &&
        Objects.equals(this._3dsUsed, applicantSubmitTransactionDataRequestApplicantPaymentMethod._3dsUsed) &&
        Objects.equals(this._2faUsed, applicantSubmitTransactionDataRequestApplicantPaymentMethod._2faUsed)&&
        Objects.equals(this.additionalProperties, applicantSubmitTransactionDataRequestApplicantPaymentMethod.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, accountId, issuingCountry, _3dsUsed, _2faUsed, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantSubmitTransactionDataRequestApplicantPaymentMethod {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    issuingCountry: ").append(toIndentedString(issuingCountry)).append("\n");
    sb.append("    _3dsUsed: ").append(toIndentedString(_3dsUsed)).append("\n");
    sb.append("    _2faUsed: ").append(toIndentedString(_2faUsed)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("accountId");
    openapiFields.add("issuingCountry");
    openapiFields.add("3dsUsed");
    openapiFields.add("2faUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantPaymentMethod
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantSubmitTransactionDataRequestApplicantPaymentMethod.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantSubmitTransactionDataRequestApplicantPaymentMethod is not found in the empty JSON string", ApplicantSubmitTransactionDataRequestApplicantPaymentMethod.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("issuingCountry") != null && !jsonObj.get("issuingCountry").isJsonNull()) && !jsonObj.get("issuingCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuingCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuingCountry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantSubmitTransactionDataRequestApplicantPaymentMethod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantSubmitTransactionDataRequestApplicantPaymentMethod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantPaymentMethod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantSubmitTransactionDataRequestApplicantPaymentMethod.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantPaymentMethod>() {
           @Override
           public void write(JsonWriter out, ApplicantSubmitTransactionDataRequestApplicantPaymentMethod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantSubmitTransactionDataRequestApplicantPaymentMethod read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantSubmitTransactionDataRequestApplicantPaymentMethod instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantSubmitTransactionDataRequestApplicantPaymentMethod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantSubmitTransactionDataRequestApplicantPaymentMethod
  * @throws IOException if the JSON string is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantPaymentMethod
  */
  public static ApplicantSubmitTransactionDataRequestApplicantPaymentMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantSubmitTransactionDataRequestApplicantPaymentMethod.class);
  }

 /**
  * Convert an instance of ApplicantSubmitTransactionDataRequestApplicantPaymentMethod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

