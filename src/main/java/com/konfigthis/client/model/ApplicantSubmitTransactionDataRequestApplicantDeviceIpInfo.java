/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Data about used IP address.
 */
@ApiModel(description = "Data about used IP address.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo {
  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private Double lon;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_COUNTRY_CODE3 = "countryCode3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE3)
  private String countryCode3;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Integer asn;

  public static final String SERIALIZED_NAME_ASN_ORG = "asnOrg";
  @SerializedName(SERIALIZED_NAME_ASN_ORG)
  private String asnOrg;

  public static final String SERIALIZED_NAME_RISKY_ASN = "riskyAsn";
  @SerializedName(SERIALIZED_NAME_RISKY_ASN)
  private Boolean riskyAsn;

  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo() {
  }

  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo lat(Double lat) {
    
    
    
    
    this.lat = lat;
    return this;
  }

   /**
   * Position latitude in decimal degrees.
   * @return lat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Position latitude in decimal degrees.")

  public Double getLat() {
    return lat;
  }


  public void setLat(Double lat) {
    
    
    
    this.lat = lat;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo lon(Double lon) {
    
    
    
    
    this.lon = lon;
    return this;
  }

   /**
   * Position longitude in decimal degrees.
   * @return lon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Position longitude in decimal degrees.")

  public Double getLon() {
    return lon;
  }


  public void setLon(Double lon) {
    
    
    
    this.lon = lon;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo ip(String ip) {
    
    
    
    
    this.ip = ip;
    return this;
  }

   /**
   * IP address.
   * @return ip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IP address.")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    
    
    
    this.ip = ip;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo countryCode3(String countryCode3) {
    
    
    
    
    this.countryCode3 = countryCode3;
    return this;
  }

   /**
   * Country Alpha-3 code.
   * @return countryCode3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Country Alpha-3 code.")

  public String getCountryCode3() {
    return countryCode3;
  }


  public void setCountryCode3(String countryCode3) {
    
    
    
    this.countryCode3 = countryCode3;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo asn(Integer asn) {
    
    
    
    
    this.asn = asn;
    return this;
  }

   /**
   * ASN.
   * @return asn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ASN.")

  public Integer getAsn() {
    return asn;
  }


  public void setAsn(Integer asn) {
    
    
    
    this.asn = asn;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo asnOrg(String asnOrg) {
    
    
    
    
    this.asnOrg = asnOrg;
    return this;
  }

   /**
   * ASN organisation.
   * @return asnOrg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ASN organisation.")

  public String getAsnOrg() {
    return asnOrg;
  }


  public void setAsnOrg(String asnOrg) {
    
    
    
    this.asnOrg = asnOrg;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo riskyAsn(Boolean riskyAsn) {
    
    
    
    
    this.riskyAsn = riskyAsn;
    return this;
  }

   /**
   * ASN is risky or not.
   * @return riskyAsn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ASN is risky or not.")

  public Boolean getRiskyAsn() {
    return riskyAsn;
  }


  public void setRiskyAsn(Boolean riskyAsn) {
    
    
    
    this.riskyAsn = riskyAsn;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo instance itself
   */
  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo applicantSubmitTransactionDataRequestApplicantDeviceIpInfo = (ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo) o;
    return Objects.equals(this.lat, applicantSubmitTransactionDataRequestApplicantDeviceIpInfo.lat) &&
        Objects.equals(this.lon, applicantSubmitTransactionDataRequestApplicantDeviceIpInfo.lon) &&
        Objects.equals(this.ip, applicantSubmitTransactionDataRequestApplicantDeviceIpInfo.ip) &&
        Objects.equals(this.countryCode3, applicantSubmitTransactionDataRequestApplicantDeviceIpInfo.countryCode3) &&
        Objects.equals(this.asn, applicantSubmitTransactionDataRequestApplicantDeviceIpInfo.asn) &&
        Objects.equals(this.asnOrg, applicantSubmitTransactionDataRequestApplicantDeviceIpInfo.asnOrg) &&
        Objects.equals(this.riskyAsn, applicantSubmitTransactionDataRequestApplicantDeviceIpInfo.riskyAsn)&&
        Objects.equals(this.additionalProperties, applicantSubmitTransactionDataRequestApplicantDeviceIpInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lat, lon, ip, countryCode3, asn, asnOrg, riskyAsn, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo {\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    countryCode3: ").append(toIndentedString(countryCode3)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    asnOrg: ").append(toIndentedString(asnOrg)).append("\n");
    sb.append("    riskyAsn: ").append(toIndentedString(riskyAsn)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("ip");
    openapiFields.add("countryCode3");
    openapiFields.add("asn");
    openapiFields.add("asnOrg");
    openapiFields.add("riskyAsn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo is not found in the empty JSON string", ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("countryCode3") != null && !jsonObj.get("countryCode3").isJsonNull()) && !jsonObj.get("countryCode3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode3").toString()));
      }
      if ((jsonObj.get("asnOrg") != null && !jsonObj.get("asnOrg").isJsonNull()) && !jsonObj.get("asnOrg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asnOrg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asnOrg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo>() {
           @Override
           public void write(JsonWriter out, ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo
  * @throws IOException if the JSON string is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo
  */
  public static ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo.class);
  }

 /**
  * Convert an instance of ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

