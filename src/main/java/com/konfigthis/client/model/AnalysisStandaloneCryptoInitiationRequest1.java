/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AnalysisStandaloneCryptoInitiationRequest1
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AnalysisStandaloneCryptoInitiationRequest1 {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_TXN = "txn";
  @SerializedName(SERIALIZED_NAME_TXN)
  private String txn;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_TOKEN_ID = "tokenId";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public AnalysisStandaloneCryptoInitiationRequest1() {
  }

  public AnalysisStandaloneCryptoInitiationRequest1 currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * &#x60;BTC&#x60;, &#x60;ETH&#x60;, &#x60;BCH&#x60;, &#x60;LTC&#x60;, &#x60;USDT&#x60;, &#x60;ERC-20&#x60;, &#x60;BSV&#x60;, &#x60;XLM&#x60;, ...
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "`BTC`, `ETH`, `BCH`, `LTC`, `USDT`, `ERC-20`, `BSV`, `XLM`, ...")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public AnalysisStandaloneCryptoInitiationRequest1 direction(String direction) {
    
    
    
    
    this.direction = direction;
    return this;
  }

   /**
   * An operation type. Can be &#x60;withdrawal&#x60; or &#x60;deposit&#x60;.
   * @return direction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An operation type. Can be `withdrawal` or `deposit`.")

  public String getDirection() {
    return direction;
  }


  public void setDirection(String direction) {
    
    
    
    this.direction = direction;
  }


  public AnalysisStandaloneCryptoInitiationRequest1 txn(String txn) {
    
    
    
    
    this.txn = txn;
    return this;
  }

   /**
   * Transaction hash. For &#x60;withdrawals&#x60;, &#x60;txn&#x60; should not be set at all or set to &#x60;null&#x60;.
   * @return txn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction hash. For `withdrawals`, `txn` should not be set at all or set to `null`.")

  public String getTxn() {
    return txn;
  }


  public void setTxn(String txn) {
    
    
    
    this.txn = txn;
  }


  public AnalysisStandaloneCryptoInitiationRequest1 address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Target address hash.
   * @return address
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Target address hash.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public AnalysisStandaloneCryptoInitiationRequest1 tokenId(String tokenId) {
    
    
    
    
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Check the [Get available tokens](ref:get-available-tokens) method to get the full list of available currencies and token IDs.
   * @return tokenId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Check the [Get available tokens](ref:get-available-tokens) method to get the full list of available currencies and token IDs.")

  public String getTokenId() {
    return tokenId;
  }


  public void setTokenId(String tokenId) {
    
    
    
    this.tokenId = tokenId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AnalysisStandaloneCryptoInitiationRequest1 instance itself
   */
  public AnalysisStandaloneCryptoInitiationRequest1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisStandaloneCryptoInitiationRequest1 analysisStandaloneCryptoInitiationRequest1 = (AnalysisStandaloneCryptoInitiationRequest1) o;
    return Objects.equals(this.currency, analysisStandaloneCryptoInitiationRequest1.currency) &&
        Objects.equals(this.direction, analysisStandaloneCryptoInitiationRequest1.direction) &&
        Objects.equals(this.txn, analysisStandaloneCryptoInitiationRequest1.txn) &&
        Objects.equals(this.address, analysisStandaloneCryptoInitiationRequest1.address) &&
        Objects.equals(this.tokenId, analysisStandaloneCryptoInitiationRequest1.tokenId)&&
        Objects.equals(this.additionalProperties, analysisStandaloneCryptoInitiationRequest1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, direction, txn, address, tokenId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisStandaloneCryptoInitiationRequest1 {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    txn: ").append(toIndentedString(txn)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("direction");
    openapiFields.add("txn");
    openapiFields.add("address");
    openapiFields.add("tokenId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("address");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AnalysisStandaloneCryptoInitiationRequest1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AnalysisStandaloneCryptoInitiationRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisStandaloneCryptoInitiationRequest1 is not found in the empty JSON string", AnalysisStandaloneCryptoInitiationRequest1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalysisStandaloneCryptoInitiationRequest1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("txn") != null && !jsonObj.get("txn").isJsonNull()) && !jsonObj.get("txn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txn").toString()));
      }
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("tokenId") != null && !jsonObj.get("tokenId").isJsonNull()) && !jsonObj.get("tokenId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisStandaloneCryptoInitiationRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisStandaloneCryptoInitiationRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisStandaloneCryptoInitiationRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisStandaloneCryptoInitiationRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisStandaloneCryptoInitiationRequest1>() {
           @Override
           public void write(JsonWriter out, AnalysisStandaloneCryptoInitiationRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisStandaloneCryptoInitiationRequest1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AnalysisStandaloneCryptoInitiationRequest1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AnalysisStandaloneCryptoInitiationRequest1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AnalysisStandaloneCryptoInitiationRequest1
  * @throws IOException if the JSON string is invalid with respect to AnalysisStandaloneCryptoInitiationRequest1
  */
  public static AnalysisStandaloneCryptoInitiationRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisStandaloneCryptoInitiationRequest1.class);
  }

 /**
  * Convert an instance of AnalysisStandaloneCryptoInitiationRequest1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

