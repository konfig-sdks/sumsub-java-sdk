/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * An object representing an ID document.
 */
@ApiModel(description = "An object representing an ID document.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantAddIdDocumentRequestMetadata {
  public static final String SERIALIZED_NAME_ID_DOC_TYPE = "idDocType";
  @SerializedName(SERIALIZED_NAME_ID_DOC_TYPE)
  private String idDocType;

  public static final String SERIALIZED_NAME_ID_DOC_SUB_TYPE = "idDocSubType";
  @SerializedName(SERIALIZED_NAME_ID_DOC_SUB_TYPE)
  private String idDocSubType;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_ISSUED_DATE = "issuedDate";
  @SerializedName(SERIALIZED_NAME_ISSUED_DATE)
  private String issuedDate;

  public static final String SERIALIZED_NAME_VALID_UNTIL = "validUntil";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL)
  private String validUntil;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private String dob;

  public static final String SERIALIZED_NAME_PLACE_OF_BIRTH = "placeOfBirth";
  @SerializedName(SERIALIZED_NAME_PLACE_OF_BIRTH)
  private String placeOfBirth;

  public ApplicantAddIdDocumentRequestMetadata() {
  }

  public ApplicantAddIdDocumentRequestMetadata idDocType(String idDocType) {
    
    
    
    
    this.idDocType = idDocType;
    return this;
  }

   /**
   * A document type.
   * @return idDocType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A document type.")

  public String getIdDocType() {
    return idDocType;
  }


  public void setIdDocType(String idDocType) {
    
    
    
    this.idDocType = idDocType;
  }


  public ApplicantAddIdDocumentRequestMetadata idDocSubType(String idDocSubType) {
    
    
    
    
    this.idDocSubType = idDocSubType;
    return this;
  }

   /**
   * &#x60;FRONT_SIDE&#x60;, &#x60;BACK_SIDE&#x60; or &#x60;null&#x60;.
   * @return idDocSubType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "`FRONT_SIDE`, `BACK_SIDE` or `null`.")

  public String getIdDocSubType() {
    return idDocSubType;
  }


  public void setIdDocSubType(String idDocSubType) {
    
    
    
    this.idDocSubType = idDocSubType;
  }


  public ApplicantAddIdDocumentRequestMetadata country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * ISO 3166-1 alpha-3 country code.
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ISO 3166-1 alpha-3 country code.")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public ApplicantAddIdDocumentRequestMetadata firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * The first applicant name.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The first applicant name.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public ApplicantAddIdDocumentRequestMetadata middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * The middle applicant name.
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The middle applicant name.")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public ApplicantAddIdDocumentRequestMetadata lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * The last applicant name.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last applicant name.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public ApplicantAddIdDocumentRequestMetadata issuedDate(String issuedDate) {
    
    
    
    
    this.issuedDate = issuedDate;
    return this;
  }

   /**
   * Issued date (format &#x60;YYYY-mm-dd&#x60;, e.g. 2001-09-25).
   * @return issuedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Issued date (format `YYYY-mm-dd`, e.g. 2001-09-25).")

  public String getIssuedDate() {
    return issuedDate;
  }


  public void setIssuedDate(String issuedDate) {
    
    
    
    this.issuedDate = issuedDate;
  }


  public ApplicantAddIdDocumentRequestMetadata validUntil(String validUntil) {
    
    
    
    
    this.validUntil = validUntil;
    return this;
  }

   /**
   * Valid until date (format &#x60;YYYY-mm-dd&#x60;, e.g. 2001-09-26).
   * @return validUntil
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Valid until date (format `YYYY-mm-dd`, e.g. 2001-09-26).")

  public String getValidUntil() {
    return validUntil;
  }


  public void setValidUntil(String validUntil) {
    
    
    
    this.validUntil = validUntil;
  }


  public ApplicantAddIdDocumentRequestMetadata number(String number) {
    
    
    
    
    this.number = number;
    return this;
  }

   /**
   * A document number.
   * @return number
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A document number.")

  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    
    
    
    this.number = number;
  }


  public ApplicantAddIdDocumentRequestMetadata dob(String dob) {
    
    
    
    
    this.dob = dob;
    return this;
  }

   /**
   * The applicant date of birth.
   * @return dob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The applicant date of birth.")

  public String getDob() {
    return dob;
  }


  public void setDob(String dob) {
    
    
    
    this.dob = dob;
  }


  public ApplicantAddIdDocumentRequestMetadata placeOfBirth(String placeOfBirth) {
    
    
    
    
    this.placeOfBirth = placeOfBirth;
    return this;
  }

   /**
   * The applicant birthplace.
   * @return placeOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The applicant birthplace.")

  public String getPlaceOfBirth() {
    return placeOfBirth;
  }


  public void setPlaceOfBirth(String placeOfBirth) {
    
    
    
    this.placeOfBirth = placeOfBirth;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantAddIdDocumentRequestMetadata instance itself
   */
  public ApplicantAddIdDocumentRequestMetadata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantAddIdDocumentRequestMetadata applicantAddIdDocumentRequestMetadata = (ApplicantAddIdDocumentRequestMetadata) o;
    return Objects.equals(this.idDocType, applicantAddIdDocumentRequestMetadata.idDocType) &&
        Objects.equals(this.idDocSubType, applicantAddIdDocumentRequestMetadata.idDocSubType) &&
        Objects.equals(this.country, applicantAddIdDocumentRequestMetadata.country) &&
        Objects.equals(this.firstName, applicantAddIdDocumentRequestMetadata.firstName) &&
        Objects.equals(this.middleName, applicantAddIdDocumentRequestMetadata.middleName) &&
        Objects.equals(this.lastName, applicantAddIdDocumentRequestMetadata.lastName) &&
        Objects.equals(this.issuedDate, applicantAddIdDocumentRequestMetadata.issuedDate) &&
        Objects.equals(this.validUntil, applicantAddIdDocumentRequestMetadata.validUntil) &&
        Objects.equals(this.number, applicantAddIdDocumentRequestMetadata.number) &&
        Objects.equals(this.dob, applicantAddIdDocumentRequestMetadata.dob) &&
        Objects.equals(this.placeOfBirth, applicantAddIdDocumentRequestMetadata.placeOfBirth)&&
        Objects.equals(this.additionalProperties, applicantAddIdDocumentRequestMetadata.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idDocType, idDocSubType, country, firstName, middleName, lastName, issuedDate, validUntil, number, dob, placeOfBirth, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantAddIdDocumentRequestMetadata {\n");
    sb.append("    idDocType: ").append(toIndentedString(idDocType)).append("\n");
    sb.append("    idDocSubType: ").append(toIndentedString(idDocSubType)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    issuedDate: ").append(toIndentedString(issuedDate)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    placeOfBirth: ").append(toIndentedString(placeOfBirth)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idDocType");
    openapiFields.add("idDocSubType");
    openapiFields.add("country");
    openapiFields.add("firstName");
    openapiFields.add("middleName");
    openapiFields.add("lastName");
    openapiFields.add("issuedDate");
    openapiFields.add("validUntil");
    openapiFields.add("number");
    openapiFields.add("dob");
    openapiFields.add("placeOfBirth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("idDocType");
    openapiRequiredFields.add("country");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantAddIdDocumentRequestMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantAddIdDocumentRequestMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantAddIdDocumentRequestMetadata is not found in the empty JSON string", ApplicantAddIdDocumentRequestMetadata.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicantAddIdDocumentRequestMetadata.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("idDocType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idDocType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idDocType").toString()));
      }
      if ((jsonObj.get("idDocSubType") != null && !jsonObj.get("idDocSubType").isJsonNull()) && !jsonObj.get("idDocSubType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idDocSubType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idDocSubType").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("issuedDate") != null && !jsonObj.get("issuedDate").isJsonNull()) && !jsonObj.get("issuedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuedDate").toString()));
      }
      if ((jsonObj.get("validUntil") != null && !jsonObj.get("validUntil").isJsonNull()) && !jsonObj.get("validUntil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validUntil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validUntil").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) && !jsonObj.get("dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dob").toString()));
      }
      if ((jsonObj.get("placeOfBirth") != null && !jsonObj.get("placeOfBirth").isJsonNull()) && !jsonObj.get("placeOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeOfBirth").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantAddIdDocumentRequestMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantAddIdDocumentRequestMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantAddIdDocumentRequestMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantAddIdDocumentRequestMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantAddIdDocumentRequestMetadata>() {
           @Override
           public void write(JsonWriter out, ApplicantAddIdDocumentRequestMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantAddIdDocumentRequestMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantAddIdDocumentRequestMetadata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantAddIdDocumentRequestMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantAddIdDocumentRequestMetadata
  * @throws IOException if the JSON string is invalid with respect to ApplicantAddIdDocumentRequestMetadata
  */
  public static ApplicantAddIdDocumentRequestMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantAddIdDocumentRequestMetadata.class);
  }

 /**
  * Convert an instance of ApplicantAddIdDocumentRequestMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

