/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApplicantAddBeneficiaryRequestApplicant;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicantAddBeneficiaryRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantAddBeneficiaryRequest {
  public static final String SERIALIZED_NAME_APPLICANT = "applicant";
  @SerializedName(SERIALIZED_NAME_APPLICANT)
  private ApplicantAddBeneficiaryRequestApplicant applicant;

  public static final String SERIALIZED_NAME_APPLICANT_ID = "applicantId";
  @SerializedName(SERIALIZED_NAME_APPLICANT_ID)
  private String applicantId;

  public static final String SERIALIZED_NAME_POSITIONS = "positions";
  @SerializedName(SERIALIZED_NAME_POSITIONS)
  private List<String> positions = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ApplicantAddBeneficiaryRequest() {
  }

  public ApplicantAddBeneficiaryRequest applicant(ApplicantAddBeneficiaryRequestApplicant applicant) {
    
    
    
    
    this.applicant = applicant;
    return this;
  }

   /**
   * Get applicant
   * @return applicant
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ApplicantAddBeneficiaryRequestApplicant getApplicant() {
    return applicant;
  }


  public void setApplicant(ApplicantAddBeneficiaryRequestApplicant applicant) {
    
    
    
    this.applicant = applicant;
  }


  public ApplicantAddBeneficiaryRequest applicantId(String applicantId) {
    
    
    
    
    this.applicantId = applicantId;
    return this;
  }

   /**
   * Beneficiary applicant identified.
   * @return applicantId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Beneficiary applicant identified.")

  public String getApplicantId() {
    return applicantId;
  }


  public void setApplicantId(String applicantId) {
    
    
    
    this.applicantId = applicantId;
  }


  public ApplicantAddBeneficiaryRequest positions(List<String> positions) {
    
    
    
    
    this.positions = positions;
    return this;
  }

  public ApplicantAddBeneficiaryRequest addPositionsItem(String positionsItem) {
    if (this.positions == null) {
      this.positions = new ArrayList<>();
    }
    this.positions.add(positionsItem);
    return this;
  }

   /**
   * The list of positions in the company (&#x60;[\&quot;director\&quot;, \&quot;shareholder\&quot;, \&quot;other\&quot;]&#x60;).
   * @return positions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of positions in the company (`[\"director\", \"shareholder\", \"other\"]`).")

  public List<String> getPositions() {
    return positions;
  }


  public void setPositions(List<String> positions) {
    
    
    
    this.positions = positions;
  }


  public ApplicantAddBeneficiaryRequest type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of beneficiary: &#x60;ubo&#x60;, &#x60;shareholder&#x60;, &#x60;representative&#x60;.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Type of beneficiary: `ubo`, `shareholder`, `representative`.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantAddBeneficiaryRequest instance itself
   */
  public ApplicantAddBeneficiaryRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest = (ApplicantAddBeneficiaryRequest) o;
    return Objects.equals(this.applicant, applicantAddBeneficiaryRequest.applicant) &&
        Objects.equals(this.applicantId, applicantAddBeneficiaryRequest.applicantId) &&
        Objects.equals(this.positions, applicantAddBeneficiaryRequest.positions) &&
        Objects.equals(this.type, applicantAddBeneficiaryRequest.type)&&
        Objects.equals(this.additionalProperties, applicantAddBeneficiaryRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicant, applicantId, positions, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantAddBeneficiaryRequest {\n");
    sb.append("    applicant: ").append(toIndentedString(applicant)).append("\n");
    sb.append("    applicantId: ").append(toIndentedString(applicantId)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicant");
    openapiFields.add("applicantId");
    openapiFields.add("positions");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applicant");
    openapiRequiredFields.add("applicantId");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantAddBeneficiaryRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantAddBeneficiaryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantAddBeneficiaryRequest is not found in the empty JSON string", ApplicantAddBeneficiaryRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicantAddBeneficiaryRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `applicant`
      ApplicantAddBeneficiaryRequestApplicant.validateJsonObject(jsonObj.getAsJsonObject("applicant"));
      if (!jsonObj.get("applicantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicantId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("positions") != null && !jsonObj.get("positions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `positions` to be an array in the JSON string but got `%s`", jsonObj.get("positions").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantAddBeneficiaryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantAddBeneficiaryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantAddBeneficiaryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantAddBeneficiaryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantAddBeneficiaryRequest>() {
           @Override
           public void write(JsonWriter out, ApplicantAddBeneficiaryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantAddBeneficiaryRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantAddBeneficiaryRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantAddBeneficiaryRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantAddBeneficiaryRequest
  * @throws IOException if the JSON string is invalid with respect to ApplicantAddBeneficiaryRequest
  */
  public static ApplicantAddBeneficiaryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantAddBeneficiaryRequest.class);
  }

 /**
  * Convert an instance of ApplicantAddBeneficiaryRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

