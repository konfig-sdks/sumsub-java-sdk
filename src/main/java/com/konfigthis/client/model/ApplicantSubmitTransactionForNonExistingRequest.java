/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequestInfo;
import com.konfigthis.client.model.ApplicantSubmitTransactionForNonExistingRequestApplicant;
import com.konfigthis.client.model.ApplicantSubmitTransactionForNonExistingRequestCounterparty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicantSubmitTransactionForNonExistingRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantSubmitTransactionForNonExistingRequest {
  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private ApplicantSubmitTransactionDataRequestInfo info;

  public static final String SERIALIZED_NAME_TXN_ID = "txnId";
  @SerializedName(SERIALIZED_NAME_TXN_ID)
  private String txnId;

  public static final String SERIALIZED_NAME_TXN_DATE = "txnDate";
  @SerializedName(SERIALIZED_NAME_TXN_DATE)
  private LocalDate txnDate;

  public static final String SERIALIZED_NAME_PROPS = "props";
  @SerializedName(SERIALIZED_NAME_PROPS)
  private Object props;

  public static final String SERIALIZED_NAME_APPLICANT = "applicant";
  @SerializedName(SERIALIZED_NAME_APPLICANT)
  private ApplicantSubmitTransactionForNonExistingRequestApplicant applicant;

  public static final String SERIALIZED_NAME_COUNTERPARTY = "counterparty";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY)
  private ApplicantSubmitTransactionForNonExistingRequestCounterparty counterparty;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type = "finance";

  public static final String SERIALIZED_NAME_SOURCE_KEY = "sourceKey";
  @SerializedName(SERIALIZED_NAME_SOURCE_KEY)
  private String sourceKey;

  public ApplicantSubmitTransactionForNonExistingRequest() {
  }

  public ApplicantSubmitTransactionForNonExistingRequest info(ApplicantSubmitTransactionDataRequestInfo info) {
    
    
    
    
    this.info = info;
    return this;
  }

   /**
   * Get info
   * @return info
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ApplicantSubmitTransactionDataRequestInfo getInfo() {
    return info;
  }


  public void setInfo(ApplicantSubmitTransactionDataRequestInfo info) {
    
    
    
    this.info = info;
  }


  public ApplicantSubmitTransactionForNonExistingRequest txnId(String txnId) {
    
    
    
    
    this.txnId = txnId;
    return this;
  }

   /**
   * A unique transaction identification number.
   * @return txnId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique transaction identification number.")

  public String getTxnId() {
    return txnId;
  }


  public void setTxnId(String txnId) {
    
    
    
    this.txnId = txnId;
  }


  public ApplicantSubmitTransactionForNonExistingRequest txnDate(LocalDate txnDate) {
    
    
    
    
    this.txnDate = txnDate;
    return this;
  }

   /**
   * Date and time when the transaction was initiated (format &#x60;yyyy-MM-dd HH:mm:ss+XXXX&#x60;, e.g. 2022-11-24 23:37:02+0000).
   * @return txnDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when the transaction was initiated (format `yyyy-MM-dd HH:mm:ss+XXXX`, e.g. 2022-11-24 23:37:02+0000).")

  public LocalDate getTxnDate() {
    return txnDate;
  }


  public void setTxnDate(LocalDate txnDate) {
    
    
    
    this.txnDate = txnDate;
  }


  public ApplicantSubmitTransactionForNonExistingRequest props(Object props) {
    
    
    
    
    this.props = props;
    return this;
  }

   /**
   * Transaction properties. Map of strings (JSON) of custom keys and string values.
   * @return props
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction properties. Map of strings (JSON) of custom keys and string values.")

  public Object getProps() {
    return props;
  }


  public void setProps(Object props) {
    
    
    
    this.props = props;
  }


  public ApplicantSubmitTransactionForNonExistingRequest applicant(ApplicantSubmitTransactionForNonExistingRequestApplicant applicant) {
    
    
    
    
    this.applicant = applicant;
    return this;
  }

   /**
   * Get applicant
   * @return applicant
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ApplicantSubmitTransactionForNonExistingRequestApplicant getApplicant() {
    return applicant;
  }


  public void setApplicant(ApplicantSubmitTransactionForNonExistingRequestApplicant applicant) {
    
    
    
    this.applicant = applicant;
  }


  public ApplicantSubmitTransactionForNonExistingRequest counterparty(ApplicantSubmitTransactionForNonExistingRequestCounterparty counterparty) {
    
    
    
    
    this.counterparty = counterparty;
    return this;
  }

   /**
   * Get counterparty
   * @return counterparty
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ApplicantSubmitTransactionForNonExistingRequestCounterparty getCounterparty() {
    return counterparty;
  }


  public void setCounterparty(ApplicantSubmitTransactionForNonExistingRequestCounterparty counterparty) {
    
    
    
    this.counterparty = counterparty;
  }


  public ApplicantSubmitTransactionForNonExistingRequest type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * A transaction type. Expects values: &lt;/br&gt; &lt;ul&gt;   &lt;li&gt;&lt;code&gt;finance&lt;/code&gt;(default)&lt;/li&gt;   &lt;li&gt;&lt;code&gt;gamblingBet&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;gamblingLimitChange&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;gamblingBonusChange&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;kyc&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;travelRule&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;userPlatformEvent&lt;/code&gt;&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;login&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;signup&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;passwordChange&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;twoFaReset&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/ul&gt;
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "finance", value = "A transaction type. Expects values: </br> <ul>   <li><code>finance</code>(default)</li>   <li><code>gamblingBet</code></li>   <li><code>gamblingLimitChange</code></li>   <li><code>gamblingBonusChange</code></li>   <li><code>kyc</code></li>   <li><code>travelRule</code></li>   <li><code>userPlatformEvent</code></li>   <ul>     <li><code>login</code></li>     <li><code>signup</code></li>     <li><code>passwordChange</code></li>     <li><code>twoFaReset</code></li>   </ul> </ul>")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public ApplicantSubmitTransactionForNonExistingRequest sourceKey(String sourceKey) {
    
    
    
    
    this.sourceKey = sourceKey;
    return this;
  }

   /**
   * A source key indication to separate access to transactions.
   * @return sourceKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A source key indication to separate access to transactions.")

  public String getSourceKey() {
    return sourceKey;
  }


  public void setSourceKey(String sourceKey) {
    
    
    
    this.sourceKey = sourceKey;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantSubmitTransactionForNonExistingRequest instance itself
   */
  public ApplicantSubmitTransactionForNonExistingRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest = (ApplicantSubmitTransactionForNonExistingRequest) o;
    return Objects.equals(this.info, applicantSubmitTransactionForNonExistingRequest.info) &&
        Objects.equals(this.txnId, applicantSubmitTransactionForNonExistingRequest.txnId) &&
        Objects.equals(this.txnDate, applicantSubmitTransactionForNonExistingRequest.txnDate) &&
        Objects.equals(this.props, applicantSubmitTransactionForNonExistingRequest.props) &&
        Objects.equals(this.applicant, applicantSubmitTransactionForNonExistingRequest.applicant) &&
        Objects.equals(this.counterparty, applicantSubmitTransactionForNonExistingRequest.counterparty) &&
        Objects.equals(this.type, applicantSubmitTransactionForNonExistingRequest.type) &&
        Objects.equals(this.sourceKey, applicantSubmitTransactionForNonExistingRequest.sourceKey)&&
        Objects.equals(this.additionalProperties, applicantSubmitTransactionForNonExistingRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(info, txnId, txnDate, props, applicant, counterparty, type, sourceKey, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantSubmitTransactionForNonExistingRequest {\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    txnId: ").append(toIndentedString(txnId)).append("\n");
    sb.append("    txnDate: ").append(toIndentedString(txnDate)).append("\n");
    sb.append("    props: ").append(toIndentedString(props)).append("\n");
    sb.append("    applicant: ").append(toIndentedString(applicant)).append("\n");
    sb.append("    counterparty: ").append(toIndentedString(counterparty)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sourceKey: ").append(toIndentedString(sourceKey)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("info");
    openapiFields.add("txnId");
    openapiFields.add("txnDate");
    openapiFields.add("props");
    openapiFields.add("applicant");
    openapiFields.add("counterparty");
    openapiFields.add("type");
    openapiFields.add("sourceKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("info");
    openapiRequiredFields.add("txnId");
    openapiRequiredFields.add("applicant");
    openapiRequiredFields.add("counterparty");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantSubmitTransactionForNonExistingRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantSubmitTransactionForNonExistingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantSubmitTransactionForNonExistingRequest is not found in the empty JSON string", ApplicantSubmitTransactionForNonExistingRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicantSubmitTransactionForNonExistingRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `info`
      ApplicantSubmitTransactionDataRequestInfo.validateJsonObject(jsonObj.getAsJsonObject("info"));
      if (!jsonObj.get("txnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txnId").toString()));
      }
      // validate the required field `applicant`
      ApplicantSubmitTransactionForNonExistingRequestApplicant.validateJsonObject(jsonObj.getAsJsonObject("applicant"));
      // validate the required field `counterparty`
      ApplicantSubmitTransactionForNonExistingRequestCounterparty.validateJsonObject(jsonObj.getAsJsonObject("counterparty"));
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("sourceKey") != null && !jsonObj.get("sourceKey").isJsonNull()) && !jsonObj.get("sourceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantSubmitTransactionForNonExistingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantSubmitTransactionForNonExistingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantSubmitTransactionForNonExistingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantSubmitTransactionForNonExistingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantSubmitTransactionForNonExistingRequest>() {
           @Override
           public void write(JsonWriter out, ApplicantSubmitTransactionForNonExistingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantSubmitTransactionForNonExistingRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantSubmitTransactionForNonExistingRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantSubmitTransactionForNonExistingRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantSubmitTransactionForNonExistingRequest
  * @throws IOException if the JSON string is invalid with respect to ApplicantSubmitTransactionForNonExistingRequest
  */
  public static ApplicantSubmitTransactionForNonExistingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantSubmitTransactionForNonExistingRequest.class);
  }

 /**
  * Convert an instance of ApplicantSubmitTransactionForNonExistingRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

