/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequestApplicantDeviceAddress;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequestApplicantDeviceCoords;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Device information.
 */
@ApiModel(description = "Device information.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantSubmitTransactionDataRequestApplicantDevice {
  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_SESSION_AGE_MS = "sessionAgeMs";
  @SerializedName(SERIALIZED_NAME_SESSION_AGE_MS)
  private Long sessionAgeMs;

  public static final String SERIALIZED_NAME_ACCEPT_LANG = "acceptLang";
  @SerializedName(SERIALIZED_NAME_ACCEPT_LANG)
  private String acceptLang;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ApplicantSubmitTransactionDataRequestApplicantDeviceAddress address;

  public static final String SERIALIZED_NAME_COORDS = "coords";
  @SerializedName(SERIALIZED_NAME_COORDS)
  private ApplicantSubmitTransactionDataRequestApplicantDeviceCoords coords;

  public static final String SERIALIZED_NAME_IP_INFO = "ipInfo";
  @SerializedName(SERIALIZED_NAME_IP_INFO)
  private ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo ipInfo;

  public ApplicantSubmitTransactionDataRequestApplicantDevice() {
  }

  public ApplicantSubmitTransactionDataRequestApplicantDevice userAgent(String userAgent) {
    
    
    
    
    this.userAgent = userAgent;
    return this;
  }

   /**
   * Device user agent.
   * @return userAgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Device user agent.")

  public String getUserAgent() {
    return userAgent;
  }


  public void setUserAgent(String userAgent) {
    
    
    
    this.userAgent = userAgent;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDevice sessionId(String sessionId) {
    
    
    
    
    this.sessionId = sessionId;
    return this;
  }

   /**
   * Transaction session identifier.
   * @return sessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction session identifier.")

  public String getSessionId() {
    return sessionId;
  }


  public void setSessionId(String sessionId) {
    
    
    
    this.sessionId = sessionId;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDevice sessionAgeMs(Long sessionAgeMs) {
    
    
    
    
    this.sessionAgeMs = sessionAgeMs;
    return this;
  }

   /**
   * Session lifetime in milliseconds.
   * @return sessionAgeMs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Session lifetime in milliseconds.")

  public Long getSessionAgeMs() {
    return sessionAgeMs;
  }


  public void setSessionAgeMs(Long sessionAgeMs) {
    
    
    
    this.sessionAgeMs = sessionAgeMs;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDevice acceptLang(String acceptLang) {
    
    
    
    
    this.acceptLang = acceptLang;
    return this;
  }

   /**
   * From browser, e.g. &#x60;en&#x60;.
   * @return acceptLang
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "From browser, e.g. `en`.")

  public String getAcceptLang() {
    return acceptLang;
  }


  public void setAcceptLang(String acceptLang) {
    
    
    
    this.acceptLang = acceptLang;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDevice platform(String platform) {
    
    
    
    
    this.platform = platform;
    return this;
  }

   /**
   * Device platform, e.g. &#x60;Mobile Android&#x60;.
   * @return platform
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Device platform, e.g. `Mobile Android`.")

  public String getPlatform() {
    return platform;
  }


  public void setPlatform(String platform) {
    
    
    
    this.platform = platform;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDevice fingerprint(String fingerprint) {
    
    
    
    
    this.fingerprint = fingerprint;
    return this;
  }

   /**
   * Device fingerprint.
   * @return fingerprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Device fingerprint.")

  public String getFingerprint() {
    return fingerprint;
  }


  public void setFingerprint(String fingerprint) {
    
    
    
    this.fingerprint = fingerprint;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDevice address(ApplicantSubmitTransactionDataRequestApplicantDeviceAddress address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicantSubmitTransactionDataRequestApplicantDeviceAddress getAddress() {
    return address;
  }


  public void setAddress(ApplicantSubmitTransactionDataRequestApplicantDeviceAddress address) {
    
    
    
    this.address = address;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDevice coords(ApplicantSubmitTransactionDataRequestApplicantDeviceCoords coords) {
    
    
    
    
    this.coords = coords;
    return this;
  }

   /**
   * Get coords
   * @return coords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicantSubmitTransactionDataRequestApplicantDeviceCoords getCoords() {
    return coords;
  }


  public void setCoords(ApplicantSubmitTransactionDataRequestApplicantDeviceCoords coords) {
    
    
    
    this.coords = coords;
  }


  public ApplicantSubmitTransactionDataRequestApplicantDevice ipInfo(ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo ipInfo) {
    
    
    
    
    this.ipInfo = ipInfo;
    return this;
  }

   /**
   * Get ipInfo
   * @return ipInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo getIpInfo() {
    return ipInfo;
  }


  public void setIpInfo(ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo ipInfo) {
    
    
    
    this.ipInfo = ipInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantSubmitTransactionDataRequestApplicantDevice instance itself
   */
  public ApplicantSubmitTransactionDataRequestApplicantDevice putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantSubmitTransactionDataRequestApplicantDevice applicantSubmitTransactionDataRequestApplicantDevice = (ApplicantSubmitTransactionDataRequestApplicantDevice) o;
    return Objects.equals(this.userAgent, applicantSubmitTransactionDataRequestApplicantDevice.userAgent) &&
        Objects.equals(this.sessionId, applicantSubmitTransactionDataRequestApplicantDevice.sessionId) &&
        Objects.equals(this.sessionAgeMs, applicantSubmitTransactionDataRequestApplicantDevice.sessionAgeMs) &&
        Objects.equals(this.acceptLang, applicantSubmitTransactionDataRequestApplicantDevice.acceptLang) &&
        Objects.equals(this.platform, applicantSubmitTransactionDataRequestApplicantDevice.platform) &&
        Objects.equals(this.fingerprint, applicantSubmitTransactionDataRequestApplicantDevice.fingerprint) &&
        Objects.equals(this.address, applicantSubmitTransactionDataRequestApplicantDevice.address) &&
        Objects.equals(this.coords, applicantSubmitTransactionDataRequestApplicantDevice.coords) &&
        Objects.equals(this.ipInfo, applicantSubmitTransactionDataRequestApplicantDevice.ipInfo)&&
        Objects.equals(this.additionalProperties, applicantSubmitTransactionDataRequestApplicantDevice.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userAgent, sessionId, sessionAgeMs, acceptLang, platform, fingerprint, address, coords, ipInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantSubmitTransactionDataRequestApplicantDevice {\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    sessionAgeMs: ").append(toIndentedString(sessionAgeMs)).append("\n");
    sb.append("    acceptLang: ").append(toIndentedString(acceptLang)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    coords: ").append(toIndentedString(coords)).append("\n");
    sb.append("    ipInfo: ").append(toIndentedString(ipInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userAgent");
    openapiFields.add("sessionId");
    openapiFields.add("sessionAgeMs");
    openapiFields.add("acceptLang");
    openapiFields.add("platform");
    openapiFields.add("fingerprint");
    openapiFields.add("address");
    openapiFields.add("coords");
    openapiFields.add("ipInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantDevice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantSubmitTransactionDataRequestApplicantDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantSubmitTransactionDataRequestApplicantDevice is not found in the empty JSON string", ApplicantSubmitTransactionDataRequestApplicantDevice.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) && !jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if ((jsonObj.get("acceptLang") != null && !jsonObj.get("acceptLang").isJsonNull()) && !jsonObj.get("acceptLang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptLang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceptLang").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        ApplicantSubmitTransactionDataRequestApplicantDeviceAddress.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      // validate the optional field `coords`
      if (jsonObj.get("coords") != null && !jsonObj.get("coords").isJsonNull()) {
        ApplicantSubmitTransactionDataRequestApplicantDeviceCoords.validateJsonObject(jsonObj.getAsJsonObject("coords"));
      }
      // validate the optional field `ipInfo`
      if (jsonObj.get("ipInfo") != null && !jsonObj.get("ipInfo").isJsonNull()) {
        ApplicantSubmitTransactionDataRequestApplicantDeviceIpInfo.validateJsonObject(jsonObj.getAsJsonObject("ipInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantSubmitTransactionDataRequestApplicantDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantSubmitTransactionDataRequestApplicantDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantSubmitTransactionDataRequestApplicantDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantSubmitTransactionDataRequestApplicantDevice>() {
           @Override
           public void write(JsonWriter out, ApplicantSubmitTransactionDataRequestApplicantDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantSubmitTransactionDataRequestApplicantDevice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantSubmitTransactionDataRequestApplicantDevice instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantSubmitTransactionDataRequestApplicantDevice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantSubmitTransactionDataRequestApplicantDevice
  * @throws IOException if the JSON string is invalid with respect to ApplicantSubmitTransactionDataRequestApplicantDevice
  */
  public static ApplicantSubmitTransactionDataRequestApplicantDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantSubmitTransactionDataRequestApplicantDevice.class);
  }

 /**
  * Convert an instance of ApplicantSubmitTransactionDataRequestApplicantDevice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

