/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApplicantSandboxVerificationResponseRequest1
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicantSandboxVerificationResponseRequest1 {
  public static final String SERIALIZED_NAME_REVIEW_ANSWER = "reviewAnswer";
  @SerializedName(SERIALIZED_NAME_REVIEW_ANSWER)
  private String reviewAnswer;

  public static final String SERIALIZED_NAME_REJECT_LABELS = "rejectLabels";
  @SerializedName(SERIALIZED_NAME_REJECT_LABELS)
  private List<String> rejectLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEW_REJECT_TYPE = "reviewRejectType";
  @SerializedName(SERIALIZED_NAME_REVIEW_REJECT_TYPE)
  private String reviewRejectType;

  public static final String SERIALIZED_NAME_CLIENT_COMMENT = "clientComment";
  @SerializedName(SERIALIZED_NAME_CLIENT_COMMENT)
  private String clientComment;

  public static final String SERIALIZED_NAME_MODERATION_COMMENT = "moderationComment";
  @SerializedName(SERIALIZED_NAME_MODERATION_COMMENT)
  private String moderationComment;

  public ApplicantSandboxVerificationResponseRequest1() {
  }

  public ApplicantSandboxVerificationResponseRequest1 reviewAnswer(String reviewAnswer) {
    
    
    
    
    this.reviewAnswer = reviewAnswer;
    return this;
  }

   /**
   * A &#x60;GREEN&#x60; or &#x60;RED&#x60; label under which you want to simulate the response. For more information, see [this article](https://docs.sumsub.com/reference).
   * @return reviewAnswer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A `GREEN` or `RED` label under which you want to simulate the response. For more information, see [this article](https://docs.sumsub.com/reference).")

  public String getReviewAnswer() {
    return reviewAnswer;
  }


  public void setReviewAnswer(String reviewAnswer) {
    
    
    
    this.reviewAnswer = reviewAnswer;
  }


  public ApplicantSandboxVerificationResponseRequest1 rejectLabels(List<String> rejectLabels) {
    
    
    
    
    this.rejectLabels = rejectLabels;
    return this;
  }

  public ApplicantSandboxVerificationResponseRequest1 addRejectLabelsItem(String rejectLabelsItem) {
    this.rejectLabels.add(rejectLabelsItem);
    return this;
  }

   /**
   * An array of [rejection labels](/docs/receive-and-interpret-results-via-api#understand-rejection).
   * @return rejectLabels
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of [rejection labels](/docs/receive-and-interpret-results-via-api#understand-rejection).")

  public List<String> getRejectLabels() {
    return rejectLabels;
  }


  public void setRejectLabels(List<String> rejectLabels) {
    
    
    
    this.rejectLabels = rejectLabels;
  }


  public ApplicantSandboxVerificationResponseRequest1 reviewRejectType(String reviewRejectType) {
    
    
    
    
    this.reviewRejectType = reviewRejectType;
    return this;
  }

   /**
   * A &#x60;FINAL&#x60; or &#x60;RETRY&#x60; rejection type indicating whether a rejection should be final or temporary.
   * @return reviewRejectType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A `FINAL` or `RETRY` rejection type indicating whether a rejection should be final or temporary.")

  public String getReviewRejectType() {
    return reviewRejectType;
  }


  public void setReviewRejectType(String reviewRejectType) {
    
    
    
    this.reviewRejectType = reviewRejectType;
  }


  public ApplicantSandboxVerificationResponseRequest1 clientComment(String clientComment) {
    
    
    
    
    this.clientComment = clientComment;
    return this;
  }

   /**
   * A rejection comment that should not be available to your applicants.
   * @return clientComment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A rejection comment that should not be available to your applicants.")

  public String getClientComment() {
    return clientComment;
  }


  public void setClientComment(String clientComment) {
    
    
    
    this.clientComment = clientComment;
  }


  public ApplicantSandboxVerificationResponseRequest1 moderationComment(String moderationComment) {
    
    
    
    
    this.moderationComment = moderationComment;
    return this;
  }

   /**
   * A comment that supposed to be shown to the applicant, explaining the reason of rejection.
   * @return moderationComment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comment that supposed to be shown to the applicant, explaining the reason of rejection.")

  public String getModerationComment() {
    return moderationComment;
  }


  public void setModerationComment(String moderationComment) {
    
    
    
    this.moderationComment = moderationComment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicantSandboxVerificationResponseRequest1 instance itself
   */
  public ApplicantSandboxVerificationResponseRequest1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantSandboxVerificationResponseRequest1 applicantSandboxVerificationResponseRequest1 = (ApplicantSandboxVerificationResponseRequest1) o;
    return Objects.equals(this.reviewAnswer, applicantSandboxVerificationResponseRequest1.reviewAnswer) &&
        Objects.equals(this.rejectLabels, applicantSandboxVerificationResponseRequest1.rejectLabels) &&
        Objects.equals(this.reviewRejectType, applicantSandboxVerificationResponseRequest1.reviewRejectType) &&
        Objects.equals(this.clientComment, applicantSandboxVerificationResponseRequest1.clientComment) &&
        Objects.equals(this.moderationComment, applicantSandboxVerificationResponseRequest1.moderationComment)&&
        Objects.equals(this.additionalProperties, applicantSandboxVerificationResponseRequest1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reviewAnswer, rejectLabels, reviewRejectType, clientComment, moderationComment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantSandboxVerificationResponseRequest1 {\n");
    sb.append("    reviewAnswer: ").append(toIndentedString(reviewAnswer)).append("\n");
    sb.append("    rejectLabels: ").append(toIndentedString(rejectLabels)).append("\n");
    sb.append("    reviewRejectType: ").append(toIndentedString(reviewRejectType)).append("\n");
    sb.append("    clientComment: ").append(toIndentedString(clientComment)).append("\n");
    sb.append("    moderationComment: ").append(toIndentedString(moderationComment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reviewAnswer");
    openapiFields.add("rejectLabels");
    openapiFields.add("reviewRejectType");
    openapiFields.add("clientComment");
    openapiFields.add("moderationComment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reviewAnswer");
    openapiRequiredFields.add("rejectLabels");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicantSandboxVerificationResponseRequest1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicantSandboxVerificationResponseRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicantSandboxVerificationResponseRequest1 is not found in the empty JSON string", ApplicantSandboxVerificationResponseRequest1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicantSandboxVerificationResponseRequest1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("reviewAnswer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewAnswer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewAnswer").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("rejectLabels") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rejectLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectLabels` to be an array in the JSON string but got `%s`", jsonObj.get("rejectLabels").toString()));
      }
      if ((jsonObj.get("reviewRejectType") != null && !jsonObj.get("reviewRejectType").isJsonNull()) && !jsonObj.get("reviewRejectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewRejectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewRejectType").toString()));
      }
      if ((jsonObj.get("clientComment") != null && !jsonObj.get("clientComment").isJsonNull()) && !jsonObj.get("clientComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientComment").toString()));
      }
      if ((jsonObj.get("moderationComment") != null && !jsonObj.get("moderationComment").isJsonNull()) && !jsonObj.get("moderationComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moderationComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moderationComment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicantSandboxVerificationResponseRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicantSandboxVerificationResponseRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicantSandboxVerificationResponseRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicantSandboxVerificationResponseRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicantSandboxVerificationResponseRequest1>() {
           @Override
           public void write(JsonWriter out, ApplicantSandboxVerificationResponseRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicantSandboxVerificationResponseRequest1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicantSandboxVerificationResponseRequest1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicantSandboxVerificationResponseRequest1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicantSandboxVerificationResponseRequest1
  * @throws IOException if the JSON string is invalid with respect to ApplicantSandboxVerificationResponseRequest1
  */
  public static ApplicantSandboxVerificationResponseRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicantSandboxVerificationResponseRequest1.class);
  }

 /**
  * Convert an instance of ApplicantSandboxVerificationResponseRequest1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

