/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TagAddTransactionTagsRequest;
import com.konfigthis.client.model.TagAddTransactionTagsRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TagApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TagApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"X-App-Token\" is required but no API key was provided. Please set \"X-App-Token\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTransactionTagsCall(String id, TagAddTransactionTagsRequest tagAddTransactionTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagAddTransactionTagsRequest;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTransactionTagsValidateBeforeCall(String id, TagAddTransactionTagsRequest tagAddTransactionTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addTransactionTags(Async)");
        }

        return addTransactionTagsCall(id, tagAddTransactionTagsRequest, _callback);

    }


    private ApiResponse<Void> addTransactionTagsWithHttpInfo(String id, TagAddTransactionTagsRequest tagAddTransactionTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = addTransactionTagsValidateBeforeCall(id, tagAddTransactionTagsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addTransactionTagsAsync(String id, TagAddTransactionTagsRequest tagAddTransactionTagsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTransactionTagsValidateBeforeCall(id, tagAddTransactionTagsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddTransactionTagsRequestBuilder {
        private final String id;
        private List<String> RAW_BODY;

        private AddTransactionTagsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY Tags to add. Case-sensitive. (optional)
         * @return AddTransactionTagsRequestBuilder
         */
        public AddTransactionTagsRequestBuilder RAW_BODY(List<String> RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Build call for addTransactionTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TagAddTransactionTagsRequest tagAddTransactionTagsRequest = buildBodyParams();
            return addTransactionTagsCall(id, tagAddTransactionTagsRequest, _callback);
        }

        private TagAddTransactionTagsRequest buildBodyParams() {
            TagAddTransactionTagsRequest tagAddTransactionTagsRequest = new TagAddTransactionTagsRequest();
            tagAddTransactionTagsRequest.RAW_BODY(this.RAW_BODY);
            return tagAddTransactionTagsRequest;
        }

        /**
         * Execute addTransactionTags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TagAddTransactionTagsRequest tagAddTransactionTagsRequest = buildBodyParams();
            addTransactionTagsWithHttpInfo(id, tagAddTransactionTagsRequest);
        }

        /**
         * Execute addTransactionTags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TagAddTransactionTagsRequest tagAddTransactionTagsRequest = buildBodyParams();
            return addTransactionTagsWithHttpInfo(id, tagAddTransactionTagsRequest);
        }

        /**
         * Execute addTransactionTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TagAddTransactionTagsRequest tagAddTransactionTagsRequest = buildBodyParams();
            return addTransactionTagsAsync(id, tagAddTransactionTagsRequest, _callback);
        }
    }

    /**
     * Add tags
     * Adds tags to transactions.
     * @param id A unique transaction identifier. (required)
     * @return AddTransactionTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddTransactionTagsRequestBuilder addTransactionTags(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddTransactionTagsRequestBuilder(id);
    }
}
