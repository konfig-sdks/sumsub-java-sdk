/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TransactionApproveRejectRequest;
import com.konfigthis.client.model.TransactionApproveRejectRequest1;
import com.konfigthis.client.model.TransactionBulkImportRequest;
import com.konfigthis.client.model.TransactionBulkImportRequest1;
import com.konfigthis.client.model.TransactionBulkImportRequestData;
import com.konfigthis.client.model.TransactionRemoveTagsRequest;
import com.konfigthis.client.model.TransactionRemoveTagsRequest1;
import com.konfigthis.client.model.TransactionUpdateBlockchainInfoRequest;
import com.konfigthis.client.model.TransactionUpdateBlockchainInfoRequest1;
import com.konfigthis.client.model.TransactionUpdatePropertiesRequest;
import com.konfigthis.client.model.TransactionUpdatePropertiesRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransactionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"X-App-Token\" is required but no API key was provided. Please set \"X-App-Token\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveRejectCall(String id, TransactionApproveRejectRequest transactionApproveRejectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionApproveRejectRequest;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{id}/review/status/completed"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveRejectValidateBeforeCall(String id, TransactionApproveRejectRequest transactionApproveRejectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling approveReject(Async)");
        }

        return approveRejectCall(id, transactionApproveRejectRequest, _callback);

    }


    private ApiResponse<Void> approveRejectWithHttpInfo(String id, TransactionApproveRejectRequest transactionApproveRejectRequest) throws ApiException {
        okhttp3.Call localVarCall = approveRejectValidateBeforeCall(id, transactionApproveRejectRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call approveRejectAsync(String id, TransactionApproveRejectRequest transactionApproveRejectRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveRejectValidateBeforeCall(id, transactionApproveRejectRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ApproveRejectRequestBuilder {
        private final String id;
        private String reviewAnswer;

        private ApproveRejectRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set reviewAnswer
         * @param reviewAnswer Sets the review answer. Can be &#x60;GREEN&#x60; or &#x60;RED&#x60;. (optional)
         * @return ApproveRejectRequestBuilder
         */
        public ApproveRejectRequestBuilder reviewAnswer(String reviewAnswer) {
            this.reviewAnswer = reviewAnswer;
            return this;
        }
        
        /**
         * Build call for approveReject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionApproveRejectRequest transactionApproveRejectRequest = buildBodyParams();
            return approveRejectCall(id, transactionApproveRejectRequest, _callback);
        }

        private TransactionApproveRejectRequest buildBodyParams() {
            TransactionApproveRejectRequest transactionApproveRejectRequest = new TransactionApproveRejectRequest();
            transactionApproveRejectRequest.reviewAnswer(this.reviewAnswer);
            return transactionApproveRejectRequest;
        }

        /**
         * Execute approveReject request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TransactionApproveRejectRequest transactionApproveRejectRequest = buildBodyParams();
            approveRejectWithHttpInfo(id, transactionApproveRejectRequest);
        }

        /**
         * Execute approveReject request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TransactionApproveRejectRequest transactionApproveRejectRequest = buildBodyParams();
            return approveRejectWithHttpInfo(id, transactionApproveRejectRequest);
        }

        /**
         * Execute approveReject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TransactionApproveRejectRequest transactionApproveRejectRequest = buildBodyParams();
            return approveRejectAsync(id, transactionApproveRejectRequest, _callback);
        }
    }

    /**
     * Approve and reject transaction
     * Approves or rejects transactions.
     * @param id A unique transaction identification number. (required)
     * @return ApproveRejectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApproveRejectRequestBuilder approveReject(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ApproveRejectRequestBuilder(id);
    }
    private okhttp3.Call bulkImportCall(Boolean ignoreErrors, Boolean scoreSavedTxns, TransactionBulkImportRequest transactionBulkImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionBulkImportRequest;

        // create path and map variables
        String localVarPath = "/resources/kyt/misc/txns/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreErrors", ignoreErrors));
        }

        if (scoreSavedTxns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreSavedTxns", scoreSavedTxns));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkImportValidateBeforeCall(Boolean ignoreErrors, Boolean scoreSavedTxns, TransactionBulkImportRequest transactionBulkImportRequest, final ApiCallback _callback) throws ApiException {
        return bulkImportCall(ignoreErrors, scoreSavedTxns, transactionBulkImportRequest, _callback);

    }


    private ApiResponse<Void> bulkImportWithHttpInfo(Boolean ignoreErrors, Boolean scoreSavedTxns, TransactionBulkImportRequest transactionBulkImportRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkImportValidateBeforeCall(ignoreErrors, scoreSavedTxns, transactionBulkImportRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkImportAsync(Boolean ignoreErrors, Boolean scoreSavedTxns, TransactionBulkImportRequest transactionBulkImportRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkImportValidateBeforeCall(ignoreErrors, scoreSavedTxns, transactionBulkImportRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkImportRequestBuilder {
        private final String applicantId;
        private final TransactionBulkImportRequestData data;
        private Boolean ignoreErrors;
        private Boolean scoreSavedTxns;

        private BulkImportRequestBuilder(String applicantId, TransactionBulkImportRequestData data) {
            this.applicantId = applicantId;
            this.data = data;
        }

        /**
         * Set ignoreErrors
         * @param ignoreErrors &lt;ul&gt;&lt;li&gt;&lt;code&gt;true&lt;/code&gt; — all valid transactions will be created and returned, errors will be ignored during the processing and listed in the response.&lt;/li&gt;&lt;li&gt;&lt;code&gt;false&lt;/code&gt; (default) — valid transactions will be created up to the first detected error. The response will only contain the error on which the processing was interrupted.&lt;/li&gt;&lt;/ul&gt; (optional, default to false)
         * @return BulkImportRequestBuilder
         */
        public BulkImportRequestBuilder ignoreErrors(Boolean ignoreErrors) {
            this.ignoreErrors = ignoreErrors;
            return this;
        }
        
        /**
         * Set scoreSavedTxns
         * @param scoreSavedTxns Allows you to control whether scoring should be run on imported transactions or not:&lt;ul&gt;&lt;li&gt;&lt;code&gt;true&lt;/code&gt; (default) — start scoring after import.&lt;/li&gt;&lt;li&gt;&lt;code&gt;false&lt;/code&gt; — do not start scoring after import.&lt;/li&gt;&lt;/ul&gt; (optional, default to true)
         * @return BulkImportRequestBuilder
         */
        public BulkImportRequestBuilder scoreSavedTxns(Boolean scoreSavedTxns) {
            this.scoreSavedTxns = scoreSavedTxns;
            return this;
        }
        
        /**
         * Build call for bulkImport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionBulkImportRequest transactionBulkImportRequest = buildBodyParams();
            return bulkImportCall(ignoreErrors, scoreSavedTxns, transactionBulkImportRequest, _callback);
        }

        private TransactionBulkImportRequest buildBodyParams() {
            TransactionBulkImportRequest transactionBulkImportRequest = new TransactionBulkImportRequest();
            transactionBulkImportRequest.applicantId(this.applicantId);
            transactionBulkImportRequest.data(this.data);
            return transactionBulkImportRequest;
        }

        /**
         * Execute bulkImport request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TransactionBulkImportRequest transactionBulkImportRequest = buildBodyParams();
            bulkImportWithHttpInfo(ignoreErrors, scoreSavedTxns, transactionBulkImportRequest);
        }

        /**
         * Execute bulkImport request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TransactionBulkImportRequest transactionBulkImportRequest = buildBodyParams();
            return bulkImportWithHttpInfo(ignoreErrors, scoreSavedTxns, transactionBulkImportRequest);
        }

        /**
         * Execute bulkImport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TransactionBulkImportRequest transactionBulkImportRequest = buildBodyParams();
            return bulkImportAsync(ignoreErrors, scoreSavedTxns, transactionBulkImportRequest, _callback);
        }
    }

    /**
     * Bulk transaction import
     * Imports a list of transactions.
     * @return BulkImportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BulkImportRequestBuilder bulkImport(String applicantId, TransactionBulkImportRequestData data) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new BulkImportRequestBuilder(applicantId, data);
    }
    private okhttp3.Call confirmOwnershipCall(String txnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{txnId}/ownership/confirmed"
            .replace("{" + "txnId" + "}", localVarApiClient.escapeString(txnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmOwnershipValidateBeforeCall(String txnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txnId' is set
        if (txnId == null) {
            throw new ApiException("Missing the required parameter 'txnId' when calling confirmOwnership(Async)");
        }

        return confirmOwnershipCall(txnId, _callback);

    }


    private ApiResponse<Void> confirmOwnershipWithHttpInfo(String txnId) throws ApiException {
        okhttp3.Call localVarCall = confirmOwnershipValidateBeforeCall(txnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call confirmOwnershipAsync(String txnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmOwnershipValidateBeforeCall(txnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ConfirmOwnershipRequestBuilder {
        private final String txnId;

        private ConfirmOwnershipRequestBuilder(String txnId) {
            this.txnId = txnId;
        }

        /**
         * Build call for confirmOwnership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return confirmOwnershipCall(txnId, _callback);
        }


        /**
         * Execute confirmOwnership request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            confirmOwnershipWithHttpInfo(txnId);
        }

        /**
         * Execute confirmOwnership request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return confirmOwnershipWithHttpInfo(txnId);
        }

        /**
         * Execute confirmOwnership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return confirmOwnershipAsync(txnId, _callback);
        }
    }

    /**
     * Confirm transaction ownership
     * Confirms that the specified transaction belongs to your exchange (VASP).
     * @param txnId A unique transaction identifier. (required)
     * @return ConfirmOwnershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConfirmOwnershipRequestBuilder confirmOwnership(String txnId) throws IllegalArgumentException {
        if (txnId == null) throw new IllegalArgumentException("\"txnId\" is required but got null");
            

        return new ConfirmOwnershipRequestBuilder(txnId);
    }
    private okhttp3.Call getOneDataCall(String externalTxnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/-;data.txnId={externalTxnId}/one"
            .replace("{" + "externalTxnId" + "}", localVarApiClient.escapeString(externalTxnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneDataValidateBeforeCall(String externalTxnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalTxnId' is set
        if (externalTxnId == null) {
            throw new ApiException("Missing the required parameter 'externalTxnId' when calling getOneData(Async)");
        }

        return getOneDataCall(externalTxnId, _callback);

    }


    private ApiResponse<Void> getOneDataWithHttpInfo(String externalTxnId) throws ApiException {
        okhttp3.Call localVarCall = getOneDataValidateBeforeCall(externalTxnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getOneDataAsync(String externalTxnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneDataValidateBeforeCall(externalTxnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetOneDataRequestBuilder {
        private final String externalTxnId;

        private GetOneDataRequestBuilder(String externalTxnId) {
            this.externalTxnId = externalTxnId;
        }

        /**
         * Build call for getOneData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneDataCall(externalTxnId, _callback);
        }


        /**
         * Execute getOneData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getOneDataWithHttpInfo(externalTxnId);
        }

        /**
         * Execute getOneData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getOneDataWithHttpInfo(externalTxnId);
        }

        /**
         * Execute getOneData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getOneDataAsync(externalTxnId, _callback);
        }
    }

    /**
     * Get transaction information (externalTxnId)
     * Returns transaction information based on the provided &#x60;externalTxnId&#x60;.
     * @param externalTxnId A unique transaction identifier on your side. (required)
     * @return GetOneDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetOneDataRequestBuilder getOneData(String externalTxnId) throws IllegalArgumentException {
        if (externalTxnId == null) throw new IllegalArgumentException("\"externalTxnId\" is required but got null");
            

        return new GetOneDataRequestBuilder(externalTxnId);
    }
    private okhttp3.Call informationOneCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{id}/one"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call informationOneValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling informationOne(Async)");
        }

        return informationOneCall(id, _callback);

    }


    private ApiResponse<Void> informationOneWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = informationOneValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call informationOneAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = informationOneValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class InformationOneRequestBuilder {
        private final String id;

        private InformationOneRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for informationOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return informationOneCall(id, _callback);
        }


        /**
         * Execute informationOne request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            informationOneWithHttpInfo(id);
        }

        /**
         * Execute informationOne request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return informationOneWithHttpInfo(id);
        }

        /**
         * Execute informationOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return informationOneAsync(id, _callback);
        }
    }

    /**
     * Get transaction information
     * Returns transaction information.
     * @param id A unique transaction identifier. (required)
     * @return InformationOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InformationOneRequestBuilder informationOne(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new InformationOneRequestBuilder(id);
    }
    private okhttp3.Call listTagsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTags(Async)");
        }

        return listTagsCall(id, _callback);

    }


    private ApiResponse<Void> listTagsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listTagsValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listTagsAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListTagsRequestBuilder {
        private final String id;

        private ListTagsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTagsCall(id, _callback);
        }


        /**
         * Execute listTags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listTagsWithHttpInfo(id);
        }

        /**
         * Execute listTags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listTagsWithHttpInfo(id);
        }

        /**
         * Execute listTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listTagsAsync(id, _callback);
        }
    }

    /**
     * Get tags
     * Returns a list of transaction tags.
     * @param id A unique transaction identifier. (required)
     * @return ListTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsRequestBuilder listTags(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListTagsRequestBuilder(id);
    }
    private okhttp3.Call reScoreCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{id}/-/score"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reScoreValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reScore(Async)");
        }

        return reScoreCall(id, _callback);

    }


    private ApiResponse<Void> reScoreWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = reScoreValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call reScoreAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reScoreValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReScoreRequestBuilder {
        private final String id;

        private ReScoreRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for reScore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return reScoreCall(id, _callback);
        }


        /**
         * Execute reScore request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            reScoreWithHttpInfo(id);
        }

        /**
         * Execute reScore request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return reScoreWithHttpInfo(id);
        }

        /**
         * Execute reScore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return reScoreAsync(id, _callback);
        }
    }

    /**
     * Re-score transaction
     * Re-scores transactions.
     * @param id A unique transaction identification number. (required)
     * @return ReScoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ReScoreRequestBuilder reScore(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReScoreRequestBuilder(id);
    }
    private okhttp3.Call removeOwnershipCall(String txnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{txnId}/ownership/unconfirmed"
            .replace("{" + "txnId" + "}", localVarApiClient.escapeString(txnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOwnershipValidateBeforeCall(String txnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txnId' is set
        if (txnId == null) {
            throw new ApiException("Missing the required parameter 'txnId' when calling removeOwnership(Async)");
        }

        return removeOwnershipCall(txnId, _callback);

    }


    private ApiResponse<Void> removeOwnershipWithHttpInfo(String txnId) throws ApiException {
        okhttp3.Call localVarCall = removeOwnershipValidateBeforeCall(txnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeOwnershipAsync(String txnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOwnershipValidateBeforeCall(txnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveOwnershipRequestBuilder {
        private final String txnId;

        private RemoveOwnershipRequestBuilder(String txnId) {
            this.txnId = txnId;
        }

        /**
         * Build call for removeOwnership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeOwnershipCall(txnId, _callback);
        }


        /**
         * Execute removeOwnership request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeOwnershipWithHttpInfo(txnId);
        }

        /**
         * Execute removeOwnership request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeOwnershipWithHttpInfo(txnId);
        }

        /**
         * Execute removeOwnership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeOwnershipAsync(txnId, _callback);
        }
    }

    /**
     * Remove transaction ownership
     * Removes the ownership from a previously confirmed transaction.
     * @param txnId A unique transaction identifier. (required)
     * @return RemoveOwnershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveOwnershipRequestBuilder removeOwnership(String txnId) throws IllegalArgumentException {
        if (txnId == null) throw new IllegalArgumentException("\"txnId\" is required but got null");
            

        return new RemoveOwnershipRequestBuilder(txnId);
    }
    private okhttp3.Call removeTagsCall(String id, TransactionRemoveTagsRequest transactionRemoveTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionRemoveTagsRequest;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagsValidateBeforeCall(String id, TransactionRemoveTagsRequest transactionRemoveTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeTags(Async)");
        }

        return removeTagsCall(id, transactionRemoveTagsRequest, _callback);

    }


    private ApiResponse<Void> removeTagsWithHttpInfo(String id, TransactionRemoveTagsRequest transactionRemoveTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = removeTagsValidateBeforeCall(id, transactionRemoveTagsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTagsAsync(String id, TransactionRemoveTagsRequest transactionRemoveTagsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagsValidateBeforeCall(id, transactionRemoveTagsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTagsRequestBuilder {
        private final String id;
        private List<String> RAW_BODY;

        private RemoveTagsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY Tags to remove. Case-sensitive. (optional)
         * @return RemoveTagsRequestBuilder
         */
        public RemoveTagsRequestBuilder RAW_BODY(List<String> RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Build call for removeTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionRemoveTagsRequest transactionRemoveTagsRequest = buildBodyParams();
            return removeTagsCall(id, transactionRemoveTagsRequest, _callback);
        }

        private TransactionRemoveTagsRequest buildBodyParams() {
            TransactionRemoveTagsRequest transactionRemoveTagsRequest = new TransactionRemoveTagsRequest();
            transactionRemoveTagsRequest.RAW_BODY(this.RAW_BODY);
            return transactionRemoveTagsRequest;
        }

        /**
         * Execute removeTags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TransactionRemoveTagsRequest transactionRemoveTagsRequest = buildBodyParams();
            removeTagsWithHttpInfo(id, transactionRemoveTagsRequest);
        }

        /**
         * Execute removeTags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TransactionRemoveTagsRequest transactionRemoveTagsRequest = buildBodyParams();
            return removeTagsWithHttpInfo(id, transactionRemoveTagsRequest);
        }

        /**
         * Execute removeTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TransactionRemoveTagsRequest transactionRemoveTagsRequest = buildBodyParams();
            return removeTagsAsync(id, transactionRemoveTagsRequest, _callback);
        }
    }

    /**
     * Remove tags
     * Removes tags from transactions.
     * @param id A unique transaction identifier. (required)
     * @return RemoveTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTagsRequestBuilder removeTags(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveTagsRequestBuilder(id);
    }
    private okhttp3.Call updateBlockchainInfoCall(String txnId, TransactionUpdateBlockchainInfoRequest transactionUpdateBlockchainInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionUpdateBlockchainInfoRequest;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{txnId}/data/info"
            .replace("{" + "txnId" + "}", localVarApiClient.escapeString(txnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBlockchainInfoValidateBeforeCall(String txnId, TransactionUpdateBlockchainInfoRequest transactionUpdateBlockchainInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txnId' is set
        if (txnId == null) {
            throw new ApiException("Missing the required parameter 'txnId' when calling updateBlockchainInfo(Async)");
        }

        return updateBlockchainInfoCall(txnId, transactionUpdateBlockchainInfoRequest, _callback);

    }


    private ApiResponse<Object> updateBlockchainInfoWithHttpInfo(String txnId, TransactionUpdateBlockchainInfoRequest transactionUpdateBlockchainInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBlockchainInfoValidateBeforeCall(txnId, transactionUpdateBlockchainInfoRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBlockchainInfoAsync(String txnId, TransactionUpdateBlockchainInfoRequest transactionUpdateBlockchainInfoRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBlockchainInfoValidateBeforeCall(txnId, transactionUpdateBlockchainInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBlockchainInfoRequestBuilder {
        private final String txnId;
        private String fingerprint;

        private UpdateBlockchainInfoRequestBuilder(String txnId) {
            this.txnId = txnId;
        }

        /**
         * Set fingerprint
         * @param fingerprint A crypto transaction ID received from the blockchain. (optional)
         * @return UpdateBlockchainInfoRequestBuilder
         */
        public UpdateBlockchainInfoRequestBuilder fingerprint(String fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }
        
        /**
         * Build call for updateBlockchainInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionUpdateBlockchainInfoRequest transactionUpdateBlockchainInfoRequest = buildBodyParams();
            return updateBlockchainInfoCall(txnId, transactionUpdateBlockchainInfoRequest, _callback);
        }

        private TransactionUpdateBlockchainInfoRequest buildBodyParams() {
            TransactionUpdateBlockchainInfoRequest transactionUpdateBlockchainInfoRequest = new TransactionUpdateBlockchainInfoRequest();
            transactionUpdateBlockchainInfoRequest.fingerprint(this.fingerprint);
            return transactionUpdateBlockchainInfoRequest;
        }

        /**
         * Execute updateBlockchainInfo request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            TransactionUpdateBlockchainInfoRequest transactionUpdateBlockchainInfoRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateBlockchainInfoWithHttpInfo(txnId, transactionUpdateBlockchainInfoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBlockchainInfo request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            TransactionUpdateBlockchainInfoRequest transactionUpdateBlockchainInfoRequest = buildBodyParams();
            return updateBlockchainInfoWithHttpInfo(txnId, transactionUpdateBlockchainInfoRequest);
        }

        /**
         * Execute updateBlockchainInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            TransactionUpdateBlockchainInfoRequest transactionUpdateBlockchainInfoRequest = buildBodyParams();
            return updateBlockchainInfoAsync(txnId, transactionUpdateBlockchainInfoRequest, _callback);
        }
    }

    /**
     * Patch transaction with chain transaction ID
     * Updates information from the blockchain.
     * @param txnId A unique transaction identifier. (required)
     * @return UpdateBlockchainInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBlockchainInfoRequestBuilder updateBlockchainInfo(String txnId) throws IllegalArgumentException {
        if (txnId == null) throw new IllegalArgumentException("\"txnId\" is required but got null");
            

        return new UpdateBlockchainInfoRequestBuilder(txnId);
    }
    private okhttp3.Call updatePropertiesCall(String id, String unsetKeys, TransactionUpdatePropertiesRequest transactionUpdatePropertiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionUpdatePropertiesRequest;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{id}/props"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unsetKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unsetKeys", unsetKeys));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertiesValidateBeforeCall(String id, String unsetKeys, TransactionUpdatePropertiesRequest transactionUpdatePropertiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProperties(Async)");
        }

        return updatePropertiesCall(id, unsetKeys, transactionUpdatePropertiesRequest, _callback);

    }


    private ApiResponse<Void> updatePropertiesWithHttpInfo(String id, String unsetKeys, TransactionUpdatePropertiesRequest transactionUpdatePropertiesRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePropertiesValidateBeforeCall(id, unsetKeys, transactionUpdatePropertiesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePropertiesAsync(String id, String unsetKeys, TransactionUpdatePropertiesRequest transactionUpdatePropertiesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertiesValidateBeforeCall(id, unsetKeys, transactionUpdatePropertiesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePropertiesRequestBuilder {
        private final String customProperty;
        private final String id;
        private String unsetKeys;

        private UpdatePropertiesRequestBuilder(String customProperty, String id) {
            this.customProperty = customProperty;
            this.id = id;
        }

        /**
         * Set unsetKeys
         * @param unsetKeys A list of property names separated by commas that should be set to &#x60;null&#x60;. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder unsetKeys(String unsetKeys) {
            this.unsetKeys = unsetKeys;
            return this;
        }
        
        /**
         * Build call for updateProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransactionUpdatePropertiesRequest transactionUpdatePropertiesRequest = buildBodyParams();
            return updatePropertiesCall(id, unsetKeys, transactionUpdatePropertiesRequest, _callback);
        }

        private TransactionUpdatePropertiesRequest buildBodyParams() {
            TransactionUpdatePropertiesRequest transactionUpdatePropertiesRequest = new TransactionUpdatePropertiesRequest();
            transactionUpdatePropertiesRequest.customProperty(this.customProperty);
            return transactionUpdatePropertiesRequest;
        }

        /**
         * Execute updateProperties request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TransactionUpdatePropertiesRequest transactionUpdatePropertiesRequest = buildBodyParams();
            updatePropertiesWithHttpInfo(id, unsetKeys, transactionUpdatePropertiesRequest);
        }

        /**
         * Execute updateProperties request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TransactionUpdatePropertiesRequest transactionUpdatePropertiesRequest = buildBodyParams();
            return updatePropertiesWithHttpInfo(id, unsetKeys, transactionUpdatePropertiesRequest);
        }

        /**
         * Execute updateProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TransactionUpdatePropertiesRequest transactionUpdatePropertiesRequest = buildBodyParams();
            return updatePropertiesAsync(id, unsetKeys, transactionUpdatePropertiesRequest, _callback);
        }
    }

    /**
     * Change transaction properties
     * Updates transaction properties.
     * @param id A unique transaction identification number. (required)
     * @return UpdatePropertiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePropertiesRequestBuilder updateProperties(String customProperty, String id) throws IllegalArgumentException {
        if (customProperty == null) throw new IllegalArgumentException("\"customProperty\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdatePropertiesRequestBuilder(customProperty, id);
    }
}
