/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuditTrailEventApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditTrailEventApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuditTrailEventApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"X-App-Token\" is required but no API key was provided. Please set \"X-App-Token\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getEventsCall(String subjectName, String activity, String from, String to, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/auditTrailEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subjectName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subjectName", subjectName));
        }

        if (activity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity", activity));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsValidateBeforeCall(String subjectName, String activity, String from, String to, String limit, String offset, final ApiCallback _callback) throws ApiException {
        return getEventsCall(subjectName, activity, from, to, limit, offset, _callback);

    }


    private ApiResponse<Void> getEventsWithHttpInfo(String subjectName, String activity, String from, String to, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getEventsValidateBeforeCall(subjectName, activity, from, to, limit, offset, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEventsAsync(String subjectName, String activity, String from, String to, String limit, String offset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsValidateBeforeCall(subjectName, activity, from, to, limit, offset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEventsRequestBuilder {
        private String subjectName;
        private String activity;
        private String from;
        private String to;
        private String limit;
        private String offset;

        private GetEventsRequestBuilder() {
        }

        /**
         * Set subjectName
         * @param subjectName The name of the subject for which events are received. If the name is not specified, events are received for all subjects on the key. (optional)
         * @return GetEventsRequestBuilder
         */
        public GetEventsRequestBuilder subjectName(String subjectName) {
            this.subjectName = subjectName;
            return this;
        }
        
        /**
         * Set activity
         * @param activity If specified, only events with this activity will be in the response. (optional)
         * @return GetEventsRequestBuilder
         */
        public GetEventsRequestBuilder activity(String activity) {
            this.activity = activity;
            return this;
        }
        
        /**
         * Set from
         * @param from From the date/time events are received (format yyyy-MM-dd HH:mm:ss, e.g. 2022-10-01 12:05:00). If it&#39;s not specified - events are received from yesterday. (optional)
         * @return GetEventsRequestBuilder
         */
        public GetEventsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to To the date/time events are received (format yyyy-MM-dd HH:mm:ss, e.g. 2022-10-01 12:15:00). If it&#39;s not specified - events are received up to now. (optional)
         * @return GetEventsRequestBuilder
         */
        public GetEventsRequestBuilder to(String to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of events in one request. Can&#39;t be more than 20000. By default is 10. (optional, default to 10)
         * @return GetEventsRequestBuilder
         */
        public GetEventsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Allows to skip the offset events before beginning to return the events. By default is 0. (optional)
         * @return GetEventsRequestBuilder
         */
        public GetEventsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventsCall(subjectName, activity, from, to, limit, offset, _callback);
        }


        /**
         * Execute getEvents request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEventsWithHttpInfo(subjectName, activity, from, to, limit, offset);
        }

        /**
         * Execute getEvents request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEventsWithHttpInfo(subjectName, activity, from, to, limit, offset);
        }

        /**
         * Execute getEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEventsAsync(subjectName, activity, from, to, limit, offset, _callback);
        }
    }

    /**
     * Audit trail events
     * Returns audit trail events.
     * @return GetEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetEventsRequestBuilder getEvents() throws IllegalArgumentException {
        return new GetEventsRequestBuilder();
    }
}
