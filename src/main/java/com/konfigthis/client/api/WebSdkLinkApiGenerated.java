/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebSdkLinkApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebSdkLinkApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebSdkLinkApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"X-App-Token\" is required but no API key was provided. Please set \"X-App-Token\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateExternalCall(String levelName, Integer ttlInSecs, String externalUserId, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/sdkIntegrations/levels/{levelName}/websdkLink"
            .replace("{" + "levelName" + "}", localVarApiClient.escapeString(levelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ttlInSecs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttlInSecs", ttlInSecs));
        }

        if (externalUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalUserId", externalUserId));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateExternalValidateBeforeCall(String levelName, Integer ttlInSecs, String externalUserId, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'levelName' is set
        if (levelName == null) {
            throw new ApiException("Missing the required parameter 'levelName' when calling generateExternal(Async)");
        }

        return generateExternalCall(levelName, ttlInSecs, externalUserId, lang, _callback);

    }


    private ApiResponse<Void> generateExternalWithHttpInfo(String levelName, Integer ttlInSecs, String externalUserId, String lang) throws ApiException {
        okhttp3.Call localVarCall = generateExternalValidateBeforeCall(levelName, ttlInSecs, externalUserId, lang, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call generateExternalAsync(String levelName, Integer ttlInSecs, String externalUserId, String lang, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateExternalValidateBeforeCall(levelName, ttlInSecs, externalUserId, lang, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GenerateExternalRequestBuilder {
        private final String levelName;
        private Integer ttlInSecs;
        private String externalUserId;
        private String lang;

        private GenerateExternalRequestBuilder(String levelName) {
            this.levelName = levelName;
        }

        /**
         * Set ttlInSecs
         * @param ttlInSecs A lifespan of the link in seconds. (optional)
         * @return GenerateExternalRequestBuilder
         */
        public GenerateExternalRequestBuilder ttlInSecs(Integer ttlInSecs) {
            this.ttlInSecs = ttlInSecs;
            return this;
        }
        
        /**
         * Set externalUserId
         * @param externalUserId An external user ID on your side. (optional)
         * @return GenerateExternalRequestBuilder
         */
        public GenerateExternalRequestBuilder externalUserId(String externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }
        
        /**
         * Set lang
         * @param lang The language for WebSDK in ISO 639-1 format. (optional)
         * @return GenerateExternalRequestBuilder
         */
        public GenerateExternalRequestBuilder lang(String lang) {
            this.lang = lang;
            return this;
        }
        
        /**
         * Build call for generateExternal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateExternalCall(levelName, ttlInSecs, externalUserId, lang, _callback);
        }


        /**
         * Execute generateExternal request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            generateExternalWithHttpInfo(levelName, ttlInSecs, externalUserId, lang);
        }

        /**
         * Execute generateExternal request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return generateExternalWithHttpInfo(levelName, ttlInSecs, externalUserId, lang);
        }

        /**
         * Execute generateExternal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return generateExternalAsync(levelName, ttlInSecs, externalUserId, lang, _callback);
        }
    }

    /**
     * Generate external WebSDK link
     * Creates a link to WebSDK for the specified applicant.
     * @param levelName A [verification level](https://docs.sumsub.com/reference) name. Case-sensitive and has to be created in the same environment. If contains reserved characters (e.g., &#x60;@&#x60;, &#x60;+\&quot;&#x60;, white spaces as &#x60;%20&#x60;), it should be URL-encoded, otherwise you may get signature mismatch. (required)
     * @return GenerateExternalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GenerateExternalRequestBuilder generateExternal(String levelName) throws IllegalArgumentException {
        if (levelName == null) throw new IllegalArgumentException("\"levelName\" is required but got null");
            

        return new GenerateExternalRequestBuilder(levelName);
    }
}
