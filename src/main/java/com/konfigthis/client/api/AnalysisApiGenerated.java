/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AnalysisStandaloneCryptoInitiationRequest;
import com.konfigthis.client.model.AnalysisStandaloneCryptoInitiationRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AnalysisApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalysisApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AnalysisApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"X-App-Token\" is required but no API key was provided. Please set \"X-App-Token\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call standaloneCryptoInitiationCall(AnalysisStandaloneCryptoInitiationRequest analysisStandaloneCryptoInitiationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analysisStandaloneCryptoInitiationRequest;

        // create path and map variables
        String localVarPath = "/resources/standalone/crypto/cryptoSourceOfFunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call standaloneCryptoInitiationValidateBeforeCall(AnalysisStandaloneCryptoInitiationRequest analysisStandaloneCryptoInitiationRequest, final ApiCallback _callback) throws ApiException {
        return standaloneCryptoInitiationCall(analysisStandaloneCryptoInitiationRequest, _callback);

    }


    private ApiResponse<Void> standaloneCryptoInitiationWithHttpInfo(AnalysisStandaloneCryptoInitiationRequest analysisStandaloneCryptoInitiationRequest) throws ApiException {
        okhttp3.Call localVarCall = standaloneCryptoInitiationValidateBeforeCall(analysisStandaloneCryptoInitiationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call standaloneCryptoInitiationAsync(AnalysisStandaloneCryptoInitiationRequest analysisStandaloneCryptoInitiationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = standaloneCryptoInitiationValidateBeforeCall(analysisStandaloneCryptoInitiationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StandaloneCryptoInitiationRequestBuilder {
        private final String currency;
        private final String direction;
        private final String address;
        private String txn;
        private String tokenId;

        private StandaloneCryptoInitiationRequestBuilder(String currency, String direction, String address) {
            this.currency = currency;
            this.direction = direction;
            this.address = address;
        }

        /**
         * Set txn
         * @param txn Transaction hash. For &#x60;withdrawals&#x60;, &#x60;txn&#x60; should not be set at all or set to &#x60;null&#x60;. (optional)
         * @return StandaloneCryptoInitiationRequestBuilder
         */
        public StandaloneCryptoInitiationRequestBuilder txn(String txn) {
            this.txn = txn;
            return this;
        }
        
        /**
         * Set tokenId
         * @param tokenId Check the [Get available tokens](ref:get-available-tokens) method to get the full list of available currencies and token IDs. (optional)
         * @return StandaloneCryptoInitiationRequestBuilder
         */
        public StandaloneCryptoInitiationRequestBuilder tokenId(String tokenId) {
            this.tokenId = tokenId;
            return this;
        }
        
        /**
         * Build call for standaloneCryptoInitiation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AnalysisStandaloneCryptoInitiationRequest analysisStandaloneCryptoInitiationRequest = buildBodyParams();
            return standaloneCryptoInitiationCall(analysisStandaloneCryptoInitiationRequest, _callback);
        }

        private AnalysisStandaloneCryptoInitiationRequest buildBodyParams() {
            AnalysisStandaloneCryptoInitiationRequest analysisStandaloneCryptoInitiationRequest = new AnalysisStandaloneCryptoInitiationRequest();
            analysisStandaloneCryptoInitiationRequest.currency(this.currency);
            analysisStandaloneCryptoInitiationRequest.direction(this.direction);
            analysisStandaloneCryptoInitiationRequest.txn(this.txn);
            analysisStandaloneCryptoInitiationRequest.address(this.address);
            analysisStandaloneCryptoInitiationRequest.tokenId(this.tokenId);
            return analysisStandaloneCryptoInitiationRequest;
        }

        /**
         * Execute standaloneCryptoInitiation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AnalysisStandaloneCryptoInitiationRequest analysisStandaloneCryptoInitiationRequest = buildBodyParams();
            standaloneCryptoInitiationWithHttpInfo(analysisStandaloneCryptoInitiationRequest);
        }

        /**
         * Execute standaloneCryptoInitiation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AnalysisStandaloneCryptoInitiationRequest analysisStandaloneCryptoInitiationRequest = buildBodyParams();
            return standaloneCryptoInitiationWithHttpInfo(analysisStandaloneCryptoInitiationRequest);
        }

        /**
         * Execute standaloneCryptoInitiation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AnalysisStandaloneCryptoInitiationRequest analysisStandaloneCryptoInitiationRequest = buildBodyParams();
            return standaloneCryptoInitiationAsync(analysisStandaloneCryptoInitiationRequest, _callback);
        }
    }

    /**
     * Standalone crypto analysis
     * Initiates standalone crypto analysis.
     * @return StandaloneCryptoInitiationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StandaloneCryptoInitiationRequestBuilder standaloneCryptoInitiation(String currency, String direction, String address) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (direction == null) throw new IllegalArgumentException("\"direction\" is required but got null");
            

        if (address == null) throw new IllegalArgumentException("\"address\" is required but got null");
            

        return new StandaloneCryptoInitiationRequestBuilder(currency, direction, address);
    }
}
