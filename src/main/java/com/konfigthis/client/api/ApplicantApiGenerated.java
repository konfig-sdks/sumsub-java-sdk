/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApplicantAddBeneficiaryRequest;
import com.konfigthis.client.model.ApplicantAddBeneficiaryRequest1;
import com.konfigthis.client.model.ApplicantAddBeneficiaryRequestApplicant;
import com.konfigthis.client.model.ApplicantAddConsentToProfileRequest;
import com.konfigthis.client.model.ApplicantAddConsentToProfileRequest1;
import com.konfigthis.client.model.ApplicantAddConsentToProfileRequestRecordsInner;
import com.konfigthis.client.model.ApplicantAddCustomTagsRequest;
import com.konfigthis.client.model.ApplicantAddCustomTagsRequest1;
import com.konfigthis.client.model.ApplicantAddCustomTagsRequest2;
import com.konfigthis.client.model.ApplicantAddCustomTagsRequest3;
import com.konfigthis.client.model.ApplicantAddIdDocumentRequest;
import com.konfigthis.client.model.ApplicantAddIdDocumentRequest1;
import com.konfigthis.client.model.ApplicantAddIdDocumentRequestMetadata;
import com.konfigthis.client.model.ApplicantAddIdDocumentResponse;
import com.konfigthis.client.model.ApplicantAddImageToPaymentMethodRequest;
import com.konfigthis.client.model.ApplicantAddImageToPaymentMethodRequest1;
import com.konfigthis.client.model.ApplicantAddImageToPaymentMethodRequestMetadata;
import com.konfigthis.client.model.ApplicantAddPaymentMethodInformationRequest;
import com.konfigthis.client.model.ApplicantAddPaymentMethodInformationRequest1;
import com.konfigthis.client.model.ApplicantChangeCompanyDataRequest;
import com.konfigthis.client.model.ApplicantChangeCompanyDataRequest1;
import com.konfigthis.client.model.ApplicantChangeExtractedInfoRequest;
import com.konfigthis.client.model.ApplicantChangeExtractedInfoRequest1;
import com.konfigthis.client.model.ApplicantConfirmDataRequest;
import com.konfigthis.client.model.ApplicantConfirmDataRequest1;
import com.konfigthis.client.model.ApplicantConfirmDataRequestOauth;
import com.konfigthis.client.model.ApplicantConfirmDataRequestOtp;
import com.konfigthis.client.model.ApplicantCreateActionRequest;
import com.konfigthis.client.model.ApplicantCreateActionRequest1;
import com.konfigthis.client.model.ApplicantCreateActionRequestPaymentMethod;
import com.konfigthis.client.model.ApplicantCreateActionRequestPaymentMethodData;
import com.konfigthis.client.model.ApplicantCreateCryptoSourceOfFundsRequest;
import com.konfigthis.client.model.ApplicantCreateCryptoSourceOfFundsRequest1;
import com.konfigthis.client.model.ApplicantCreatePaymentSourceActionsRequest;
import com.konfigthis.client.model.ApplicantCreatePaymentSourceActionsRequest1;
import com.konfigthis.client.model.ApplicantCreatePaymentSourceActionsRequestPaymentSource;
import com.konfigthis.client.model.ApplicantCreatePaymentSourceActionsResponse;
import com.konfigthis.client.model.ApplicantEnrichTransactionWithTravelRuleDataRequest;
import com.konfigthis.client.model.ApplicantEnrichTransactionWithTravelRuleDataRequest1;
import com.konfigthis.client.model.ApplicantImportByArchiveRequest;
import com.konfigthis.client.model.ApplicantImportByArchiveRequest1;
import com.konfigthis.client.model.ApplicantImportCompletedRequest;
import com.konfigthis.client.model.ApplicantImportCompletedRequest1;
import com.konfigthis.client.model.ApplicantImportCompletedRequestInfo;
import com.konfigthis.client.model.ApplicantImportCompletedRequestReview;
import com.konfigthis.client.model.ApplicantRemoveCustomTagsRequest;
import com.konfigthis.client.model.ApplicantRemoveCustomTagsRequest1;
import com.konfigthis.client.model.ApplicantSandboxVerificationResponseRequest;
import com.konfigthis.client.model.ApplicantSandboxVerificationResponseRequest1;
import com.konfigthis.client.model.ApplicantSubmitDataNoDocVerificationRequest;
import com.konfigthis.client.model.ApplicantSubmitDataNoDocVerificationRequest1;
import com.konfigthis.client.model.ApplicantSubmitDataNoDocVerificationRequestInfo;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequest;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequest1;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequestApplicant;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequestCounterparty;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequestInfo;
import com.konfigthis.client.model.ApplicantSubmitTransactionDataRequestProps;
import com.konfigthis.client.model.ApplicantSubmitTransactionForNonExistingRequest;
import com.konfigthis.client.model.ApplicantSubmitTransactionForNonExistingRequest1;
import com.konfigthis.client.model.ApplicantSubmitTransactionForNonExistingRequestApplicant;
import com.konfigthis.client.model.ApplicantSubmitTransactionForNonExistingRequestCounterparty;
import com.konfigthis.client.model.ApplicantUpdateFixedInfoRequest;
import com.konfigthis.client.model.ApplicantUpdateFixedInfoRequest1;
import com.konfigthis.client.model.ApplicantUpdateTopLevelInfoRequest;
import com.konfigthis.client.model.ApplicantUpdateTopLevelInfoRequest1;
import java.io.File;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicantApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicantApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicantApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"X-App-Token\" is required but no API key was provided. Please set \"X-App-Token\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addBeneficiaryCall(String applicantId, ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantAddBeneficiaryRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/info/companyInfo/beneficiaries"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBeneficiaryValidateBeforeCall(String applicantId, ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling addBeneficiary(Async)");
        }

        return addBeneficiaryCall(applicantId, applicantAddBeneficiaryRequest, _callback);

    }


    private ApiResponse<Void> addBeneficiaryWithHttpInfo(String applicantId, ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest) throws ApiException {
        okhttp3.Call localVarCall = addBeneficiaryValidateBeforeCall(applicantId, applicantAddBeneficiaryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addBeneficiaryAsync(String applicantId, ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBeneficiaryValidateBeforeCall(applicantId, applicantAddBeneficiaryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddBeneficiaryRequestBuilder {
        private final ApplicantAddBeneficiaryRequestApplicant applicant;
        private final String applicantId;
        private final String type;
        private final String applicantId;
        private List<String> positions;

        private AddBeneficiaryRequestBuilder(ApplicantAddBeneficiaryRequestApplicant applicant, String applicantId, String type, String applicantId) {
            this.applicant = applicant;
            this.applicantId = applicantId;
            this.type = type;
            this.applicantId = applicantId;
        }

        /**
         * Set positions
         * @param positions The list of positions in the company (&#x60;[\\\&quot;director\\\&quot;, \\\&quot;shareholder\\\&quot;, \\\&quot;other\\\&quot;]&#x60;). (optional)
         * @return AddBeneficiaryRequestBuilder
         */
        public AddBeneficiaryRequestBuilder positions(List<String> positions) {
            this.positions = positions;
            return this;
        }
        
        /**
         * Build call for addBeneficiary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest = buildBodyParams();
            return addBeneficiaryCall(applicantId, applicantAddBeneficiaryRequest, _callback);
        }

        private ApplicantAddBeneficiaryRequest buildBodyParams() {
            ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest = new ApplicantAddBeneficiaryRequest();
            applicantAddBeneficiaryRequest.applicant(this.applicant);
            applicantAddBeneficiaryRequest.applicantId(this.applicantId);
            applicantAddBeneficiaryRequest.positions(this.positions);
            applicantAddBeneficiaryRequest.type(this.type);
            return applicantAddBeneficiaryRequest;
        }

        /**
         * Execute addBeneficiary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest = buildBodyParams();
            addBeneficiaryWithHttpInfo(applicantId, applicantAddBeneficiaryRequest);
        }

        /**
         * Execute addBeneficiary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest = buildBodyParams();
            return addBeneficiaryWithHttpInfo(applicantId, applicantAddBeneficiaryRequest);
        }

        /**
         * Execute addBeneficiary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantAddBeneficiaryRequest applicantAddBeneficiaryRequest = buildBodyParams();
            return addBeneficiaryAsync(applicantId, applicantAddBeneficiaryRequest, _callback);
        }
    }

    /**
     * Add applicant as beneficiary
     * Adds an existing individual applicant as a beneficiary.
     * @param applicantId A unique company applicant identifier. (required)
     * @return AddBeneficiaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddBeneficiaryRequestBuilder addBeneficiary(ApplicantAddBeneficiaryRequestApplicant applicant, String applicantId, String type, String applicantId) throws IllegalArgumentException {
        if (applicant == null) throw new IllegalArgumentException("\"applicant\" is required but got null");
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new AddBeneficiaryRequestBuilder(applicant, applicantId, type, applicantId);
    }
    private okhttp3.Call addConsentToProfileCall(String applicantId, ApplicantAddConsentToProfileRequest applicantAddConsentToProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantAddConsentToProfileRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/agreement"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addConsentToProfileValidateBeforeCall(String applicantId, ApplicantAddConsentToProfileRequest applicantAddConsentToProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling addConsentToProfile(Async)");
        }

        return addConsentToProfileCall(applicantId, applicantAddConsentToProfileRequest, _callback);

    }


    private ApiResponse<Void> addConsentToProfileWithHttpInfo(String applicantId, ApplicantAddConsentToProfileRequest applicantAddConsentToProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = addConsentToProfileValidateBeforeCall(applicantId, applicantAddConsentToProfileRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addConsentToProfileAsync(String applicantId, ApplicantAddConsentToProfileRequest applicantAddConsentToProfileRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addConsentToProfileValidateBeforeCall(applicantId, applicantAddConsentToProfileRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddConsentToProfileRequestBuilder {
        private final List<ApplicantAddConsentToProfileRequestRecordsInner> records;
        private final String applicantId;
        private String acceptedAt;
        private String residenceCountry;

        private AddConsentToProfileRequestBuilder(List<ApplicantAddConsentToProfileRequestRecordsInner> records, String applicantId) {
            this.records = records;
            this.applicantId = applicantId;
        }

        /**
         * Set acceptedAt
         * @param acceptedAt Date and time a consent was accepted by the applicant. (optional)
         * @return AddConsentToProfileRequestBuilder
         */
        public AddConsentToProfileRequestBuilder acceptedAt(String acceptedAt) {
            this.acceptedAt = acceptedAt;
            return this;
        }
        
        /**
         * Set residenceCountry
         * @param residenceCountry An applicant country of residence. (optional)
         * @return AddConsentToProfileRequestBuilder
         */
        public AddConsentToProfileRequestBuilder residenceCountry(String residenceCountry) {
            this.residenceCountry = residenceCountry;
            return this;
        }
        
        /**
         * Build call for addConsentToProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantAddConsentToProfileRequest applicantAddConsentToProfileRequest = buildBodyParams();
            return addConsentToProfileCall(applicantId, applicantAddConsentToProfileRequest, _callback);
        }

        private ApplicantAddConsentToProfileRequest buildBodyParams() {
            ApplicantAddConsentToProfileRequest applicantAddConsentToProfileRequest = new ApplicantAddConsentToProfileRequest();
            applicantAddConsentToProfileRequest.records(this.records);
            applicantAddConsentToProfileRequest.acceptedAt(this.acceptedAt);
            applicantAddConsentToProfileRequest.residenceCountry(this.residenceCountry);
            return applicantAddConsentToProfileRequest;
        }

        /**
         * Execute addConsentToProfile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantAddConsentToProfileRequest applicantAddConsentToProfileRequest = buildBodyParams();
            addConsentToProfileWithHttpInfo(applicantId, applicantAddConsentToProfileRequest);
        }

        /**
         * Execute addConsentToProfile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantAddConsentToProfileRequest applicantAddConsentToProfileRequest = buildBodyParams();
            return addConsentToProfileWithHttpInfo(applicantId, applicantAddConsentToProfileRequest);
        }

        /**
         * Execute addConsentToProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantAddConsentToProfileRequest applicantAddConsentToProfileRequest = buildBodyParams();
            return addConsentToProfileAsync(applicantId, applicantAddConsentToProfileRequest, _callback);
        }
    }

    /**
     * Add applicant consent
     * Adds a consent to an applicant profile.
     * @param applicantId A unique identifier of an applicant profile to which a consent should be added. (required)
     * @return AddConsentToProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddConsentToProfileRequestBuilder addConsentToProfile(List<ApplicantAddConsentToProfileRequestRecordsInner> records, String applicantId) throws IllegalArgumentException {
        if (records == null) throw new IllegalArgumentException("\"records\" is required but got null");
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new AddConsentToProfileRequestBuilder(records, applicantId);
    }
    private okhttp3.Call addCustomTagsCall(String applicantId, ApplicantAddCustomTagsRequest applicantAddCustomTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantAddCustomTagsRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/tags/add"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomTagsValidateBeforeCall(String applicantId, ApplicantAddCustomTagsRequest applicantAddCustomTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling addCustomTags(Async)");
        }

        return addCustomTagsCall(applicantId, applicantAddCustomTagsRequest, _callback);

    }


    private ApiResponse<Void> addCustomTagsWithHttpInfo(String applicantId, ApplicantAddCustomTagsRequest applicantAddCustomTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = addCustomTagsValidateBeforeCall(applicantId, applicantAddCustomTagsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addCustomTagsAsync(String applicantId, ApplicantAddCustomTagsRequest applicantAddCustomTagsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomTagsValidateBeforeCall(applicantId, applicantAddCustomTagsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddCustomTagsRequestBuilder {
        private final String applicantId;
        private List<String> RAW_BODY;

        private AddCustomTagsRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY  (optional)
         * @return AddCustomTagsRequestBuilder
         */
        public AddCustomTagsRequestBuilder RAW_BODY(List<String> RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Build call for addCustomTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantAddCustomTagsRequest applicantAddCustomTagsRequest = buildBodyParams();
            return addCustomTagsCall(applicantId, applicantAddCustomTagsRequest, _callback);
        }

        private ApplicantAddCustomTagsRequest buildBodyParams() {
            ApplicantAddCustomTagsRequest applicantAddCustomTagsRequest = new ApplicantAddCustomTagsRequest();
            applicantAddCustomTagsRequest.RAW_BODY(this.RAW_BODY);
            return applicantAddCustomTagsRequest;
        }

        /**
         * Execute addCustomTags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantAddCustomTagsRequest applicantAddCustomTagsRequest = buildBodyParams();
            addCustomTagsWithHttpInfo(applicantId, applicantAddCustomTagsRequest);
        }

        /**
         * Execute addCustomTags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantAddCustomTagsRequest applicantAddCustomTagsRequest = buildBodyParams();
            return addCustomTagsWithHttpInfo(applicantId, applicantAddCustomTagsRequest);
        }

        /**
         * Execute addCustomTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantAddCustomTagsRequest applicantAddCustomTagsRequest = buildBodyParams();
            return addCustomTagsAsync(applicantId, applicantAddCustomTagsRequest, _callback);
        }
    }

    /**
     * Add custom applicant tags
     * Adds custom tags to applicant profiles.
     * @param applicantId A unique applicant identifier. (required)
     * @return AddCustomTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomTagsRequestBuilder addCustomTags(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new AddCustomTagsRequestBuilder(applicantId);
    }
    private okhttp3.Call addCustomTags_0Call(String applicantId, ApplicantAddCustomTagsRequest2 applicantAddCustomTagsRequest2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantAddCustomTagsRequest2;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/tags"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomTags_0ValidateBeforeCall(String applicantId, ApplicantAddCustomTagsRequest2 applicantAddCustomTagsRequest2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling addCustomTags_0(Async)");
        }

        return addCustomTags_0Call(applicantId, applicantAddCustomTagsRequest2, _callback);

    }


    private ApiResponse<Void> addCustomTags_0WithHttpInfo(String applicantId, ApplicantAddCustomTagsRequest2 applicantAddCustomTagsRequest2) throws ApiException {
        okhttp3.Call localVarCall = addCustomTags_0ValidateBeforeCall(applicantId, applicantAddCustomTagsRequest2, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addCustomTags_0Async(String applicantId, ApplicantAddCustomTagsRequest2 applicantAddCustomTagsRequest2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomTags_0ValidateBeforeCall(applicantId, applicantAddCustomTagsRequest2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddCustomTags0RequestBuilder {
        private final String applicantId;
        private List<String> RAW_BODY;

        private AddCustomTags0RequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY  (optional)
         * @return AddCustomTags0RequestBuilder
         */
        public AddCustomTags0RequestBuilder RAW_BODY(List<String> RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Build call for addCustomTags_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantAddCustomTagsRequest2 applicantAddCustomTagsRequest2 = buildBodyParams();
            return addCustomTags_0Call(applicantId, applicantAddCustomTagsRequest2, _callback);
        }

        private ApplicantAddCustomTagsRequest2 buildBodyParams() {
            ApplicantAddCustomTagsRequest2 applicantAddCustomTagsRequest2 = new ApplicantAddCustomTagsRequest2();
            applicantAddCustomTagsRequest2.RAW_BODY(this.RAW_BODY);
            return applicantAddCustomTagsRequest2;
        }

        /**
         * Execute addCustomTags_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantAddCustomTagsRequest2 applicantAddCustomTagsRequest2 = buildBodyParams();
            addCustomTags_0WithHttpInfo(applicantId, applicantAddCustomTagsRequest2);
        }

        /**
         * Execute addCustomTags_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantAddCustomTagsRequest2 applicantAddCustomTagsRequest2 = buildBodyParams();
            return addCustomTags_0WithHttpInfo(applicantId, applicantAddCustomTagsRequest2);
        }

        /**
         * Execute addCustomTags_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantAddCustomTagsRequest2 applicantAddCustomTagsRequest2 = buildBodyParams();
            return addCustomTags_0Async(applicantId, applicantAddCustomTagsRequest2, _callback);
        }
    }

    /**
     * Add and overwrite custom applicant tags
     * Adds and overwrites custom tags in applicant profiles.
     * @param applicantId A unique applicant identifier. (required)
     * @return AddCustomTags0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomTags0RequestBuilder addCustomTags_0(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new AddCustomTags0RequestBuilder(applicantId);
    }
    private okhttp3.Call addIdDocumentCall(Boolean xReturnDocWarnings, String applicantId, ApplicantAddIdDocumentRequest applicantAddIdDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantAddIdDocumentRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/info/idDoc"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xReturnDocWarnings != null) {
            localVarHeaderParams.put("X-Return-Doc-Warnings", localVarApiClient.parameterToString(xReturnDocWarnings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addIdDocumentValidateBeforeCall(Boolean xReturnDocWarnings, String applicantId, ApplicantAddIdDocumentRequest applicantAddIdDocumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xReturnDocWarnings' is set
        if (xReturnDocWarnings == null) {
            throw new ApiException("Missing the required parameter 'xReturnDocWarnings' when calling addIdDocument(Async)");
        }

        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling addIdDocument(Async)");
        }

        return addIdDocumentCall(xReturnDocWarnings, applicantId, applicantAddIdDocumentRequest, _callback);

    }


    private ApiResponse<ApplicantAddIdDocumentResponse> addIdDocumentWithHttpInfo(Boolean xReturnDocWarnings, String applicantId, ApplicantAddIdDocumentRequest applicantAddIdDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = addIdDocumentValidateBeforeCall(xReturnDocWarnings, applicantId, applicantAddIdDocumentRequest, null);
        Type localVarReturnType = new TypeToken<ApplicantAddIdDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addIdDocumentAsync(Boolean xReturnDocWarnings, String applicantId, ApplicantAddIdDocumentRequest applicantAddIdDocumentRequest, final ApiCallback<ApplicantAddIdDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addIdDocumentValidateBeforeCall(xReturnDocWarnings, applicantId, applicantAddIdDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicantAddIdDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddIdDocumentRequestBuilder {
        private final Boolean xReturnDocWarnings;
        private final String applicantId;
        private ApplicantAddIdDocumentRequestMetadata metadata;
        private File content;

        private AddIdDocumentRequestBuilder(Boolean xReturnDocWarnings, String applicantId) {
            this.xReturnDocWarnings = xReturnDocWarnings;
            this.applicantId = applicantId;
        }

        /**
         * Set metadata
         * @param metadata  (optional)
         * @return AddIdDocumentRequestBuilder
         */
        public AddIdDocumentRequestBuilder metadata(ApplicantAddIdDocumentRequestMetadata metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set content
         * @param content A photo of the document. (optional)
         * @return AddIdDocumentRequestBuilder
         */
        public AddIdDocumentRequestBuilder content(File content) {
            this.content = content;
            return this;
        }
        
        /**
         * Build call for addIdDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantAddIdDocumentRequest applicantAddIdDocumentRequest = buildBodyParams();
            return addIdDocumentCall(xReturnDocWarnings, applicantId, applicantAddIdDocumentRequest, _callback);
        }

        private ApplicantAddIdDocumentRequest buildBodyParams() {
            ApplicantAddIdDocumentRequest applicantAddIdDocumentRequest = new ApplicantAddIdDocumentRequest();
            applicantAddIdDocumentRequest.metadata(this.metadata);
            applicantAddIdDocumentRequest.content(this.content);
            return applicantAddIdDocumentRequest;
        }

        /**
         * Execute addIdDocument request
         * @return ApplicantAddIdDocumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApplicantAddIdDocumentResponse execute() throws ApiException {
            ApplicantAddIdDocumentRequest applicantAddIdDocumentRequest = buildBodyParams();
            ApiResponse<ApplicantAddIdDocumentResponse> localVarResp = addIdDocumentWithHttpInfo(xReturnDocWarnings, applicantId, applicantAddIdDocumentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addIdDocument request with HTTP info returned
         * @return ApiResponse&lt;ApplicantAddIdDocumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicantAddIdDocumentResponse> executeWithHttpInfo() throws ApiException {
            ApplicantAddIdDocumentRequest applicantAddIdDocumentRequest = buildBodyParams();
            return addIdDocumentWithHttpInfo(xReturnDocWarnings, applicantId, applicantAddIdDocumentRequest);
        }

        /**
         * Execute addIdDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicantAddIdDocumentResponse> _callback) throws ApiException {
            ApplicantAddIdDocumentRequest applicantAddIdDocumentRequest = buildBodyParams();
            return addIdDocumentAsync(xReturnDocWarnings, applicantId, applicantAddIdDocumentRequest, _callback);
        }
    }

    /**
     * Add ID document
     * Adds an identification document to be verified.
     * @param xReturnDocWarnings &#x60;true&#x60; / &#x60;false&#x60; (required)
     * @param applicantId A unique applicant identifier. (required)
     * @return AddIdDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddIdDocumentRequestBuilder addIdDocument(Boolean xReturnDocWarnings, String applicantId) throws IllegalArgumentException {
        if (xReturnDocWarnings == null) throw new IllegalArgumentException("\"xReturnDocWarnings\" is required but got null");
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new AddIdDocumentRequestBuilder(xReturnDocWarnings, applicantId);
    }
    private okhttp3.Call addImageToPaymentMethodCall(String actionId, ApplicantAddImageToPaymentMethodRequest applicantAddImageToPaymentMethodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantAddImageToPaymentMethodRequest;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/{actionId}/images"
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addImageToPaymentMethodValidateBeforeCall(String actionId, ApplicantAddImageToPaymentMethodRequest applicantAddImageToPaymentMethodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling addImageToPaymentMethod(Async)");
        }

        return addImageToPaymentMethodCall(actionId, applicantAddImageToPaymentMethodRequest, _callback);

    }


    private ApiResponse<Void> addImageToPaymentMethodWithHttpInfo(String actionId, ApplicantAddImageToPaymentMethodRequest applicantAddImageToPaymentMethodRequest) throws ApiException {
        okhttp3.Call localVarCall = addImageToPaymentMethodValidateBeforeCall(actionId, applicantAddImageToPaymentMethodRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addImageToPaymentMethodAsync(String actionId, ApplicantAddImageToPaymentMethodRequest applicantAddImageToPaymentMethodRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addImageToPaymentMethodValidateBeforeCall(actionId, applicantAddImageToPaymentMethodRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddImageToPaymentMethodRequestBuilder {
        private final File content;
        private final ApplicantAddImageToPaymentMethodRequestMetadata metadata;
        private final String actionId;

        private AddImageToPaymentMethodRequestBuilder(File content, ApplicantAddImageToPaymentMethodRequestMetadata metadata, String actionId) {
            this.content = content;
            this.metadata = metadata;
            this.actionId = actionId;
        }

        /**
         * Build call for addImageToPaymentMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantAddImageToPaymentMethodRequest applicantAddImageToPaymentMethodRequest = buildBodyParams();
            return addImageToPaymentMethodCall(actionId, applicantAddImageToPaymentMethodRequest, _callback);
        }

        private ApplicantAddImageToPaymentMethodRequest buildBodyParams() {
            ApplicantAddImageToPaymentMethodRequest applicantAddImageToPaymentMethodRequest = new ApplicantAddImageToPaymentMethodRequest();
            applicantAddImageToPaymentMethodRequest.content(this.content);
            applicantAddImageToPaymentMethodRequest.metadata(this.metadata);
            return applicantAddImageToPaymentMethodRequest;
        }

        /**
         * Execute addImageToPaymentMethod request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantAddImageToPaymentMethodRequest applicantAddImageToPaymentMethodRequest = buildBodyParams();
            addImageToPaymentMethodWithHttpInfo(actionId, applicantAddImageToPaymentMethodRequest);
        }

        /**
         * Execute addImageToPaymentMethod request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantAddImageToPaymentMethodRequest applicantAddImageToPaymentMethodRequest = buildBodyParams();
            return addImageToPaymentMethodWithHttpInfo(actionId, applicantAddImageToPaymentMethodRequest);
        }

        /**
         * Execute addImageToPaymentMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantAddImageToPaymentMethodRequest applicantAddImageToPaymentMethodRequest = buildBodyParams();
            return addImageToPaymentMethodAsync(actionId, applicantAddImageToPaymentMethodRequest, _callback);
        }
    }

    /**
     * Add image to payment method
     * Adds an image to the payment method.
     * @param actionId A unique applicant action identifier. (required)
     * @return AddImageToPaymentMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddImageToPaymentMethodRequestBuilder addImageToPaymentMethod(File content, ApplicantAddImageToPaymentMethodRequestMetadata metadata, String actionId) throws IllegalArgumentException {
        if (content == null) throw new IllegalArgumentException("\"content\" is required but got null");
        if (metadata == null) throw new IllegalArgumentException("\"metadata\" is required but got null");
        if (actionId == null) throw new IllegalArgumentException("\"actionId\" is required but got null");
            

        return new AddImageToPaymentMethodRequestBuilder(content, metadata, actionId);
    }
    private okhttp3.Call addPaymentMethodInformationCall(String actionId, ApplicantAddPaymentMethodInformationRequest applicantAddPaymentMethodInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantAddPaymentMethodInformationRequest;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/{actionId}/paymentMethod"
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPaymentMethodInformationValidateBeforeCall(String actionId, ApplicantAddPaymentMethodInformationRequest applicantAddPaymentMethodInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling addPaymentMethodInformation(Async)");
        }

        return addPaymentMethodInformationCall(actionId, applicantAddPaymentMethodInformationRequest, _callback);

    }


    private ApiResponse<Void> addPaymentMethodInformationWithHttpInfo(String actionId, ApplicantAddPaymentMethodInformationRequest applicantAddPaymentMethodInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = addPaymentMethodInformationValidateBeforeCall(actionId, applicantAddPaymentMethodInformationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addPaymentMethodInformationAsync(String actionId, ApplicantAddPaymentMethodInformationRequest applicantAddPaymentMethodInformationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPaymentMethodInformationValidateBeforeCall(actionId, applicantAddPaymentMethodInformationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddPaymentMethodInformationRequestBuilder {
        private final String type;
        private final String actionId;
        private String subType;
        private ApplicantCreateActionRequestPaymentMethodData data;

        private AddPaymentMethodInformationRequestBuilder(String type, String actionId) {
            this.type = type;
            this.actionId = actionId;
        }

        /**
         * Set subType
         * @param subType A payment subtype. For example, &#x60;VISA&#x60;, &#x60;MASTERCARD&#x60;, etc. (optional)
         * @return AddPaymentMethodInformationRequestBuilder
         */
        public AddPaymentMethodInformationRequestBuilder subType(String subType) {
            this.subType = subType;
            return this;
        }
        
        /**
         * Set data
         * @param data  (optional)
         * @return AddPaymentMethodInformationRequestBuilder
         */
        public AddPaymentMethodInformationRequestBuilder data(ApplicantCreateActionRequestPaymentMethodData data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for addPaymentMethodInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantAddPaymentMethodInformationRequest applicantAddPaymentMethodInformationRequest = buildBodyParams();
            return addPaymentMethodInformationCall(actionId, applicantAddPaymentMethodInformationRequest, _callback);
        }

        private ApplicantAddPaymentMethodInformationRequest buildBodyParams() {
            ApplicantAddPaymentMethodInformationRequest applicantAddPaymentMethodInformationRequest = new ApplicantAddPaymentMethodInformationRequest();
            applicantAddPaymentMethodInformationRequest.type(this.type);
            applicantAddPaymentMethodInformationRequest.subType(this.subType);
            applicantAddPaymentMethodInformationRequest.data(this.data);
            return applicantAddPaymentMethodInformationRequest;
        }

        /**
         * Execute addPaymentMethodInformation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantAddPaymentMethodInformationRequest applicantAddPaymentMethodInformationRequest = buildBodyParams();
            addPaymentMethodInformationWithHttpInfo(actionId, applicantAddPaymentMethodInformationRequest);
        }

        /**
         * Execute addPaymentMethodInformation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantAddPaymentMethodInformationRequest applicantAddPaymentMethodInformationRequest = buildBodyParams();
            return addPaymentMethodInformationWithHttpInfo(actionId, applicantAddPaymentMethodInformationRequest);
        }

        /**
         * Execute addPaymentMethodInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantAddPaymentMethodInformationRequest applicantAddPaymentMethodInformationRequest = buildBodyParams();
            return addPaymentMethodInformationAsync(actionId, applicantAddPaymentMethodInformationRequest, _callback);
        }
    }

    /**
     * Add payment method information
     * Adds additional information to the payment method.
     * @param actionId A unique applicant action identifier. (required)
     * @return AddPaymentMethodInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddPaymentMethodInformationRequestBuilder addPaymentMethodInformation(String type, String actionId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (actionId == null) throw new IllegalArgumentException("\"actionId\" is required but got null");
            

        return new AddPaymentMethodInformationRequestBuilder(type, actionId);
    }
    private okhttp3.Call addToBlocklistCall(String note, String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/blacklist?note={note}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (note != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("note", note));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToBlocklistValidateBeforeCall(String note, String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'note' is set
        if (note == null) {
            throw new ApiException("Missing the required parameter 'note' when calling addToBlocklist(Async)");
        }

        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling addToBlocklist(Async)");
        }

        return addToBlocklistCall(note, applicantId, _callback);

    }


    private ApiResponse<Void> addToBlocklistWithHttpInfo(String note, String applicantId) throws ApiException {
        okhttp3.Call localVarCall = addToBlocklistValidateBeforeCall(note, applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addToBlocklistAsync(String note, String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToBlocklistValidateBeforeCall(note, applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddToBlocklistRequestBuilder {
        private final String note;
        private final String applicantId;

        private AddToBlocklistRequestBuilder(String note, String applicantId) {
            this.note = note;
            this.applicantId = applicantId;
        }

        /**
         * Build call for addToBlocklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addToBlocklistCall(note, applicantId, _callback);
        }


        /**
         * Execute addToBlocklist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            addToBlocklistWithHttpInfo(note, applicantId);
        }

        /**
         * Execute addToBlocklist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return addToBlocklistWithHttpInfo(note, applicantId);
        }

        /**
         * Execute addToBlocklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return addToBlocklistAsync(note, applicantId, _callback);
        }
    }

    /**
     * Add applicant to blocklist
     * Add an applicant to blocklist.
     * @param note A note indicating the reason for blocklisting the applicant profile. (required)
     * @param applicantId A unique applicant identifier. (required)
     * @return AddToBlocklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddToBlocklistRequestBuilder addToBlocklist(String note, String applicantId) throws IllegalArgumentException {
        if (note == null) throw new IllegalArgumentException("\"note\" is required but got null");
            

        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new AddToBlocklistRequestBuilder(note, applicantId);
    }
    private okhttp3.Call changeCompanyDataCall(String applicantId, ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantChangeCompanyDataRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/info/companyInfo"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeCompanyDataValidateBeforeCall(String applicantId, ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling changeCompanyData(Async)");
        }

        return changeCompanyDataCall(applicantId, applicantChangeCompanyDataRequest, _callback);

    }


    private ApiResponse<Void> changeCompanyDataWithHttpInfo(String applicantId, ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest) throws ApiException {
        okhttp3.Call localVarCall = changeCompanyDataValidateBeforeCall(applicantId, applicantChangeCompanyDataRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call changeCompanyDataAsync(String applicantId, ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeCompanyDataValidateBeforeCall(applicantId, applicantChangeCompanyDataRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ChangeCompanyDataRequestBuilder {
        private final String companyName;
        private final String registrationNumber;
        private final String applicantId;
        private String country;
        private String legalAddress;
        private String incorporatedOn;
        private String type;
        private String email;
        private String controlScheme;
        private String phone;
        private String taxId;
        private String registrationLocation;
        private String website;
        private String postalAddress;
        private List<String> beneficiaries;
        private List<String> addresses;

        private ChangeCompanyDataRequestBuilder(String companyName, String registrationNumber, String applicantId) {
            this.companyName = companyName;
            this.registrationNumber = registrationNumber;
            this.applicantId = applicantId;
        }

        /**
         * Set country
         * @param country A three-letter country code (e.g. &#x60;DEU&#x60;). (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set legalAddress
         * @param legalAddress Legal name. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder legalAddress(String legalAddress) {
            this.legalAddress = legalAddress;
            return this;
        }
        
        /**
         * Set incorporatedOn
         * @param incorporatedOn Date of incorporation (format &#x60;YYYY-mm-dd&#x60;, e.g. 2001-09-25). (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder incorporatedOn(String incorporatedOn) {
            this.incorporatedOn = incorporatedOn;
            return this;
        }
        
        /**
         * Set type
         * @param type Type of entity. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set email
         * @param email Email address. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set controlScheme
         * @param controlScheme Description of the control scheme of the group of entities. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder controlScheme(String controlScheme) {
            this.controlScheme = controlScheme;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Phone number. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set taxId
         * @param taxId Taxpayer registration number/Code of taxpayer registration. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder taxId(String taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Set registrationLocation
         * @param registrationLocation Location of registration. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder registrationLocation(String registrationLocation) {
            this.registrationLocation = registrationLocation;
            return this;
        }
        
        /**
         * Set website
         * @param website Website&#39;s URL. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder website(String website) {
            this.website = website;
            return this;
        }
        
        /**
         * Set postalAddress
         * @param postalAddress Postal address. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder postalAddress(String postalAddress) {
            this.postalAddress = postalAddress;
            return this;
        }
        
        /**
         * Set beneficiaries
         * @param beneficiaries Contains applicantIds of beneficiaries and additional info like position and type. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder beneficiaries(List<String> beneficiaries) {
            this.beneficiaries = beneficiaries;
            return this;
        }
        
        /**
         * Set addresses
         * @param addresses List of addresses. (optional)
         * @return ChangeCompanyDataRequestBuilder
         */
        public ChangeCompanyDataRequestBuilder addresses(List<String> addresses) {
            this.addresses = addresses;
            return this;
        }
        
        /**
         * Build call for changeCompanyData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest = buildBodyParams();
            return changeCompanyDataCall(applicantId, applicantChangeCompanyDataRequest, _callback);
        }

        private ApplicantChangeCompanyDataRequest buildBodyParams() {
            ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest = new ApplicantChangeCompanyDataRequest();
            applicantChangeCompanyDataRequest.companyName(this.companyName);
            applicantChangeCompanyDataRequest.registrationNumber(this.registrationNumber);
            applicantChangeCompanyDataRequest.country(this.country);
            applicantChangeCompanyDataRequest.legalAddress(this.legalAddress);
            applicantChangeCompanyDataRequest.incorporatedOn(this.incorporatedOn);
            applicantChangeCompanyDataRequest.type(this.type);
            applicantChangeCompanyDataRequest.email(this.email);
            applicantChangeCompanyDataRequest.controlScheme(this.controlScheme);
            applicantChangeCompanyDataRequest.phone(this.phone);
            applicantChangeCompanyDataRequest.taxId(this.taxId);
            applicantChangeCompanyDataRequest.registrationLocation(this.registrationLocation);
            applicantChangeCompanyDataRequest.website(this.website);
            applicantChangeCompanyDataRequest.postalAddress(this.postalAddress);
            applicantChangeCompanyDataRequest.beneficiaries(this.beneficiaries);
            applicantChangeCompanyDataRequest.addresses(this.addresses);
            return applicantChangeCompanyDataRequest;
        }

        /**
         * Execute changeCompanyData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest = buildBodyParams();
            changeCompanyDataWithHttpInfo(applicantId, applicantChangeCompanyDataRequest);
        }

        /**
         * Execute changeCompanyData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest = buildBodyParams();
            return changeCompanyDataWithHttpInfo(applicantId, applicantChangeCompanyDataRequest);
        }

        /**
         * Execute changeCompanyData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantChangeCompanyDataRequest applicantChangeCompanyDataRequest = buildBodyParams();
            return changeCompanyDataAsync(applicantId, applicantChangeCompanyDataRequest, _callback);
        }
    }

    /**
     * Change company data
     * Changes company data.
     * @param applicantId A unique applicant identifier. (required)
     * @return ChangeCompanyDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ChangeCompanyDataRequestBuilder changeCompanyData(String companyName, String registrationNumber, String applicantId) throws IllegalArgumentException {
        if (companyName == null) throw new IllegalArgumentException("\"companyName\" is required but got null");
            

        if (registrationNumber == null) throw new IllegalArgumentException("\"registrationNumber\" is required but got null");
            

        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new ChangeCompanyDataRequestBuilder(companyName, registrationNumber, applicantId);
    }
    private okhttp3.Call changeExtractedInfoCall(String applicantId, ApplicantChangeExtractedInfoRequest applicantChangeExtractedInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantChangeExtractedInfoRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/info"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeExtractedInfoValidateBeforeCall(String applicantId, ApplicantChangeExtractedInfoRequest applicantChangeExtractedInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling changeExtractedInfo(Async)");
        }

        return changeExtractedInfoCall(applicantId, applicantChangeExtractedInfoRequest, _callback);

    }


    private ApiResponse<Void> changeExtractedInfoWithHttpInfo(String applicantId, ApplicantChangeExtractedInfoRequest applicantChangeExtractedInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = changeExtractedInfoValidateBeforeCall(applicantId, applicantChangeExtractedInfoRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call changeExtractedInfoAsync(String applicantId, ApplicantChangeExtractedInfoRequest applicantChangeExtractedInfoRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeExtractedInfoValidateBeforeCall(applicantId, applicantChangeExtractedInfoRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ChangeExtractedInfoRequestBuilder {
        private final String applicantId;
        private String firstName;
        private String lastName;
        private String middleName;
        private String legalName;
        private String gender;
        private String dob;
        private String placeOfBirth;
        private String countryOfBirth;
        private String stateOfBirth;
        private String country;
        private String nationality;
        private String addresses;
        private String tin;

        private ChangeExtractedInfoRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Set firstName
         * @param firstName The first name of the applicant. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name of the applicant. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName The middle name of the applicant. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set legalName
         * @param legalName Legal name. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder legalName(String legalName) {
            this.legalName = legalName;
            return this;
        }
        
        /**
         * Set gender
         * @param gender An applicant gender (&#x60;M&#x60; or &#x60;F&#x60;). (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set dob
         * @param dob Applicant date of birth (format &#x60;YYYY-mm-dd&#x60;, e.g. 2001-09-25). (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder dob(String dob) {
            this.dob = dob;
            return this;
        }
        
        /**
         * Set placeOfBirth
         * @param placeOfBirth The applicant birthplace. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder placeOfBirth(String placeOfBirth) {
            this.placeOfBirth = placeOfBirth;
            return this;
        }
        
        /**
         * Set countryOfBirth
         * @param countryOfBirth Applicant country of birth. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder countryOfBirth(String countryOfBirth) {
            this.countryOfBirth = countryOfBirth;
            return this;
        }
        
        /**
         * Set stateOfBirth
         * @param stateOfBirth Applicant state of birth. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder stateOfBirth(String stateOfBirth) {
            this.stateOfBirth = stateOfBirth;
            return this;
        }
        
        /**
         * Set country
         * @param country Alpha-3 country code (e.g. &#x60;DEU&#x60; or &#x60;GBR&#x60;). (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality Alpha-3 country code. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set addresses
         * @param addresses List of applicant addresses. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder addresses(String addresses) {
            this.addresses = addresses;
            return this;
        }
        
        /**
         * Set tin
         * @param tin Tax identification number. (optional)
         * @return ChangeExtractedInfoRequestBuilder
         */
        public ChangeExtractedInfoRequestBuilder tin(String tin) {
            this.tin = tin;
            return this;
        }
        
        /**
         * Build call for changeExtractedInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantChangeExtractedInfoRequest applicantChangeExtractedInfoRequest = buildBodyParams();
            return changeExtractedInfoCall(applicantId, applicantChangeExtractedInfoRequest, _callback);
        }

        private ApplicantChangeExtractedInfoRequest buildBodyParams() {
            ApplicantChangeExtractedInfoRequest applicantChangeExtractedInfoRequest = new ApplicantChangeExtractedInfoRequest();
            applicantChangeExtractedInfoRequest.firstName(this.firstName);
            applicantChangeExtractedInfoRequest.lastName(this.lastName);
            applicantChangeExtractedInfoRequest.middleName(this.middleName);
            applicantChangeExtractedInfoRequest.legalName(this.legalName);
            applicantChangeExtractedInfoRequest.gender(this.gender);
            applicantChangeExtractedInfoRequest.dob(this.dob);
            applicantChangeExtractedInfoRequest.placeOfBirth(this.placeOfBirth);
            applicantChangeExtractedInfoRequest.countryOfBirth(this.countryOfBirth);
            applicantChangeExtractedInfoRequest.stateOfBirth(this.stateOfBirth);
            applicantChangeExtractedInfoRequest.country(this.country);
            applicantChangeExtractedInfoRequest.nationality(this.nationality);
            applicantChangeExtractedInfoRequest.addresses(this.addresses);
            applicantChangeExtractedInfoRequest.tin(this.tin);
            return applicantChangeExtractedInfoRequest;
        }

        /**
         * Execute changeExtractedInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantChangeExtractedInfoRequest applicantChangeExtractedInfoRequest = buildBodyParams();
            changeExtractedInfoWithHttpInfo(applicantId, applicantChangeExtractedInfoRequest);
        }

        /**
         * Execute changeExtractedInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantChangeExtractedInfoRequest applicantChangeExtractedInfoRequest = buildBodyParams();
            return changeExtractedInfoWithHttpInfo(applicantId, applicantChangeExtractedInfoRequest);
        }

        /**
         * Execute changeExtractedInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantChangeExtractedInfoRequest applicantChangeExtractedInfoRequest = buildBodyParams();
            return changeExtractedInfoAsync(applicantId, applicantChangeExtractedInfoRequest, _callback);
        }
    }

    /**
     * Change information extracted by Sumsub
     * Changes extracted information.
     * @param applicantId A unique applicant identifier. (required)
     * @return ChangeExtractedInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ChangeExtractedInfoRequestBuilder changeExtractedInfo(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new ChangeExtractedInfoRequestBuilder(applicantId);
    }
    private okhttp3.Call changeRequiredDocumentSetCall(String name, String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/moveToLevel"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeRequiredDocumentSetValidateBeforeCall(String name, String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling changeRequiredDocumentSet(Async)");
        }

        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling changeRequiredDocumentSet(Async)");
        }

        return changeRequiredDocumentSetCall(name, applicantId, _callback);

    }


    private ApiResponse<Void> changeRequiredDocumentSetWithHttpInfo(String name, String applicantId) throws ApiException {
        okhttp3.Call localVarCall = changeRequiredDocumentSetValidateBeforeCall(name, applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call changeRequiredDocumentSetAsync(String name, String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeRequiredDocumentSetValidateBeforeCall(name, applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ChangeRequiredDocumentSetRequestBuilder {
        private final String name;
        private final String applicantId;

        private ChangeRequiredDocumentSetRequestBuilder(String name, String applicantId) {
            this.name = name;
            this.applicantId = applicantId;
        }

        /**
         * Build call for changeRequiredDocumentSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return changeRequiredDocumentSetCall(name, applicantId, _callback);
        }


        /**
         * Execute changeRequiredDocumentSet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            changeRequiredDocumentSetWithHttpInfo(name, applicantId);
        }

        /**
         * Execute changeRequiredDocumentSet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return changeRequiredDocumentSetWithHttpInfo(name, applicantId);
        }

        /**
         * Execute changeRequiredDocumentSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return changeRequiredDocumentSetAsync(name, applicantId, _callback);
        }
    }

    /**
     * Change required document set
     * Changes the list of required documents.
     * @param name A [verification level](https://docs.sumsub.com/reference) name. Case-sensitive and has to be created in the same environment. If contains reserved characters (e.g., &#x60;@&#x60;, &#x60;+\&quot;&#x60;, white spaces as &#x60;%20&#x60;), it should be URL-encoded, otherwise you may get signature mismatch. (required)
     * @param applicantId A unique applicant identifier. (required)
     * @return ChangeRequiredDocumentSetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ChangeRequiredDocumentSetRequestBuilder changeRequiredDocumentSet(String name, String applicantId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new ChangeRequiredDocumentSetRequestBuilder(name, applicantId);
    }
    private okhttp3.Call clarifyRejectionReasonCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/moderationStates/-;applicantId={applicantId}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clarifyRejectionReasonValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling clarifyRejectionReason(Async)");
        }

        return clarifyRejectionReasonCall(applicantId, _callback);

    }


    private ApiResponse<Void> clarifyRejectionReasonWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = clarifyRejectionReasonValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call clarifyRejectionReasonAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clarifyRejectionReasonValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ClarifyRejectionReasonRequestBuilder {
        private final String applicantId;

        private ClarifyRejectionReasonRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for clarifyRejectionReason
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return clarifyRejectionReasonCall(applicantId, _callback);
        }


        /**
         * Execute clarifyRejectionReason request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            clarifyRejectionReasonWithHttpInfo(applicantId);
        }

        /**
         * Execute clarifyRejectionReason request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return clarifyRejectionReasonWithHttpInfo(applicantId);
        }

        /**
         * Execute clarifyRejectionReason request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return clarifyRejectionReasonAsync(applicantId, _callback);
        }
    }

    /**
     * Clarify rejection reason
     * Returns rejection reason clarification.
     * @param applicantId A unique applicant identifier. (required)
     * @return ClarifyRejectionReasonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClarifyRejectionReasonRequestBuilder clarifyRejectionReason(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new ClarifyRejectionReasonRequestBuilder(applicantId);
    }
    private okhttp3.Call confirmDataCall(String applicantId, String confirmationId, ApplicantConfirmDataRequest applicantConfirmDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantConfirmDataRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/ekyc/confirm/{confirmationid}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()))
            .replace("{" + "confirmationId" + "}", localVarApiClient.escapeString(confirmationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmDataValidateBeforeCall(String applicantId, String confirmationId, ApplicantConfirmDataRequest applicantConfirmDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling confirmData(Async)");
        }

        // verify the required parameter 'confirmationId' is set
        if (confirmationId == null) {
            throw new ApiException("Missing the required parameter 'confirmationId' when calling confirmData(Async)");
        }

        return confirmDataCall(applicantId, confirmationId, applicantConfirmDataRequest, _callback);

    }


    private ApiResponse<Void> confirmDataWithHttpInfo(String applicantId, String confirmationId, ApplicantConfirmDataRequest applicantConfirmDataRequest) throws ApiException {
        okhttp3.Call localVarCall = confirmDataValidateBeforeCall(applicantId, confirmationId, applicantConfirmDataRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call confirmDataAsync(String applicantId, String confirmationId, ApplicantConfirmDataRequest applicantConfirmDataRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmDataValidateBeforeCall(applicantId, confirmationId, applicantConfirmDataRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ConfirmDataRequestBuilder {
        private final String applicantId;
        private final String confirmationId;
        private ApplicantConfirmDataRequestOtp otp;
        private ApplicantConfirmDataRequestOauth oauth;

        private ConfirmDataRequestBuilder(String applicantId, String confirmationId) {
            this.applicantId = applicantId;
            this.confirmationId = confirmationId;
        }

        /**
         * Set otp
         * @param otp  (optional)
         * @return ConfirmDataRequestBuilder
         */
        public ConfirmDataRequestBuilder otp(ApplicantConfirmDataRequestOtp otp) {
            this.otp = otp;
            return this;
        }
        
        /**
         * Set oauth
         * @param oauth  (optional)
         * @return ConfirmDataRequestBuilder
         */
        public ConfirmDataRequestBuilder oauth(ApplicantConfirmDataRequestOauth oauth) {
            this.oauth = oauth;
            return this;
        }
        
        /**
         * Build call for confirmData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantConfirmDataRequest applicantConfirmDataRequest = buildBodyParams();
            return confirmDataCall(applicantId, confirmationId, applicantConfirmDataRequest, _callback);
        }

        private ApplicantConfirmDataRequest buildBodyParams() {
            ApplicantConfirmDataRequest applicantConfirmDataRequest = new ApplicantConfirmDataRequest();
            applicantConfirmDataRequest.otp(this.otp);
            applicantConfirmDataRequest.oauth(this.oauth);
            return applicantConfirmDataRequest;
        }

        /**
         * Execute confirmData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantConfirmDataRequest applicantConfirmDataRequest = buildBodyParams();
            confirmDataWithHttpInfo(applicantId, confirmationId, applicantConfirmDataRequest);
        }

        /**
         * Execute confirmData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantConfirmDataRequest applicantConfirmDataRequest = buildBodyParams();
            return confirmDataWithHttpInfo(applicantId, confirmationId, applicantConfirmDataRequest);
        }

        /**
         * Execute confirmData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantConfirmDataRequest applicantConfirmDataRequest = buildBodyParams();
            return confirmDataAsync(applicantId, confirmationId, applicantConfirmDataRequest, _callback);
        }
    }

    /**
     * Confirm applicant data
     * Confirms applicant data.
     * @param applicantId A unique applicant identifier. (required)
     * @param confirmationId A confirmation identifier from the [submission](ref:submit-applicant-data) response. (required)
     * @return ConfirmDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConfirmDataRequestBuilder confirmData(String applicantId, String confirmationId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        if (confirmationId == null) throw new IllegalArgumentException("\"confirmationId\" is required but got null");
            

        return new ConfirmDataRequestBuilder(applicantId, confirmationId);
    }
    private okhttp3.Call createActionCall(String applicantId, String levelName, ApplicantCreateActionRequest applicantCreateActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantCreateActionRequest;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/-/forApplicant/{applicantId}?levelName={levelName}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (levelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("levelName", levelName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createActionValidateBeforeCall(String applicantId, String levelName, ApplicantCreateActionRequest applicantCreateActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling createAction(Async)");
        }

        // verify the required parameter 'levelName' is set
        if (levelName == null) {
            throw new ApiException("Missing the required parameter 'levelName' when calling createAction(Async)");
        }

        return createActionCall(applicantId, levelName, applicantCreateActionRequest, _callback);

    }


    private ApiResponse<Void> createActionWithHttpInfo(String applicantId, String levelName, ApplicantCreateActionRequest applicantCreateActionRequest) throws ApiException {
        okhttp3.Call localVarCall = createActionValidateBeforeCall(applicantId, levelName, applicantCreateActionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createActionAsync(String applicantId, String levelName, ApplicantCreateActionRequest applicantCreateActionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createActionValidateBeforeCall(applicantId, levelName, applicantCreateActionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateActionRequestBuilder {
        private final String externalActionId;
        private final String applicantId;
        private final String levelName;
        private ApplicantCreateActionRequestPaymentMethod paymentMethod;
        private String email;
        private String phone;

        private CreateActionRequestBuilder(String externalActionId, String applicantId, String levelName) {
            this.externalActionId = externalActionId;
            this.applicantId = applicantId;
            this.levelName = levelName;
        }

        /**
         * Set paymentMethod
         * @param paymentMethod  (optional)
         * @return CreateActionRequestBuilder
         */
        public CreateActionRequestBuilder paymentMethod(ApplicantCreateActionRequestPaymentMethod paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }
        
        /**
         * Set email
         * @param email Applicant email address. (optional)
         * @return CreateActionRequestBuilder
         */
        public CreateActionRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Applicant phone number. (optional)
         * @return CreateActionRequestBuilder
         */
        public CreateActionRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Build call for createAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantCreateActionRequest applicantCreateActionRequest = buildBodyParams();
            return createActionCall(applicantId, levelName, applicantCreateActionRequest, _callback);
        }

        private ApplicantCreateActionRequest buildBodyParams() {
            ApplicantCreateActionRequest applicantCreateActionRequest = new ApplicantCreateActionRequest();
            applicantCreateActionRequest.externalActionId(this.externalActionId);
            applicantCreateActionRequest.paymentMethod(this.paymentMethod);
            applicantCreateActionRequest.email(this.email);
            applicantCreateActionRequest.phone(this.phone);
            return applicantCreateActionRequest;
        }

        /**
         * Execute createAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantCreateActionRequest applicantCreateActionRequest = buildBodyParams();
            createActionWithHttpInfo(applicantId, levelName, applicantCreateActionRequest);
        }

        /**
         * Execute createAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantCreateActionRequest applicantCreateActionRequest = buildBodyParams();
            return createActionWithHttpInfo(applicantId, levelName, applicantCreateActionRequest);
        }

        /**
         * Execute createAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantCreateActionRequest applicantCreateActionRequest = buildBodyParams();
            return createActionAsync(applicantId, levelName, applicantCreateActionRequest, _callback);
        }
    }

    /**
     * Create applicant action
     * Creates an applicant action.
     * @param applicantId A unique aplicant identifier. (required)
     * @param levelName A name of the level configured in the dashboard. (required)
     * @return CreateActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateActionRequestBuilder createAction(String externalActionId, String applicantId, String levelName) throws IllegalArgumentException {
        if (externalActionId == null) throw new IllegalArgumentException("\"externalActionId\" is required but got null");
            

        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        if (levelName == null) throw new IllegalArgumentException("\"levelName\" is required but got null");
            

        return new CreateActionRequestBuilder(externalActionId, applicantId, levelName);
    }
    private okhttp3.Call createCryptoSourceOfFundsCall(String applicantId, ApplicantCreateCryptoSourceOfFundsRequest applicantCreateCryptoSourceOfFundsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantCreateCryptoSourceOfFundsRequest;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/-/forApplicant/{applicantId}/cryptoSourceOfFunds"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCryptoSourceOfFundsValidateBeforeCall(String applicantId, ApplicantCreateCryptoSourceOfFundsRequest applicantCreateCryptoSourceOfFundsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling createCryptoSourceOfFunds(Async)");
        }

        return createCryptoSourceOfFundsCall(applicantId, applicantCreateCryptoSourceOfFundsRequest, _callback);

    }


    private ApiResponse<Void> createCryptoSourceOfFundsWithHttpInfo(String applicantId, ApplicantCreateCryptoSourceOfFundsRequest applicantCreateCryptoSourceOfFundsRequest) throws ApiException {
        okhttp3.Call localVarCall = createCryptoSourceOfFundsValidateBeforeCall(applicantId, applicantCreateCryptoSourceOfFundsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createCryptoSourceOfFundsAsync(String applicantId, ApplicantCreateCryptoSourceOfFundsRequest applicantCreateCryptoSourceOfFundsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCryptoSourceOfFundsValidateBeforeCall(applicantId, applicantCreateCryptoSourceOfFundsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateCryptoSourceOfFundsRequestBuilder {
        private final String currency;
        private final String direction;
        private final String address;
        private final String applicantId;
        private String txn;
        private String tokenId;

        private CreateCryptoSourceOfFundsRequestBuilder(String currency, String direction, String address, String applicantId) {
            this.currency = currency;
            this.direction = direction;
            this.address = address;
            this.applicantId = applicantId;
        }

        /**
         * Set txn
         * @param txn Transaction hash. For &#x60;withdrawals&#x60;, &#x60;txn&#x60; should not be set at all or set to &#x60;null&#x60;. (optional)
         * @return CreateCryptoSourceOfFundsRequestBuilder
         */
        public CreateCryptoSourceOfFundsRequestBuilder txn(String txn) {
            this.txn = txn;
            return this;
        }
        
        /**
         * Set tokenId
         * @param tokenId Check the [Get available tokens](ref:get-available-tokens) method to get the full list of available currencies and token IDs. (optional)
         * @return CreateCryptoSourceOfFundsRequestBuilder
         */
        public CreateCryptoSourceOfFundsRequestBuilder tokenId(String tokenId) {
            this.tokenId = tokenId;
            return this;
        }
        
        /**
         * Build call for createCryptoSourceOfFunds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantCreateCryptoSourceOfFundsRequest applicantCreateCryptoSourceOfFundsRequest = buildBodyParams();
            return createCryptoSourceOfFundsCall(applicantId, applicantCreateCryptoSourceOfFundsRequest, _callback);
        }

        private ApplicantCreateCryptoSourceOfFundsRequest buildBodyParams() {
            ApplicantCreateCryptoSourceOfFundsRequest applicantCreateCryptoSourceOfFundsRequest = new ApplicantCreateCryptoSourceOfFundsRequest();
            applicantCreateCryptoSourceOfFundsRequest.currency(this.currency);
            applicantCreateCryptoSourceOfFundsRequest.direction(this.direction);
            applicantCreateCryptoSourceOfFundsRequest.txn(this.txn);
            applicantCreateCryptoSourceOfFundsRequest.address(this.address);
            applicantCreateCryptoSourceOfFundsRequest.tokenId(this.tokenId);
            return applicantCreateCryptoSourceOfFundsRequest;
        }

        /**
         * Execute createCryptoSourceOfFunds request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantCreateCryptoSourceOfFundsRequest applicantCreateCryptoSourceOfFundsRequest = buildBodyParams();
            createCryptoSourceOfFundsWithHttpInfo(applicantId, applicantCreateCryptoSourceOfFundsRequest);
        }

        /**
         * Execute createCryptoSourceOfFunds request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantCreateCryptoSourceOfFundsRequest applicantCreateCryptoSourceOfFundsRequest = buildBodyParams();
            return createCryptoSourceOfFundsWithHttpInfo(applicantId, applicantCreateCryptoSourceOfFundsRequest);
        }

        /**
         * Execute createCryptoSourceOfFunds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantCreateCryptoSourceOfFundsRequest applicantCreateCryptoSourceOfFundsRequest = buildBodyParams();
            return createCryptoSourceOfFundsAsync(applicantId, applicantCreateCryptoSourceOfFundsRequest, _callback);
        }
    }

    /**
     * Submission
     * Creates an action with transaction information.
     * @param applicantId A unique applicant identifier. (required)
     * @return CreateCryptoSourceOfFundsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateCryptoSourceOfFundsRequestBuilder createCryptoSourceOfFunds(String currency, String direction, String address, String applicantId) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (direction == null) throw new IllegalArgumentException("\"direction\" is required but got null");
            

        if (address == null) throw new IllegalArgumentException("\"address\" is required but got null");
            

        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new CreateCryptoSourceOfFundsRequestBuilder(currency, direction, address, applicantId);
    }
    private okhttp3.Call createPaymentSourceActionsCall(String applicantId, String levelName, ApplicantCreatePaymentSourceActionsRequest applicantCreatePaymentSourceActionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantCreatePaymentSourceActionsRequest;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/-/forApplicant/{applicantId}/?levelName=paymentSource"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (levelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("levelName", levelName));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentSourceActionsValidateBeforeCall(String applicantId, String levelName, ApplicantCreatePaymentSourceActionsRequest applicantCreatePaymentSourceActionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling createPaymentSourceActions(Async)");
        }

        // verify the required parameter 'levelName' is set
        if (levelName == null) {
            throw new ApiException("Missing the required parameter 'levelName' when calling createPaymentSourceActions(Async)");
        }

        return createPaymentSourceActionsCall(applicantId, levelName, applicantCreatePaymentSourceActionsRequest, _callback);

    }


    private ApiResponse<ApplicantCreatePaymentSourceActionsResponse> createPaymentSourceActionsWithHttpInfo(String applicantId, String levelName, ApplicantCreatePaymentSourceActionsRequest applicantCreatePaymentSourceActionsRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentSourceActionsValidateBeforeCall(applicantId, levelName, applicantCreatePaymentSourceActionsRequest, null);
        Type localVarReturnType = new TypeToken<ApplicantCreatePaymentSourceActionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPaymentSourceActionsAsync(String applicantId, String levelName, ApplicantCreatePaymentSourceActionsRequest applicantCreatePaymentSourceActionsRequest, final ApiCallback<ApplicantCreatePaymentSourceActionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentSourceActionsValidateBeforeCall(applicantId, levelName, applicantCreatePaymentSourceActionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicantCreatePaymentSourceActionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePaymentSourceActionsRequestBuilder {
        private final String applicantId;
        private final String levelName;
        private String externalActionId;
        private ApplicantCreatePaymentSourceActionsRequestPaymentSource paymentSource;

        private CreatePaymentSourceActionsRequestBuilder(String applicantId, String levelName) {
            this.applicantId = applicantId;
            this.levelName = levelName;
        }

        /**
         * Set externalActionId
         * @param externalActionId An external identifier for an action. (optional)
         * @return CreatePaymentSourceActionsRequestBuilder
         */
        public CreatePaymentSourceActionsRequestBuilder externalActionId(String externalActionId) {
            this.externalActionId = externalActionId;
            return this;
        }
        
        /**
         * Set paymentSource
         * @param paymentSource  (optional)
         * @return CreatePaymentSourceActionsRequestBuilder
         */
        public CreatePaymentSourceActionsRequestBuilder paymentSource(ApplicantCreatePaymentSourceActionsRequestPaymentSource paymentSource) {
            this.paymentSource = paymentSource;
            return this;
        }
        
        /**
         * Build call for createPaymentSourceActions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantCreatePaymentSourceActionsRequest applicantCreatePaymentSourceActionsRequest = buildBodyParams();
            return createPaymentSourceActionsCall(applicantId, levelName, applicantCreatePaymentSourceActionsRequest, _callback);
        }

        private ApplicantCreatePaymentSourceActionsRequest buildBodyParams() {
            ApplicantCreatePaymentSourceActionsRequest applicantCreatePaymentSourceActionsRequest = new ApplicantCreatePaymentSourceActionsRequest();
            applicantCreatePaymentSourceActionsRequest.externalActionId(this.externalActionId);
            applicantCreatePaymentSourceActionsRequest.paymentSource(this.paymentSource);
            return applicantCreatePaymentSourceActionsRequest;
        }

        /**
         * Execute createPaymentSourceActions request
         * @return ApplicantCreatePaymentSourceActionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApplicantCreatePaymentSourceActionsResponse execute() throws ApiException {
            ApplicantCreatePaymentSourceActionsRequest applicantCreatePaymentSourceActionsRequest = buildBodyParams();
            ApiResponse<ApplicantCreatePaymentSourceActionsResponse> localVarResp = createPaymentSourceActionsWithHttpInfo(applicantId, levelName, applicantCreatePaymentSourceActionsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPaymentSourceActions request with HTTP info returned
         * @return ApiResponse&lt;ApplicantCreatePaymentSourceActionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicantCreatePaymentSourceActionsResponse> executeWithHttpInfo() throws ApiException {
            ApplicantCreatePaymentSourceActionsRequest applicantCreatePaymentSourceActionsRequest = buildBodyParams();
            return createPaymentSourceActionsWithHttpInfo(applicantId, levelName, applicantCreatePaymentSourceActionsRequest);
        }

        /**
         * Execute createPaymentSourceActions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicantCreatePaymentSourceActionsResponse> _callback) throws ApiException {
            ApplicantCreatePaymentSourceActionsRequest applicantCreatePaymentSourceActionsRequest = buildBodyParams();
            return createPaymentSourceActionsAsync(applicantId, levelName, applicantCreatePaymentSourceActionsRequest, _callback);
        }
    }

    /**
     * Create payment source actions
     * Creates an action to process a payment source and to confirm the owner of the payment method.
     * @param applicantId An unique applicant identifier. (required)
     * @param levelName A verification level name for which you want to create a payment source action. (required)
     * @return CreatePaymentSourceActionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentSourceActionsRequestBuilder createPaymentSourceActions(String applicantId, String levelName) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        if (levelName == null) throw new IllegalArgumentException("\"levelName\" is required but got null");
            

        return new CreatePaymentSourceActionsRequestBuilder(applicantId, levelName);
    }
    private okhttp3.Call deactivateProfileCall(String applicantId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/presence/{status}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()))
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateProfileValidateBeforeCall(String applicantId, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling deactivateProfile(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling deactivateProfile(Async)");
        }

        return deactivateProfileCall(applicantId, status, _callback);

    }


    private ApiResponse<Void> deactivateProfileWithHttpInfo(String applicantId, String status) throws ApiException {
        okhttp3.Call localVarCall = deactivateProfileValidateBeforeCall(applicantId, status, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateProfileAsync(String applicantId, String status, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateProfileValidateBeforeCall(applicantId, status, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateProfileRequestBuilder {
        private final String applicantId;
        private final String status;

        private DeactivateProfileRequestBuilder(String applicantId, String status) {
            this.applicantId = applicantId;
            this.status = status;
        }

        /**
         * Build call for deactivateProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateProfileCall(applicantId, status, _callback);
        }


        /**
         * Execute deactivateProfile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deactivateProfileWithHttpInfo(applicantId, status);
        }

        /**
         * Execute deactivateProfile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deactivateProfileWithHttpInfo(applicantId, status);
        }

        /**
         * Execute deactivateProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deactivateProfileAsync(applicantId, status, _callback);
        }
    }

    /**
     * Deactivate applicant profile
     * Deactivates an applicant profile.
     * @param applicantId A unique applicant identifier. (required)
     * @param status Possible values: &#x60;deactivated&#x60; to deactivate the applicant profile. &#x60;activated&#x60; to reactivate the applicant profile. (required)
     * @return DeactivateProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateProfileRequestBuilder deactivateProfile(String applicantId, String status) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new DeactivateProfileRequestBuilder(applicantId, status);
    }
    private okhttp3.Call enrichTransactionWithTravelRuleDataCall(String txnId, ApplicantEnrichTransactionWithTravelRuleDataRequest applicantEnrichTransactionWithTravelRuleDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantEnrichTransactionWithTravelRuleDataRequest;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{txnId}/data/applicant"
            .replace("{" + "txnId" + "}", localVarApiClient.escapeString(txnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrichTransactionWithTravelRuleDataValidateBeforeCall(String txnId, ApplicantEnrichTransactionWithTravelRuleDataRequest applicantEnrichTransactionWithTravelRuleDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txnId' is set
        if (txnId == null) {
            throw new ApiException("Missing the required parameter 'txnId' when calling enrichTransactionWithTravelRuleData(Async)");
        }

        return enrichTransactionWithTravelRuleDataCall(txnId, applicantEnrichTransactionWithTravelRuleDataRequest, _callback);

    }


    private ApiResponse<Object> enrichTransactionWithTravelRuleDataWithHttpInfo(String txnId, ApplicantEnrichTransactionWithTravelRuleDataRequest applicantEnrichTransactionWithTravelRuleDataRequest) throws ApiException {
        okhttp3.Call localVarCall = enrichTransactionWithTravelRuleDataValidateBeforeCall(txnId, applicantEnrichTransactionWithTravelRuleDataRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enrichTransactionWithTravelRuleDataAsync(String txnId, ApplicantEnrichTransactionWithTravelRuleDataRequest applicantEnrichTransactionWithTravelRuleDataRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrichTransactionWithTravelRuleDataValidateBeforeCall(txnId, applicantEnrichTransactionWithTravelRuleDataRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnrichTransactionWithTravelRuleDataRequestBuilder {
        private final String fullName;
        private final String txnId;

        private EnrichTransactionWithTravelRuleDataRequestBuilder(String fullName, String txnId) {
            this.fullName = fullName;
            this.txnId = txnId;
        }

        /**
         * Build call for enrichTransactionWithTravelRuleData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantEnrichTransactionWithTravelRuleDataRequest applicantEnrichTransactionWithTravelRuleDataRequest = buildBodyParams();
            return enrichTransactionWithTravelRuleDataCall(txnId, applicantEnrichTransactionWithTravelRuleDataRequest, _callback);
        }

        private ApplicantEnrichTransactionWithTravelRuleDataRequest buildBodyParams() {
            ApplicantEnrichTransactionWithTravelRuleDataRequest applicantEnrichTransactionWithTravelRuleDataRequest = new ApplicantEnrichTransactionWithTravelRuleDataRequest();
            applicantEnrichTransactionWithTravelRuleDataRequest.fullName(this.fullName);
            return applicantEnrichTransactionWithTravelRuleDataRequest;
        }

        /**
         * Execute enrichTransactionWithTravelRuleData request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApplicantEnrichTransactionWithTravelRuleDataRequest applicantEnrichTransactionWithTravelRuleDataRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = enrichTransactionWithTravelRuleDataWithHttpInfo(txnId, applicantEnrichTransactionWithTravelRuleDataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enrichTransactionWithTravelRuleData request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ApplicantEnrichTransactionWithTravelRuleDataRequest applicantEnrichTransactionWithTravelRuleDataRequest = buildBodyParams();
            return enrichTransactionWithTravelRuleDataWithHttpInfo(txnId, applicantEnrichTransactionWithTravelRuleDataRequest);
        }

        /**
         * Execute enrichTransactionWithTravelRuleData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ApplicantEnrichTransactionWithTravelRuleDataRequest applicantEnrichTransactionWithTravelRuleDataRequest = buildBodyParams();
            return enrichTransactionWithTravelRuleDataAsync(txnId, applicantEnrichTransactionWithTravelRuleDataRequest, _callback);
        }
    }

    /**
     * Enriching transaction with Travel Rule
     * Enriches transaction with the Travel Rule data.
     * @param txnId A unique transaction identifier. (required)
     * @return EnrichTransactionWithTravelRuleDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public EnrichTransactionWithTravelRuleDataRequestBuilder enrichTransactionWithTravelRuleData(String fullName, String txnId) throws IllegalArgumentException {
        if (fullName == null) throw new IllegalArgumentException("\"fullName\" is required but got null");
            

        if (txnId == null) throw new IllegalArgumentException("\"txnId\" is required but got null");
            

        return new EnrichTransactionWithTravelRuleDataRequestBuilder(fullName, txnId);
    }
    private okhttp3.Call getActionOneInfoCall(String actionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/{actionId}/one"
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActionOneInfoValidateBeforeCall(String actionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling getActionOneInfo(Async)");
        }

        return getActionOneInfoCall(actionId, _callback);

    }


    private ApiResponse<Void> getActionOneInfoWithHttpInfo(String actionId) throws ApiException {
        okhttp3.Call localVarCall = getActionOneInfoValidateBeforeCall(actionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getActionOneInfoAsync(String actionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActionOneInfoValidateBeforeCall(actionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetActionOneInfoRequestBuilder {
        private final String actionId;

        private GetActionOneInfoRequestBuilder(String actionId) {
            this.actionId = actionId;
        }

        /**
         * Build call for getActionOneInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActionOneInfoCall(actionId, _callback);
        }


        /**
         * Execute getActionOneInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getActionOneInfoWithHttpInfo(actionId);
        }

        /**
         * Execute getActionOneInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getActionOneInfoWithHttpInfo(actionId);
        }

        /**
         * Execute getActionOneInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getActionOneInfoAsync(actionId, _callback);
        }
    }

    /**
     * Get action information
     * Returns information about the applicant action checks.
     * @param actionId A unique applicant action identifier. (required)
     * @return GetActionOneInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetActionOneInfoRequestBuilder getActionOneInfo(String actionId) throws IllegalArgumentException {
        if (actionId == null) throw new IllegalArgumentException("\"actionId\" is required but got null");
            

        return new GetActionOneInfoRequestBuilder(actionId);
    }
    private okhttp3.Call getActionsCall(String applicantId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/-;applicantId={applicantId}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActionsValidateBeforeCall(String applicantId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling getActions(Async)");
        }

        return getActionsCall(applicantId, limit, offset, _callback);

    }


    private ApiResponse<Void> getActionsWithHttpInfo(String applicantId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getActionsValidateBeforeCall(applicantId, limit, offset, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getActionsAsync(String applicantId, Integer limit, Integer offset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActionsValidateBeforeCall(applicantId, limit, offset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetActionsRequestBuilder {
        private final String applicantId;
        private Integer limit;
        private Integer offset;

        private GetActionsRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Set limit
         * @param limit Limit of applicant actions to be returned. (optional, default to 1000)
         * @return GetActionsRequestBuilder
         */
        public GetActionsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset of applicant actions to be returned. (optional, default to 0)
         * @return GetActionsRequestBuilder
         */
        public GetActionsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getActions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActionsCall(applicantId, limit, offset, _callback);
        }


        /**
         * Execute getActions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getActionsWithHttpInfo(applicantId, limit, offset);
        }

        /**
         * Execute getActions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getActionsWithHttpInfo(applicantId, limit, offset);
        }

        /**
         * Execute getActions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getActionsAsync(applicantId, limit, offset, _callback);
        }
    }

    /**
     * Get applicant actions
     * Returns a list of applicant actions.
     * @param applicantId A unique applicant identifier. (required)
     * @return GetActionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetActionsRequestBuilder getActions(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new GetActionsRequestBuilder(applicantId);
    }
    private okhttp3.Call getBankCardImageCall(String actionId, String imageId, Boolean isPreview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/{actionId}/images/{imageId}?preview={isPreview}"
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()))
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPreview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPreview", isPreview));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankCardImageValidateBeforeCall(String actionId, String imageId, Boolean isPreview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling getBankCardImage(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getBankCardImage(Async)");
        }

        return getBankCardImageCall(actionId, imageId, isPreview, _callback);

    }


    private ApiResponse<Void> getBankCardImageWithHttpInfo(String actionId, String imageId, Boolean isPreview) throws ApiException {
        okhttp3.Call localVarCall = getBankCardImageValidateBeforeCall(actionId, imageId, isPreview, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getBankCardImageAsync(String actionId, String imageId, Boolean isPreview, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankCardImageValidateBeforeCall(actionId, imageId, isPreview, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetBankCardImageRequestBuilder {
        private final String actionId;
        private final String imageId;
        private Boolean isPreview;

        private GetBankCardImageRequestBuilder(String actionId, String imageId) {
            this.actionId = actionId;
            this.imageId = imageId;
        }

        /**
         * Set isPreview
         * @param isPreview Indicates if an image thumbnail should be returned. (optional, default to false)
         * @return GetBankCardImageRequestBuilder
         */
        public GetBankCardImageRequestBuilder isPreview(Boolean isPreview) {
            this.isPreview = isPreview;
            return this;
        }
        
        /**
         * Build call for getBankCardImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBankCardImageCall(actionId, imageId, isPreview, _callback);
        }


        /**
         * Execute getBankCardImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getBankCardImageWithHttpInfo(actionId, imageId, isPreview);
        }

        /**
         * Execute getBankCardImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getBankCardImageWithHttpInfo(actionId, imageId, isPreview);
        }

        /**
         * Execute getBankCardImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getBankCardImageAsync(actionId, imageId, isPreview, _callback);
        }
    }

    /**
     * Get bank card image
     * Returns an original bank card image.
     * @param actionId A unique applicant action identifier. (required)
     * @param imageId An image identifier taken from &#x60;images[].imageId&#x60;. (required)
     * @return GetBankCardImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetBankCardImageRequestBuilder getBankCardImage(String actionId, String imageId) throws IllegalArgumentException {
        if (actionId == null) throw new IllegalArgumentException("\"actionId\" is required but got null");
            

        if (imageId == null) throw new IllegalArgumentException("\"imageId\" is required but got null");
            

        return new GetBankCardImageRequestBuilder(actionId, imageId);
    }
    private okhttp3.Call getDataCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/one"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling getData(Async)");
        }

        return getDataCall(applicantId, _callback);

    }


    private ApiResponse<Void> getDataWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = getDataValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDataAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDataRequestBuilder {
        private final String applicantId;

        private GetDataRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for getData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataCall(applicantId, _callback);
        }


        /**
         * Execute getData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDataWithHttpInfo(applicantId);
        }

        /**
         * Execute getData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDataWithHttpInfo(applicantId);
        }

        /**
         * Execute getData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDataAsync(applicantId, _callback);
        }
    }

    /**
     * Get applicant data
     * Returns applicant information.
     * @param applicantId A unique applicant identifier (required)
     * @return GetDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDataRequestBuilder getData(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new GetDataRequestBuilder(applicantId);
    }
    private okhttp3.Call getDataByExternalUserIdCall(String externalUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/-;externalUserId={externalUserId}/one"
            .replace("{" + "externalUserId" + "}", localVarApiClient.escapeString(externalUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataByExternalUserIdValidateBeforeCall(String externalUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalUserId' is set
        if (externalUserId == null) {
            throw new ApiException("Missing the required parameter 'externalUserId' when calling getDataByExternalUserId(Async)");
        }

        return getDataByExternalUserIdCall(externalUserId, _callback);

    }


    private ApiResponse<Void> getDataByExternalUserIdWithHttpInfo(String externalUserId) throws ApiException {
        okhttp3.Call localVarCall = getDataByExternalUserIdValidateBeforeCall(externalUserId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDataByExternalUserIdAsync(String externalUserId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataByExternalUserIdValidateBeforeCall(externalUserId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDataByExternalUserIdRequestBuilder {
        private final String externalUserId;

        private GetDataByExternalUserIdRequestBuilder(String externalUserId) {
            this.externalUserId = externalUserId;
        }

        /**
         * Build call for getDataByExternalUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataByExternalUserIdCall(externalUserId, _callback);
        }


        /**
         * Execute getDataByExternalUserId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDataByExternalUserIdWithHttpInfo(externalUserId);
        }

        /**
         * Execute getDataByExternalUserId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDataByExternalUserIdWithHttpInfo(externalUserId);
        }

        /**
         * Execute getDataByExternalUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDataByExternalUserIdAsync(externalUserId, _callback);
        }
    }

    /**
     * Get applicant data (externalUserId)
     * Returns applicant information based on the provided &#x60;externalUserId&#x60;.
     * @param externalUserId A unique applicant identifier in your system. (required)
     * @return GetDataByExternalUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDataByExternalUserIdRequestBuilder getDataByExternalUserId(String externalUserId) throws IllegalArgumentException {
        if (externalUserId == null) throw new IllegalArgumentException("\"externalUserId\" is required but got null");
            

        return new GetDataByExternalUserIdRequestBuilder(externalUserId);
    }
    private okhttp3.Call getDataLatestCall(String type, String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/checks/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicantId", applicantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataLatestValidateBeforeCall(String type, String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getDataLatest(Async)");
        }

        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling getDataLatest(Async)");
        }

        return getDataLatestCall(type, applicantId, _callback);

    }


    private ApiResponse<Void> getDataLatestWithHttpInfo(String type, String applicantId) throws ApiException {
        okhttp3.Call localVarCall = getDataLatestValidateBeforeCall(type, applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDataLatestAsync(String type, String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataLatestValidateBeforeCall(type, applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDataLatestRequestBuilder {
        private final String type;
        private final String applicantId;

        private GetDataLatestRequestBuilder(String type, String applicantId) {
            this.type = type;
            this.applicantId = applicantId;
        }

        /**
         * Build call for getDataLatest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataLatestCall(type, applicantId, _callback);
        }


        /**
         * Execute getDataLatest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDataLatestWithHttpInfo(type, applicantId);
        }

        /**
         * Execute getDataLatest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDataLatestWithHttpInfo(type, applicantId);
        }

        /**
         * Execute getDataLatest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDataLatestAsync(type, applicantId, _callback);
        }
    }

    /**
     * Get applicant data
     * Returns the applicant data for Non-Doc verification.
     * @param type Check type. (required)
     * @param applicantId A unique applicant identifier. (required)
     * @return GetDataLatestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDataLatestRequestBuilder getDataLatest(String type, String applicantId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new GetDataLatestRequestBuilder(type, applicantId);
    }
    private okhttp3.Call getFraudNetworkByIdCall(String networkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicantFraudNetworks/{networkId}/one"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFraudNetworkByIdValidateBeforeCall(String networkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling getFraudNetworkById(Async)");
        }

        return getFraudNetworkByIdCall(networkId, _callback);

    }


    private ApiResponse<Void> getFraudNetworkByIdWithHttpInfo(String networkId) throws ApiException {
        okhttp3.Call localVarCall = getFraudNetworkByIdValidateBeforeCall(networkId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFraudNetworkByIdAsync(String networkId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFraudNetworkByIdValidateBeforeCall(networkId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFraudNetworkByIdRequestBuilder {
        private final String networkId;

        private GetFraudNetworkByIdRequestBuilder(String networkId) {
            this.networkId = networkId;
        }

        /**
         * Build call for getFraudNetworkById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFraudNetworkByIdCall(networkId, _callback);
        }


        /**
         * Execute getFraudNetworkById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFraudNetworkByIdWithHttpInfo(networkId);
        }

        /**
         * Execute getFraudNetworkById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFraudNetworkByIdWithHttpInfo(networkId);
        }

        /**
         * Execute getFraudNetworkById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFraudNetworkByIdAsync(networkId, _callback);
        }
    }

    /**
     * Get fraud network by ID
     * Returns fraud network by &#x60;networkId&#x60;.
     * @param networkId A unique network identifier. (required)
     * @return GetFraudNetworkByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetFraudNetworkByIdRequestBuilder getFraudNetworkById(String networkId) throws IllegalArgumentException {
        if (networkId == null) throw new IllegalArgumentException("\"networkId\" is required but got null");
            

        return new GetFraudNetworkByIdRequestBuilder(networkId);
    }
    private okhttp3.Call getFraudNetworksCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicantFraudNetworks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFraudNetworksValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return getFraudNetworksCall(offset, limit, _callback);

    }


    private ApiResponse<Void> getFraudNetworksWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getFraudNetworksValidateBeforeCall(offset, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFraudNetworksAsync(Integer offset, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFraudNetworksValidateBeforeCall(offset, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFraudNetworksRequestBuilder {
        private Integer offset;
        private Integer limit;

        private GetFraudNetworksRequestBuilder() {
        }

        /**
         * Set offset
         * @param offset Offset of the found networks to be returned. (optional, default to 0)
         * @return GetFraudNetworksRequestBuilder
         */
        public GetFraudNetworksRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of the found networks to be returned. The maximum value you can set is 100. (optional, default to 10)
         * @return GetFraudNetworksRequestBuilder
         */
        public GetFraudNetworksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getFraudNetworks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFraudNetworksCall(offset, limit, _callback);
        }


        /**
         * Execute getFraudNetworks request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFraudNetworksWithHttpInfo(offset, limit);
        }

        /**
         * Execute getFraudNetworks request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFraudNetworksWithHttpInfo(offset, limit);
        }

        /**
         * Execute getFraudNetworks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFraudNetworksAsync(offset, limit, _callback);
        }
    }

    /**
     * Get fraud networks
     * Returns fraud networks.
     * @return GetFraudNetworksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetFraudNetworksRequestBuilder getFraudNetworks() throws IllegalArgumentException {
        return new GetFraudNetworksRequestBuilder();
    }
    private okhttp3.Call getFraudNetworksByApplicantCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicantFraudNetworks/-/byApplicant/{applicantId}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFraudNetworksByApplicantValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling getFraudNetworksByApplicant(Async)");
        }

        return getFraudNetworksByApplicantCall(applicantId, _callback);

    }


    private ApiResponse<Void> getFraudNetworksByApplicantWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = getFraudNetworksByApplicantValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getFraudNetworksByApplicantAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFraudNetworksByApplicantValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetFraudNetworksByApplicantRequestBuilder {
        private final String applicantId;

        private GetFraudNetworksByApplicantRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for getFraudNetworksByApplicant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFraudNetworksByApplicantCall(applicantId, _callback);
        }


        /**
         * Execute getFraudNetworksByApplicant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getFraudNetworksByApplicantWithHttpInfo(applicantId);
        }

        /**
         * Execute getFraudNetworksByApplicant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getFraudNetworksByApplicantWithHttpInfo(applicantId);
        }

        /**
         * Execute getFraudNetworksByApplicant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getFraudNetworksByApplicantAsync(applicantId, _callback);
        }
    }

    /**
     * Get applicant fraud networks
     * Returns all fraud networks by &#x60;applicantId&#x60;.
     * @param applicantId A unique applicant identifier. (required)
     * @return GetFraudNetworksByApplicantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetFraudNetworksByApplicantRequestBuilder getFraudNetworksByApplicant(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new GetFraudNetworksByApplicantRequestBuilder(applicantId);
    }
    private okhttp3.Call getLevelsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/-/levels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLevelsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLevelsCall(_callback);

    }


    private ApiResponse<Void> getLevelsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLevelsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getLevelsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLevelsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetLevelsRequestBuilder {

        private GetLevelsRequestBuilder() {
        }

        /**
         * Build call for getLevels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLevelsCall(_callback);
        }


        /**
         * Execute getLevels request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getLevelsWithHttpInfo();
        }

        /**
         * Execute getLevels request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getLevelsWithHttpInfo();
        }

        /**
         * Execute getLevels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getLevelsAsync(_callback);
        }
    }

    /**
     * Get available applicant levels
     * Returns a list of verification levels.
     * @return GetLevelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetLevelsRequestBuilder getLevels() throws IllegalArgumentException {
        return new GetLevelsRequestBuilder();
    }
    private okhttp3.Call getRequiredIdDocsCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/requiredIdDocs"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequiredIdDocsValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling getRequiredIdDocs(Async)");
        }

        return getRequiredIdDocsCall(applicantId, _callback);

    }


    private ApiResponse<Void> getRequiredIdDocsWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = getRequiredIdDocsValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getRequiredIdDocsAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequiredIdDocsValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetRequiredIdDocsRequestBuilder {
        private final String applicantId;

        private GetRequiredIdDocsRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for getRequiredIdDocs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRequiredIdDocsCall(applicantId, _callback);
        }


        /**
         * Execute getRequiredIdDocs request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getRequiredIdDocsWithHttpInfo(applicantId);
        }

        /**
         * Execute getRequiredIdDocs request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getRequiredIdDocsWithHttpInfo(applicantId);
        }

        /**
         * Execute getRequiredIdDocs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getRequiredIdDocsAsync(applicantId, _callback);
        }
    }

    /**
     * Get required ID documents
     * Returns the list of required documents.
     * @param applicantId A unique applicant identifier. (required)
     * @return GetRequiredIdDocsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetRequiredIdDocsRequestBuilder getRequiredIdDocs(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new GetRequiredIdDocsRequestBuilder(applicantId);
    }
    private okhttp3.Call getReviewStatusCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/status"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReviewStatusValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling getReviewStatus(Async)");
        }

        return getReviewStatusCall(applicantId, _callback);

    }


    private ApiResponse<Void> getReviewStatusWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = getReviewStatusValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getReviewStatusAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReviewStatusValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetReviewStatusRequestBuilder {
        private final String applicantId;

        private GetReviewStatusRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for getReviewStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReviewStatusCall(applicantId, _callback);
        }


        /**
         * Execute getReviewStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getReviewStatusWithHttpInfo(applicantId);
        }

        /**
         * Execute getReviewStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getReviewStatusWithHttpInfo(applicantId);
        }

        /**
         * Execute getReviewStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getReviewStatusAsync(applicantId, _callback);
        }
    }

    /**
     * Get applicant review status
     * Returns applicant review status.
     * @param applicantId A unique applicant identifier. (required)
     * @return GetReviewStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetReviewStatusRequestBuilder getReviewStatus(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new GetReviewStatusRequestBuilder(applicantId);
    }
    private okhttp3.Call getVerificationStepsStatusCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/requiredIdDocsStatus"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVerificationStepsStatusValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling getVerificationStepsStatus(Async)");
        }

        return getVerificationStepsStatusCall(applicantId, _callback);

    }


    private ApiResponse<Void> getVerificationStepsStatusWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = getVerificationStepsStatusValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getVerificationStepsStatusAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVerificationStepsStatusValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetVerificationStepsStatusRequestBuilder {
        private final String applicantId;

        private GetVerificationStepsStatusRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for getVerificationStepsStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVerificationStepsStatusCall(applicantId, _callback);
        }


        /**
         * Execute getVerificationStepsStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getVerificationStepsStatusWithHttpInfo(applicantId);
        }

        /**
         * Execute getVerificationStepsStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getVerificationStepsStatusWithHttpInfo(applicantId);
        }

        /**
         * Execute getVerificationStepsStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getVerificationStepsStatusAsync(applicantId, _callback);
        }
    }

    /**
     * Get applicant verification steps status
     * Returns information about the documents or separate verification step results.
     * @param applicantId A unique applicant identifier. (required)
     * @return GetVerificationStepsStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetVerificationStepsStatusRequestBuilder getVerificationStepsStatus(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new GetVerificationStepsStatusRequestBuilder(applicantId);
    }
    private okhttp3.Call getVideoCallMediaCall(String applicantId, String compositionMediaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/videoIdent/applicant/{applicantId}/media/{compositionMediaId}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()))
            .replace("{" + "compositionMediaId" + "}", localVarApiClient.escapeString(compositionMediaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCallMediaValidateBeforeCall(String applicantId, String compositionMediaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling getVideoCallMedia(Async)");
        }

        // verify the required parameter 'compositionMediaId' is set
        if (compositionMediaId == null) {
            throw new ApiException("Missing the required parameter 'compositionMediaId' when calling getVideoCallMedia(Async)");
        }

        return getVideoCallMediaCall(applicantId, compositionMediaId, _callback);

    }


    private ApiResponse<Object> getVideoCallMediaWithHttpInfo(String applicantId, String compositionMediaId) throws ApiException {
        okhttp3.Call localVarCall = getVideoCallMediaValidateBeforeCall(applicantId, compositionMediaId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVideoCallMediaAsync(String applicantId, String compositionMediaId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCallMediaValidateBeforeCall(applicantId, compositionMediaId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVideoCallMediaRequestBuilder {
        private final String applicantId;
        private final String compositionMediaId;

        private GetVideoCallMediaRequestBuilder(String applicantId, String compositionMediaId) {
            this.applicantId = applicantId;
            this.compositionMediaId = compositionMediaId;
        }

        /**
         * Build call for getVideoCallMedia
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVideoCallMediaCall(applicantId, compositionMediaId, _callback);
        }


        /**
         * Execute getVideoCallMedia request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getVideoCallMediaWithHttpInfo(applicantId, compositionMediaId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVideoCallMedia request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getVideoCallMediaWithHttpInfo(applicantId, compositionMediaId);
        }

        /**
         * Execute getVideoCallMedia request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getVideoCallMediaAsync(applicantId, compositionMediaId, _callback);
        }
    }

    /**
     * Get video call media
     * Returns video call media.
     * @param applicantId A unique applicant identifier. (required)
     * @param compositionMediaId Video call media identifier. (required)
     * @return GetVideoCallMediaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetVideoCallMediaRequestBuilder getVideoCallMedia(String applicantId, String compositionMediaId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        if (compositionMediaId == null) throw new IllegalArgumentException("\"compositionMediaId\" is required but got null");
            

        return new GetVideoCallMediaRequestBuilder(applicantId, compositionMediaId);
    }
    private okhttp3.Call importByArchiveCall(ApplicantImportByArchiveRequest applicantImportByArchiveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantImportByArchiveRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/-/applicantImport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importByArchiveValidateBeforeCall(ApplicantImportByArchiveRequest applicantImportByArchiveRequest, final ApiCallback _callback) throws ApiException {
        return importByArchiveCall(applicantImportByArchiveRequest, _callback);

    }


    private ApiResponse<Void> importByArchiveWithHttpInfo(ApplicantImportByArchiveRequest applicantImportByArchiveRequest) throws ApiException {
        okhttp3.Call localVarCall = importByArchiveValidateBeforeCall(applicantImportByArchiveRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call importByArchiveAsync(ApplicantImportByArchiveRequest applicantImportByArchiveRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importByArchiveValidateBeforeCall(applicantImportByArchiveRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ImportByArchiveRequestBuilder {
        private File content;

        private ImportByArchiveRequestBuilder() {
        }

        /**
         * Set content
         * @param content An archive file. (optional)
         * @return ImportByArchiveRequestBuilder
         */
        public ImportByArchiveRequestBuilder content(File content) {
            this.content = content;
            return this;
        }
        
        /**
         * Build call for importByArchive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantImportByArchiveRequest applicantImportByArchiveRequest = buildBodyParams();
            return importByArchiveCall(applicantImportByArchiveRequest, _callback);
        }

        private ApplicantImportByArchiveRequest buildBodyParams() {
            ApplicantImportByArchiveRequest applicantImportByArchiveRequest = new ApplicantImportByArchiveRequest();
            applicantImportByArchiveRequest.content(this.content);
            return applicantImportByArchiveRequest;
        }

        /**
         * Execute importByArchive request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantImportByArchiveRequest applicantImportByArchiveRequest = buildBodyParams();
            importByArchiveWithHttpInfo(applicantImportByArchiveRequest);
        }

        /**
         * Execute importByArchive request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantImportByArchiveRequest applicantImportByArchiveRequest = buildBodyParams();
            return importByArchiveWithHttpInfo(applicantImportByArchiveRequest);
        }

        /**
         * Execute importByArchive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantImportByArchiveRequest applicantImportByArchiveRequest = buildBodyParams();
            return importByArchiveAsync(applicantImportByArchiveRequest, _callback);
        }
    }

    /**
     * Import applicant with images by archive
     * Imports applicant data and images including associated review results.
     * @return ImportByArchiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ImportByArchiveRequestBuilder importByArchive() throws IllegalArgumentException {
        return new ImportByArchiveRequestBuilder();
    }
    private okhttp3.Call importCompletedCall(String levelName, ApplicantImportCompletedRequest applicantImportCompletedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantImportCompletedRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/-/ingestCompleted?levelName={levelName}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (levelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("levelName", levelName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importCompletedValidateBeforeCall(String levelName, ApplicantImportCompletedRequest applicantImportCompletedRequest, final ApiCallback _callback) throws ApiException {
        return importCompletedCall(levelName, applicantImportCompletedRequest, _callback);

    }


    private ApiResponse<Void> importCompletedWithHttpInfo(String levelName, ApplicantImportCompletedRequest applicantImportCompletedRequest) throws ApiException {
        okhttp3.Call localVarCall = importCompletedValidateBeforeCall(levelName, applicantImportCompletedRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call importCompletedAsync(String levelName, ApplicantImportCompletedRequest applicantImportCompletedRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importCompletedValidateBeforeCall(levelName, applicantImportCompletedRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ImportCompletedRequestBuilder {
        private ApplicantImportCompletedRequestInfo info;
        private String externalUserId;
        private ApplicantImportCompletedRequestReview review;
        private String levelName;

        private ImportCompletedRequestBuilder() {
        }

        /**
         * Set info
         * @param info  (optional)
         * @return ImportCompletedRequestBuilder
         */
        public ImportCompletedRequestBuilder info(ApplicantImportCompletedRequestInfo info) {
            this.info = info;
            return this;
        }
        
        /**
         * Set externalUserId
         * @param externalUserId someClientUserId (optional)
         * @return ImportCompletedRequestBuilder
         */
        public ImportCompletedRequestBuilder externalUserId(String externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }
        
        /**
         * Set review
         * @param review  (optional)
         * @return ImportCompletedRequestBuilder
         */
        public ImportCompletedRequestBuilder review(ApplicantImportCompletedRequestReview review) {
            this.review = review;
            return this;
        }
        
        /**
         * Set levelName
         * @param levelName A [verification level](https://docs.sumsub.com/reference) name. Case-sensitive and has to be created in the same environment. If contains reserved characters (e.g., &#x60;@&#x60;, &#x60;+\&quot;&#x60;, white spaces as &#x60;%20&#x60;), it should be URL-encoded, otherwise you may get signature mismatch. (optional)
         * @return ImportCompletedRequestBuilder
         */
        public ImportCompletedRequestBuilder levelName(String levelName) {
            this.levelName = levelName;
            return this;
        }
        
        /**
         * Build call for importCompleted
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantImportCompletedRequest applicantImportCompletedRequest = buildBodyParams();
            return importCompletedCall(levelName, applicantImportCompletedRequest, _callback);
        }

        private ApplicantImportCompletedRequest buildBodyParams() {
            ApplicantImportCompletedRequest applicantImportCompletedRequest = new ApplicantImportCompletedRequest();
            applicantImportCompletedRequest.info(this.info);
            applicantImportCompletedRequest.externalUserId(this.externalUserId);
            applicantImportCompletedRequest.review(this.review);
            return applicantImportCompletedRequest;
        }

        /**
         * Execute importCompleted request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantImportCompletedRequest applicantImportCompletedRequest = buildBodyParams();
            importCompletedWithHttpInfo(levelName, applicantImportCompletedRequest);
        }

        /**
         * Execute importCompleted request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantImportCompletedRequest applicantImportCompletedRequest = buildBodyParams();
            return importCompletedWithHttpInfo(levelName, applicantImportCompletedRequest);
        }

        /**
         * Execute importCompleted request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantImportCompletedRequest applicantImportCompletedRequest = buildBodyParams();
            return importCompletedAsync(levelName, applicantImportCompletedRequest, _callback);
        }
    }

    /**
     * Import applicants
     * Imports applicants.
     * @return ImportCompletedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ImportCompletedRequestBuilder importCompleted() throws IllegalArgumentException {
        return new ImportCompletedRequestBuilder();
    }
    private okhttp3.Call initiateApplicantCheckCall(String applicantId, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/status/pending?reason={reason}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateApplicantCheckValidateBeforeCall(String applicantId, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling initiateApplicantCheck(Async)");
        }

        return initiateApplicantCheckCall(applicantId, reason, _callback);

    }


    private ApiResponse<Void> initiateApplicantCheckWithHttpInfo(String applicantId, String reason) throws ApiException {
        okhttp3.Call localVarCall = initiateApplicantCheckValidateBeforeCall(applicantId, reason, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call initiateApplicantCheckAsync(String applicantId, String reason, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateApplicantCheckValidateBeforeCall(applicantId, reason, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class InitiateApplicantCheckRequestBuilder {
        private final String applicantId;
        private String reason;

        private InitiateApplicantCheckRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Set reason
         * @param reason A note indicating the reason for checking the applicant profile. (optional)
         * @return InitiateApplicantCheckRequestBuilder
         */
        public InitiateApplicantCheckRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for initiateApplicantCheck
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return initiateApplicantCheckCall(applicantId, reason, _callback);
        }


        /**
         * Execute initiateApplicantCheck request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            initiateApplicantCheckWithHttpInfo(applicantId, reason);
        }

        /**
         * Execute initiateApplicantCheck request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return initiateApplicantCheckWithHttpInfo(applicantId, reason);
        }

        /**
         * Execute initiateApplicantCheck request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return initiateApplicantCheckAsync(applicantId, reason, _callback);
        }
    }

    /**
     * Request applicant check
     * Initiates a check of the applicant profile.
     * @param applicantId A unique applicant identifier. (required)
     * @return InitiateApplicantCheckRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InitiateApplicantCheckRequestBuilder initiateApplicantCheck(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new InitiateApplicantCheckRequestBuilder(applicantId);
    }
    private okhttp3.Call moveTransactionToAnotherApplicantCall(String txnId, String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/kyt/txns/{txnId}/applicantId/{applicantId}"
            .replace("{" + "txnId" + "}", localVarApiClient.escapeString(txnId.toString()))
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveTransactionToAnotherApplicantValidateBeforeCall(String txnId, String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'txnId' is set
        if (txnId == null) {
            throw new ApiException("Missing the required parameter 'txnId' when calling moveTransactionToAnotherApplicant(Async)");
        }

        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling moveTransactionToAnotherApplicant(Async)");
        }

        return moveTransactionToAnotherApplicantCall(txnId, applicantId, _callback);

    }


    private ApiResponse<Object> moveTransactionToAnotherApplicantWithHttpInfo(String txnId, String applicantId) throws ApiException {
        okhttp3.Call localVarCall = moveTransactionToAnotherApplicantValidateBeforeCall(txnId, applicantId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call moveTransactionToAnotherApplicantAsync(String txnId, String applicantId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveTransactionToAnotherApplicantValidateBeforeCall(txnId, applicantId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MoveTransactionToAnotherApplicantRequestBuilder {
        private final String txnId;
        private final String applicantId;

        private MoveTransactionToAnotherApplicantRequestBuilder(String txnId, String applicantId) {
            this.txnId = txnId;
            this.applicantId = applicantId;
        }

        /**
         * Build call for moveTransactionToAnotherApplicant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return moveTransactionToAnotherApplicantCall(txnId, applicantId, _callback);
        }


        /**
         * Execute moveTransactionToAnotherApplicant request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = moveTransactionToAnotherApplicantWithHttpInfo(txnId, applicantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute moveTransactionToAnotherApplicant request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return moveTransactionToAnotherApplicantWithHttpInfo(txnId, applicantId);
        }

        /**
         * Execute moveTransactionToAnotherApplicant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return moveTransactionToAnotherApplicantAsync(txnId, applicantId, _callback);
        }
    }

    /**
     * Move transaction to another applicant
     * Moves transaction to the specified applicant.
     * @param txnId A unique transaction identifier. (required)
     * @param applicantId A unique applicant identifier who should own the transaction. (required)
     * @return MoveTransactionToAnotherApplicantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public MoveTransactionToAnotherApplicantRequestBuilder moveTransactionToAnotherApplicant(String txnId, String applicantId) throws IllegalArgumentException {
        if (txnId == null) throw new IllegalArgumentException("\"txnId\" is required but got null");
            

        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new MoveTransactionToAnotherApplicantRequestBuilder(txnId, applicantId);
    }
    private okhttp3.Call removeCustomTagsCall(String applicantId, ApplicantRemoveCustomTagsRequest applicantRemoveCustomTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantRemoveCustomTagsRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/tags"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCustomTagsValidateBeforeCall(String applicantId, ApplicantRemoveCustomTagsRequest applicantRemoveCustomTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling removeCustomTags(Async)");
        }

        return removeCustomTagsCall(applicantId, applicantRemoveCustomTagsRequest, _callback);

    }


    private ApiResponse<Void> removeCustomTagsWithHttpInfo(String applicantId, ApplicantRemoveCustomTagsRequest applicantRemoveCustomTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = removeCustomTagsValidateBeforeCall(applicantId, applicantRemoveCustomTagsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeCustomTagsAsync(String applicantId, ApplicantRemoveCustomTagsRequest applicantRemoveCustomTagsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCustomTagsValidateBeforeCall(applicantId, applicantRemoveCustomTagsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveCustomTagsRequestBuilder {
        private final String applicantId;
        private List<String> RAW_BODY;

        private RemoveCustomTagsRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY  (optional)
         * @return RemoveCustomTagsRequestBuilder
         */
        public RemoveCustomTagsRequestBuilder RAW_BODY(List<String> RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Build call for removeCustomTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantRemoveCustomTagsRequest applicantRemoveCustomTagsRequest = buildBodyParams();
            return removeCustomTagsCall(applicantId, applicantRemoveCustomTagsRequest, _callback);
        }

        private ApplicantRemoveCustomTagsRequest buildBodyParams() {
            ApplicantRemoveCustomTagsRequest applicantRemoveCustomTagsRequest = new ApplicantRemoveCustomTagsRequest();
            applicantRemoveCustomTagsRequest.RAW_BODY(this.RAW_BODY);
            return applicantRemoveCustomTagsRequest;
        }

        /**
         * Execute removeCustomTags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantRemoveCustomTagsRequest applicantRemoveCustomTagsRequest = buildBodyParams();
            removeCustomTagsWithHttpInfo(applicantId, applicantRemoveCustomTagsRequest);
        }

        /**
         * Execute removeCustomTags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantRemoveCustomTagsRequest applicantRemoveCustomTagsRequest = buildBodyParams();
            return removeCustomTagsWithHttpInfo(applicantId, applicantRemoveCustomTagsRequest);
        }

        /**
         * Execute removeCustomTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantRemoveCustomTagsRequest applicantRemoveCustomTagsRequest = buildBodyParams();
            return removeCustomTagsAsync(applicantId, applicantRemoveCustomTagsRequest, _callback);
        }
    }

    /**
     * Remove custom applicant tags
     * Removes all custom tags from applicant profiles.
     * @param applicantId A unique applicant identifier. (required)
     * @return RemoveCustomTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCustomTagsRequestBuilder removeCustomTags(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new RemoveCustomTagsRequestBuilder(applicantId);
    }
    private okhttp3.Call removeFromBeneficiaryListCall(String applicantId, String beneficiaryApplicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/info/companyInfo/beneficiaries/{beneficiaryApplicantId}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()))
            .replace("{" + "beneficiaryApplicantId" + "}", localVarApiClient.escapeString(beneficiaryApplicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromBeneficiaryListValidateBeforeCall(String applicantId, String beneficiaryApplicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling removeFromBeneficiaryList(Async)");
        }

        // verify the required parameter 'beneficiaryApplicantId' is set
        if (beneficiaryApplicantId == null) {
            throw new ApiException("Missing the required parameter 'beneficiaryApplicantId' when calling removeFromBeneficiaryList(Async)");
        }

        return removeFromBeneficiaryListCall(applicantId, beneficiaryApplicantId, _callback);

    }


    private ApiResponse<Void> removeFromBeneficiaryListWithHttpInfo(String applicantId, String beneficiaryApplicantId) throws ApiException {
        okhttp3.Call localVarCall = removeFromBeneficiaryListValidateBeforeCall(applicantId, beneficiaryApplicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromBeneficiaryListAsync(String applicantId, String beneficiaryApplicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromBeneficiaryListValidateBeforeCall(applicantId, beneficiaryApplicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromBeneficiaryListRequestBuilder {
        private final String applicantId;
        private final String beneficiaryApplicantId;

        private RemoveFromBeneficiaryListRequestBuilder(String applicantId, String beneficiaryApplicantId) {
            this.applicantId = applicantId;
            this.beneficiaryApplicantId = beneficiaryApplicantId;
        }

        /**
         * Build call for removeFromBeneficiaryList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromBeneficiaryListCall(applicantId, beneficiaryApplicantId, _callback);
        }


        /**
         * Execute removeFromBeneficiaryList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromBeneficiaryListWithHttpInfo(applicantId, beneficiaryApplicantId);
        }

        /**
         * Execute removeFromBeneficiaryList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromBeneficiaryListWithHttpInfo(applicantId, beneficiaryApplicantId);
        }

        /**
         * Execute removeFromBeneficiaryList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromBeneficiaryListAsync(applicantId, beneficiaryApplicantId, _callback);
        }
    }

    /**
     * Remove applicant from beneficiary list
     * Removes the applicant from the list of company beneficial owners.
     * @param applicantId A unique company applicant identifier. (required)
     * @param beneficiaryApplicantId Beneficiary applicant identifier. (required)
     * @return RemoveFromBeneficiaryListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromBeneficiaryListRequestBuilder removeFromBeneficiaryList(String applicantId, String beneficiaryApplicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        if (beneficiaryApplicantId == null) throw new IllegalArgumentException("\"beneficiaryApplicantId\" is required but got null");
            

        return new RemoveFromBeneficiaryListRequestBuilder(applicantId, beneficiaryApplicantId);
    }
    private okhttp3.Call requestActionCheckCall(String actionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/{actionId}/review/status/pending"
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestActionCheckValidateBeforeCall(String actionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling requestActionCheck(Async)");
        }

        return requestActionCheckCall(actionId, _callback);

    }


    private ApiResponse<Void> requestActionCheckWithHttpInfo(String actionId) throws ApiException {
        okhttp3.Call localVarCall = requestActionCheckValidateBeforeCall(actionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call requestActionCheckAsync(String actionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestActionCheckValidateBeforeCall(actionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RequestActionCheckRequestBuilder {
        private final String actionId;

        private RequestActionCheckRequestBuilder(String actionId) {
            this.actionId = actionId;
        }

        /**
         * Build call for requestActionCheck
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestActionCheckCall(actionId, _callback);
        }


        /**
         * Execute requestActionCheck request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            requestActionCheckWithHttpInfo(actionId);
        }

        /**
         * Execute requestActionCheck request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return requestActionCheckWithHttpInfo(actionId);
        }

        /**
         * Execute requestActionCheck request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return requestActionCheckAsync(actionId, _callback);
        }
    }

    /**
     * Request action check
     * Requests an applicant action check.
     * @param actionId A unique applicant action identifier. (required)
     * @return RequestActionCheckRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RequestActionCheckRequestBuilder requestActionCheck(String actionId) throws IllegalArgumentException {
        if (actionId == null) throw new IllegalArgumentException("\"actionId\" is required but got null");
            

        return new RequestActionCheckRequestBuilder(actionId);
    }
    private okhttp3.Call resetProfileCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/reset"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetProfileValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling resetProfile(Async)");
        }

        return resetProfileCall(applicantId, _callback);

    }


    private ApiResponse<Void> resetProfileWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = resetProfileValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resetProfileAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetProfileValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResetProfileRequestBuilder {
        private final String applicantId;

        private ResetProfileRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for resetProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetProfileCall(applicantId, _callback);
        }


        /**
         * Execute resetProfile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resetProfileWithHttpInfo(applicantId);
        }

        /**
         * Execute resetProfile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resetProfileWithHttpInfo(applicantId);
        }

        /**
         * Execute resetProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resetProfileAsync(applicantId, _callback);
        }
    }

    /**
     * Reset applicant profile
     * Marks documents uploaded by the applicant as inactive and deletes all statuses assigned earlier.
     * @param applicantId A unique applicant identifier. (required)
     * @return ResetProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResetProfileRequestBuilder resetProfile(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new ResetProfileRequestBuilder(applicantId);
    }
    private okhttp3.Call resetVerificationStepCall(String applicantId, String idDocSetType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/resetStep/{idDocSetType}"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()))
            .replace("{" + "idDocSetType" + "}", localVarApiClient.escapeString(idDocSetType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetVerificationStepValidateBeforeCall(String applicantId, String idDocSetType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling resetVerificationStep(Async)");
        }

        // verify the required parameter 'idDocSetType' is set
        if (idDocSetType == null) {
            throw new ApiException("Missing the required parameter 'idDocSetType' when calling resetVerificationStep(Async)");
        }

        return resetVerificationStepCall(applicantId, idDocSetType, _callback);

    }


    private ApiResponse<Void> resetVerificationStepWithHttpInfo(String applicantId, String idDocSetType) throws ApiException {
        okhttp3.Call localVarCall = resetVerificationStepValidateBeforeCall(applicantId, idDocSetType, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resetVerificationStepAsync(String applicantId, String idDocSetType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetVerificationStepValidateBeforeCall(applicantId, idDocSetType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResetVerificationStepRequestBuilder {
        private final String applicantId;
        private final String idDocSetType;

        private ResetVerificationStepRequestBuilder(String applicantId, String idDocSetType) {
            this.applicantId = applicantId;
            this.idDocSetType = idDocSetType;
        }

        /**
         * Build call for resetVerificationStep
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetVerificationStepCall(applicantId, idDocSetType, _callback);
        }


        /**
         * Execute resetVerificationStep request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resetVerificationStepWithHttpInfo(applicantId, idDocSetType);
        }

        /**
         * Execute resetVerificationStep request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resetVerificationStepWithHttpInfo(applicantId, idDocSetType);
        }

        /**
         * Execute resetVerificationStep request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resetVerificationStepAsync(applicantId, idDocSetType, _callback);
        }
    }

    /**
     * Reset verification step
     * Resets the specified verification step.
     * @param applicantId A unique applicant identifier. (required)
     * @param idDocSetType A [step name](ref:reset-single-verification-step#available-steps-to-reset) to reset. (required)
     * @return ResetVerificationStepRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResetVerificationStepRequestBuilder resetVerificationStep(String applicantId, String idDocSetType) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        if (idDocSetType == null) throw new IllegalArgumentException("\"idDocSetType\" is required but got null");
            

        return new ResetVerificationStepRequestBuilder(applicantId, idDocSetType);
    }
    private okhttp3.Call sandboxVerificationResponseCall(String applicantId, ApplicantSandboxVerificationResponseRequest applicantSandboxVerificationResponseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantSandboxVerificationResponseRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/status/testCompleted"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxVerificationResponseValidateBeforeCall(String applicantId, ApplicantSandboxVerificationResponseRequest applicantSandboxVerificationResponseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling sandboxVerificationResponse(Async)");
        }

        return sandboxVerificationResponseCall(applicantId, applicantSandboxVerificationResponseRequest, _callback);

    }


    private ApiResponse<Void> sandboxVerificationResponseWithHttpInfo(String applicantId, ApplicantSandboxVerificationResponseRequest applicantSandboxVerificationResponseRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxVerificationResponseValidateBeforeCall(applicantId, applicantSandboxVerificationResponseRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sandboxVerificationResponseAsync(String applicantId, ApplicantSandboxVerificationResponseRequest applicantSandboxVerificationResponseRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxVerificationResponseValidateBeforeCall(applicantId, applicantSandboxVerificationResponseRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SandboxVerificationResponseRequestBuilder {
        private final String reviewAnswer;
        private final List<String> rejectLabels;
        private final String applicantId;
        private String reviewRejectType;
        private String clientComment;
        private String moderationComment;

        private SandboxVerificationResponseRequestBuilder(String reviewAnswer, List<String> rejectLabels, String applicantId) {
            this.reviewAnswer = reviewAnswer;
            this.rejectLabels = rejectLabels;
            this.applicantId = applicantId;
        }

        /**
         * Set reviewRejectType
         * @param reviewRejectType A &#x60;FINAL&#x60; or &#x60;RETRY&#x60; rejection type indicating whether a rejection should be final or temporary. (optional)
         * @return SandboxVerificationResponseRequestBuilder
         */
        public SandboxVerificationResponseRequestBuilder reviewRejectType(String reviewRejectType) {
            this.reviewRejectType = reviewRejectType;
            return this;
        }
        
        /**
         * Set clientComment
         * @param clientComment A rejection comment that should not be available to your applicants. (optional)
         * @return SandboxVerificationResponseRequestBuilder
         */
        public SandboxVerificationResponseRequestBuilder clientComment(String clientComment) {
            this.clientComment = clientComment;
            return this;
        }
        
        /**
         * Set moderationComment
         * @param moderationComment A comment that supposed to be shown to the applicant, explaining the reason of rejection. (optional)
         * @return SandboxVerificationResponseRequestBuilder
         */
        public SandboxVerificationResponseRequestBuilder moderationComment(String moderationComment) {
            this.moderationComment = moderationComment;
            return this;
        }
        
        /**
         * Build call for sandboxVerificationResponse
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantSandboxVerificationResponseRequest applicantSandboxVerificationResponseRequest = buildBodyParams();
            return sandboxVerificationResponseCall(applicantId, applicantSandboxVerificationResponseRequest, _callback);
        }

        private ApplicantSandboxVerificationResponseRequest buildBodyParams() {
            ApplicantSandboxVerificationResponseRequest applicantSandboxVerificationResponseRequest = new ApplicantSandboxVerificationResponseRequest();
            applicantSandboxVerificationResponseRequest.reviewAnswer(this.reviewAnswer);
            applicantSandboxVerificationResponseRequest.rejectLabels(this.rejectLabels);
            applicantSandboxVerificationResponseRequest.reviewRejectType(this.reviewRejectType);
            applicantSandboxVerificationResponseRequest.clientComment(this.clientComment);
            applicantSandboxVerificationResponseRequest.moderationComment(this.moderationComment);
            return applicantSandboxVerificationResponseRequest;
        }

        /**
         * Execute sandboxVerificationResponse request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantSandboxVerificationResponseRequest applicantSandboxVerificationResponseRequest = buildBodyParams();
            sandboxVerificationResponseWithHttpInfo(applicantId, applicantSandboxVerificationResponseRequest);
        }

        /**
         * Execute sandboxVerificationResponse request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantSandboxVerificationResponseRequest applicantSandboxVerificationResponseRequest = buildBodyParams();
            return sandboxVerificationResponseWithHttpInfo(applicantId, applicantSandboxVerificationResponseRequest);
        }

        /**
         * Execute sandboxVerificationResponse request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantSandboxVerificationResponseRequest applicantSandboxVerificationResponseRequest = buildBodyParams();
            return sandboxVerificationResponseAsync(applicantId, applicantSandboxVerificationResponseRequest, _callback);
        }
    }

    /**
     * Set review for applicant in sandbox
     * Simulates a verification reposnose.
     * @param applicantId A unique applicant identifier. (required)
     * @return SandboxVerificationResponseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SandboxVerificationResponseRequestBuilder sandboxVerificationResponse(String reviewAnswer, List<String> rejectLabels, String applicantId) throws IllegalArgumentException {
        if (reviewAnswer == null) throw new IllegalArgumentException("\"reviewAnswer\" is required but got null");
            

        if (rejectLabels == null) throw new IllegalArgumentException("\"rejectLabels\" is required but got null");
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new SandboxVerificationResponseRequestBuilder(reviewAnswer, rejectLabels, applicantId);
    }
    private okhttp3.Call submitDataNoDocVerificationCall(String applicantId, ApplicantSubmitDataNoDocVerificationRequest applicantSubmitDataNoDocVerificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantSubmitDataNoDocVerificationRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/ekyc/submit"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitDataNoDocVerificationValidateBeforeCall(String applicantId, ApplicantSubmitDataNoDocVerificationRequest applicantSubmitDataNoDocVerificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling submitDataNoDocVerification(Async)");
        }

        return submitDataNoDocVerificationCall(applicantId, applicantSubmitDataNoDocVerificationRequest, _callback);

    }


    private ApiResponse<Void> submitDataNoDocVerificationWithHttpInfo(String applicantId, ApplicantSubmitDataNoDocVerificationRequest applicantSubmitDataNoDocVerificationRequest) throws ApiException {
        okhttp3.Call localVarCall = submitDataNoDocVerificationValidateBeforeCall(applicantId, applicantSubmitDataNoDocVerificationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitDataNoDocVerificationAsync(String applicantId, ApplicantSubmitDataNoDocVerificationRequest applicantSubmitDataNoDocVerificationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitDataNoDocVerificationValidateBeforeCall(applicantId, applicantSubmitDataNoDocVerificationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitDataNoDocVerificationRequestBuilder {
        private final ApplicantSubmitDataNoDocVerificationRequestInfo info;
        private final String applicantId;

        private SubmitDataNoDocVerificationRequestBuilder(ApplicantSubmitDataNoDocVerificationRequestInfo info, String applicantId) {
            this.info = info;
            this.applicantId = applicantId;
        }

        /**
         * Build call for submitDataNoDocVerification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantSubmitDataNoDocVerificationRequest applicantSubmitDataNoDocVerificationRequest = buildBodyParams();
            return submitDataNoDocVerificationCall(applicantId, applicantSubmitDataNoDocVerificationRequest, _callback);
        }

        private ApplicantSubmitDataNoDocVerificationRequest buildBodyParams() {
            ApplicantSubmitDataNoDocVerificationRequest applicantSubmitDataNoDocVerificationRequest = new ApplicantSubmitDataNoDocVerificationRequest();
            applicantSubmitDataNoDocVerificationRequest.info(this.info);
            return applicantSubmitDataNoDocVerificationRequest;
        }

        /**
         * Execute submitDataNoDocVerification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantSubmitDataNoDocVerificationRequest applicantSubmitDataNoDocVerificationRequest = buildBodyParams();
            submitDataNoDocVerificationWithHttpInfo(applicantId, applicantSubmitDataNoDocVerificationRequest);
        }

        /**
         * Execute submitDataNoDocVerification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantSubmitDataNoDocVerificationRequest applicantSubmitDataNoDocVerificationRequest = buildBodyParams();
            return submitDataNoDocVerificationWithHttpInfo(applicantId, applicantSubmitDataNoDocVerificationRequest);
        }

        /**
         * Execute submitDataNoDocVerification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantSubmitDataNoDocVerificationRequest applicantSubmitDataNoDocVerificationRequest = buildBodyParams();
            return submitDataNoDocVerificationAsync(applicantId, applicantSubmitDataNoDocVerificationRequest, _callback);
        }
    }

    /**
     * Submit applicant data
     * Sends applicant data for no-document verification.
     * @param applicantId A unique applicant identifier. (required)
     * @return SubmitDataNoDocVerificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SubmitDataNoDocVerificationRequestBuilder submitDataNoDocVerification(ApplicantSubmitDataNoDocVerificationRequestInfo info, String applicantId) throws IllegalArgumentException {
        if (info == null) throw new IllegalArgumentException("\"info\" is required but got null");
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new SubmitDataNoDocVerificationRequestBuilder(info, applicantId);
    }
    private okhttp3.Call submitPaymentMethodCall(String xExternalActionId, String applicantId, Boolean requireSelfie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/applicantActions/-/forApplicant/{applicantId}/paymentMethod"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requireSelfie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requireSelfie", requireSelfie));
        }

        if (xExternalActionId != null) {
            localVarHeaderParams.put("X-External-Action-Id", localVarApiClient.parameterToString(xExternalActionId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitPaymentMethodValidateBeforeCall(String xExternalActionId, String applicantId, Boolean requireSelfie, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xExternalActionId' is set
        if (xExternalActionId == null) {
            throw new ApiException("Missing the required parameter 'xExternalActionId' when calling submitPaymentMethod(Async)");
        }

        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling submitPaymentMethod(Async)");
        }

        return submitPaymentMethodCall(xExternalActionId, applicantId, requireSelfie, _callback);

    }


    private ApiResponse<Void> submitPaymentMethodWithHttpInfo(String xExternalActionId, String applicantId, Boolean requireSelfie) throws ApiException {
        okhttp3.Call localVarCall = submitPaymentMethodValidateBeforeCall(xExternalActionId, applicantId, requireSelfie, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitPaymentMethodAsync(String xExternalActionId, String applicantId, Boolean requireSelfie, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitPaymentMethodValidateBeforeCall(xExternalActionId, applicantId, requireSelfie, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitPaymentMethodRequestBuilder {
        private final String xExternalActionId;
        private final String applicantId;
        private Boolean requireSelfie;

        private SubmitPaymentMethodRequestBuilder(String xExternalActionId, String applicantId) {
            this.xExternalActionId = xExternalActionId;
            this.applicantId = applicantId;
        }

        /**
         * Set requireSelfie
         * @param requireSelfie Sets the video selfie at &#x60;requiredIdDocs&#x60; for the action. (optional, default to false)
         * @return SubmitPaymentMethodRequestBuilder
         */
        public SubmitPaymentMethodRequestBuilder requireSelfie(Boolean requireSelfie) {
            this.requireSelfie = requireSelfie;
            return this;
        }
        
        /**
         * Build call for submitPaymentMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return submitPaymentMethodCall(xExternalActionId, applicantId, requireSelfie, _callback);
        }


        /**
         * Execute submitPaymentMethod request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            submitPaymentMethodWithHttpInfo(xExternalActionId, applicantId, requireSelfie);
        }

        /**
         * Execute submitPaymentMethod request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return submitPaymentMethodWithHttpInfo(xExternalActionId, applicantId, requireSelfie);
        }

        /**
         * Execute submitPaymentMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return submitPaymentMethodAsync(xExternalActionId, applicantId, requireSelfie, _callback);
        }
    }

    /**
     * Submission
     * Submits a payment method.
     * @param xExternalActionId Use &#x60;externalActionId&#x60; if you intend to [initialize SDK](ref:about-applicant-actions) for that particular action. (required)
     * @param applicantId A unique applicant identifier. (required)
     * @return SubmitPaymentMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SubmitPaymentMethodRequestBuilder submitPaymentMethod(String xExternalActionId, String applicantId) throws IllegalArgumentException {
        if (xExternalActionId == null) throw new IllegalArgumentException("\"xExternalActionId\" is required but got null");
            

        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new SubmitPaymentMethodRequestBuilder(xExternalActionId, applicantId);
    }
    private okhttp3.Call submitTransactionDataCall(String applicantId, ApplicantSubmitTransactionDataRequest applicantSubmitTransactionDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantSubmitTransactionDataRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/kyt/txns/-/data"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitTransactionDataValidateBeforeCall(String applicantId, ApplicantSubmitTransactionDataRequest applicantSubmitTransactionDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling submitTransactionData(Async)");
        }

        return submitTransactionDataCall(applicantId, applicantSubmitTransactionDataRequest, _callback);

    }


    private ApiResponse<Void> submitTransactionDataWithHttpInfo(String applicantId, ApplicantSubmitTransactionDataRequest applicantSubmitTransactionDataRequest) throws ApiException {
        okhttp3.Call localVarCall = submitTransactionDataValidateBeforeCall(applicantId, applicantSubmitTransactionDataRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitTransactionDataAsync(String applicantId, ApplicantSubmitTransactionDataRequest applicantSubmitTransactionDataRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitTransactionDataValidateBeforeCall(applicantId, applicantSubmitTransactionDataRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitTransactionDataRequestBuilder {
        private final ApplicantSubmitTransactionDataRequestInfo info;
        private final String txnId;
        private final ApplicantSubmitTransactionDataRequestApplicant applicant;
        private final ApplicantSubmitTransactionDataRequestCounterparty counterparty;
        private final String applicantId;
        private LocalDate txnDate;
        private String type;
        private String sourceKey;
        private ApplicantSubmitTransactionDataRequestProps props;

        private SubmitTransactionDataRequestBuilder(ApplicantSubmitTransactionDataRequestInfo info, String txnId, ApplicantSubmitTransactionDataRequestApplicant applicant, ApplicantSubmitTransactionDataRequestCounterparty counterparty, String applicantId) {
            this.info = info;
            this.txnId = txnId;
            this.applicant = applicant;
            this.counterparty = counterparty;
            this.applicantId = applicantId;
        }

        /**
         * Set txnDate
         * @param txnDate Date and time when the transaction was initiated (format &#x60;yyyy-MM-dd HH:mm:ss+XXXX&#x60;, e.g. 2022-11-24 23:37:02+0000). (optional)
         * @return SubmitTransactionDataRequestBuilder
         */
        public SubmitTransactionDataRequestBuilder txnDate(LocalDate txnDate) {
            this.txnDate = txnDate;
            return this;
        }
        
        /**
         * Set type
         * @param type A transaction type. Expects values: &lt;/br&gt; &lt;ul&gt;   &lt;li&gt;&lt;code&gt;finance&lt;/code&gt;(default)&lt;/li&gt;   &lt;li&gt;&lt;code&gt;gamblingBet&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;gamblingLimitChange&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;gamblingBonusChange&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;kyc&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;travelRule&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;userPlatformEvent&lt;/code&gt;&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;login&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;signup&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;passwordChange&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;twoFaReset&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/ul&gt; (optional, default to finance)
         * @return SubmitTransactionDataRequestBuilder
         */
        public SubmitTransactionDataRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set sourceKey
         * @param sourceKey A source key indication to separate access to transactions. (optional)
         * @return SubmitTransactionDataRequestBuilder
         */
        public SubmitTransactionDataRequestBuilder sourceKey(String sourceKey) {
            this.sourceKey = sourceKey;
            return this;
        }
        
        /**
         * Set props
         * @param props  (optional)
         * @return SubmitTransactionDataRequestBuilder
         */
        public SubmitTransactionDataRequestBuilder props(ApplicantSubmitTransactionDataRequestProps props) {
            this.props = props;
            return this;
        }
        
        /**
         * Build call for submitTransactionData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantSubmitTransactionDataRequest applicantSubmitTransactionDataRequest = buildBodyParams();
            return submitTransactionDataCall(applicantId, applicantSubmitTransactionDataRequest, _callback);
        }

        private ApplicantSubmitTransactionDataRequest buildBodyParams() {
            ApplicantSubmitTransactionDataRequest applicantSubmitTransactionDataRequest = new ApplicantSubmitTransactionDataRequest();
            applicantSubmitTransactionDataRequest.info(this.info);
            applicantSubmitTransactionDataRequest.txnId(this.txnId);
            applicantSubmitTransactionDataRequest.txnDate(this.txnDate);
            applicantSubmitTransactionDataRequest.applicant(this.applicant);
            applicantSubmitTransactionDataRequest.counterparty(this.counterparty);
            applicantSubmitTransactionDataRequest.type(this.type);
            applicantSubmitTransactionDataRequest.sourceKey(this.sourceKey);
            applicantSubmitTransactionDataRequest.props(this.props);
            return applicantSubmitTransactionDataRequest;
        }

        /**
         * Execute submitTransactionData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantSubmitTransactionDataRequest applicantSubmitTransactionDataRequest = buildBodyParams();
            submitTransactionDataWithHttpInfo(applicantId, applicantSubmitTransactionDataRequest);
        }

        /**
         * Execute submitTransactionData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantSubmitTransactionDataRequest applicantSubmitTransactionDataRequest = buildBodyParams();
            return submitTransactionDataWithHttpInfo(applicantId, applicantSubmitTransactionDataRequest);
        }

        /**
         * Execute submitTransactionData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantSubmitTransactionDataRequest applicantSubmitTransactionDataRequest = buildBodyParams();
            return submitTransactionDataAsync(applicantId, applicantSubmitTransactionDataRequest, _callback);
        }
    }

    /**
     * Submit transaction for existing applicant
     * Initiates transaction processing.
     * @param applicantId A unique identification number of the applicant who passed user verification (KYC). If you do no have such an applicant, use [Submit transaction for non-existing applicant](ref:submit-transaction-for-non-existing-applicant) instead. (required)
     * @return SubmitTransactionDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SubmitTransactionDataRequestBuilder submitTransactionData(ApplicantSubmitTransactionDataRequestInfo info, String txnId, ApplicantSubmitTransactionDataRequestApplicant applicant, ApplicantSubmitTransactionDataRequestCounterparty counterparty, String applicantId) throws IllegalArgumentException {
        if (info == null) throw new IllegalArgumentException("\"info\" is required but got null");
        if (txnId == null) throw new IllegalArgumentException("\"txnId\" is required but got null");
            

        if (applicant == null) throw new IllegalArgumentException("\"applicant\" is required but got null");
        if (counterparty == null) throw new IllegalArgumentException("\"counterparty\" is required but got null");
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new SubmitTransactionDataRequestBuilder(info, txnId, applicant, counterparty, applicantId);
    }
    private okhttp3.Call submitTransactionForNonExistingCall(String levelName, ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantSubmitTransactionForNonExistingRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/-/kyt/txns/-/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (levelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("levelName", levelName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitTransactionForNonExistingValidateBeforeCall(String levelName, ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'levelName' is set
        if (levelName == null) {
            throw new ApiException("Missing the required parameter 'levelName' when calling submitTransactionForNonExisting(Async)");
        }

        return submitTransactionForNonExistingCall(levelName, applicantSubmitTransactionForNonExistingRequest, _callback);

    }


    private ApiResponse<Void> submitTransactionForNonExistingWithHttpInfo(String levelName, ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest) throws ApiException {
        okhttp3.Call localVarCall = submitTransactionForNonExistingValidateBeforeCall(levelName, applicantSubmitTransactionForNonExistingRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitTransactionForNonExistingAsync(String levelName, ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitTransactionForNonExistingValidateBeforeCall(levelName, applicantSubmitTransactionForNonExistingRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitTransactionForNonExistingRequestBuilder {
        private final ApplicantSubmitTransactionDataRequestInfo info;
        private final String txnId;
        private final ApplicantSubmitTransactionForNonExistingRequestApplicant applicant;
        private final ApplicantSubmitTransactionForNonExistingRequestCounterparty counterparty;
        private final String levelName;
        private LocalDate txnDate;
        private Object props;
        private String type;
        private String sourceKey;

        private SubmitTransactionForNonExistingRequestBuilder(ApplicantSubmitTransactionDataRequestInfo info, String txnId, ApplicantSubmitTransactionForNonExistingRequestApplicant applicant, ApplicantSubmitTransactionForNonExistingRequestCounterparty counterparty, String levelName) {
            this.info = info;
            this.txnId = txnId;
            this.applicant = applicant;
            this.counterparty = counterparty;
            this.levelName = levelName;
        }

        /**
         * Set txnDate
         * @param txnDate Date and time when the transaction was initiated (format &#x60;yyyy-MM-dd HH:mm:ss+XXXX&#x60;, e.g. 2022-11-24 23:37:02+0000). (optional)
         * @return SubmitTransactionForNonExistingRequestBuilder
         */
        public SubmitTransactionForNonExistingRequestBuilder txnDate(LocalDate txnDate) {
            this.txnDate = txnDate;
            return this;
        }
        
        /**
         * Set props
         * @param props Transaction properties. Map of strings (JSON) of custom keys and string values. (optional)
         * @return SubmitTransactionForNonExistingRequestBuilder
         */
        public SubmitTransactionForNonExistingRequestBuilder props(Object props) {
            this.props = props;
            return this;
        }
        
        /**
         * Set type
         * @param type A transaction type. Expects values: &lt;/br&gt; &lt;ul&gt;   &lt;li&gt;&lt;code&gt;finance&lt;/code&gt;(default)&lt;/li&gt;   &lt;li&gt;&lt;code&gt;gamblingBet&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;gamblingLimitChange&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;gamblingBonusChange&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;kyc&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;travelRule&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;userPlatformEvent&lt;/code&gt;&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;login&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;signup&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;passwordChange&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;twoFaReset&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/ul&gt; (optional, default to finance)
         * @return SubmitTransactionForNonExistingRequestBuilder
         */
        public SubmitTransactionForNonExistingRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set sourceKey
         * @param sourceKey A source key indication to separate access to transactions. (optional)
         * @return SubmitTransactionForNonExistingRequestBuilder
         */
        public SubmitTransactionForNonExistingRequestBuilder sourceKey(String sourceKey) {
            this.sourceKey = sourceKey;
            return this;
        }
        
        /**
         * Build call for submitTransactionForNonExisting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest = buildBodyParams();
            return submitTransactionForNonExistingCall(levelName, applicantSubmitTransactionForNonExistingRequest, _callback);
        }

        private ApplicantSubmitTransactionForNonExistingRequest buildBodyParams() {
            ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest = new ApplicantSubmitTransactionForNonExistingRequest();
            applicantSubmitTransactionForNonExistingRequest.info(this.info);
            applicantSubmitTransactionForNonExistingRequest.txnId(this.txnId);
            applicantSubmitTransactionForNonExistingRequest.txnDate(this.txnDate);
            applicantSubmitTransactionForNonExistingRequest.props(this.props);
            applicantSubmitTransactionForNonExistingRequest.applicant(this.applicant);
            applicantSubmitTransactionForNonExistingRequest.counterparty(this.counterparty);
            applicantSubmitTransactionForNonExistingRequest.type(this.type);
            applicantSubmitTransactionForNonExistingRequest.sourceKey(this.sourceKey);
            return applicantSubmitTransactionForNonExistingRequest;
        }

        /**
         * Execute submitTransactionForNonExisting request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest = buildBodyParams();
            submitTransactionForNonExistingWithHttpInfo(levelName, applicantSubmitTransactionForNonExistingRequest);
        }

        /**
         * Execute submitTransactionForNonExisting request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest = buildBodyParams();
            return submitTransactionForNonExistingWithHttpInfo(levelName, applicantSubmitTransactionForNonExistingRequest);
        }

        /**
         * Execute submitTransactionForNonExisting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantSubmitTransactionForNonExistingRequest applicantSubmitTransactionForNonExistingRequest = buildBodyParams();
            return submitTransactionForNonExistingAsync(levelName, applicantSubmitTransactionForNonExistingRequest, _callback);
        }
    }

    /**
     * Submit transaction for non-existing applicant
     * Initiates transaction processing for non-existing applicants.
     * @param levelName A [verification level](https://docs.sumsub.com/reference) name. Case-sensitive and has to be created in the same environment. If contains reserved characters (e.g., &#x60;@&#x60;, &#x60;+\&quot;&#x60;, white spaces as &#x60;%20&#x60;), it should be URL-encoded, otherwise you may get signature mismatch. (required)
     * @return SubmitTransactionForNonExistingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SubmitTransactionForNonExistingRequestBuilder submitTransactionForNonExisting(ApplicantSubmitTransactionDataRequestInfo info, String txnId, ApplicantSubmitTransactionForNonExistingRequestApplicant applicant, ApplicantSubmitTransactionForNonExistingRequestCounterparty counterparty, String levelName) throws IllegalArgumentException {
        if (info == null) throw new IllegalArgumentException("\"info\" is required but got null");
        if (txnId == null) throw new IllegalArgumentException("\"txnId\" is required but got null");
            

        if (applicant == null) throw new IllegalArgumentException("\"applicant\" is required but got null");
        if (counterparty == null) throw new IllegalArgumentException("\"counterparty\" is required but got null");
        if (levelName == null) throw new IllegalArgumentException("\"levelName\" is required but got null");
            

        return new SubmitTransactionForNonExistingRequestBuilder(info, txnId, applicant, counterparty, levelName);
    }
    private okhttp3.Call updateFixedInfoCall(String applicantId, ApplicantUpdateFixedInfoRequest applicantUpdateFixedInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantUpdateFixedInfoRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants/{applicantId}/fixedInfo"
            .replace("{" + "applicantId" + "}", localVarApiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFixedInfoValidateBeforeCall(String applicantId, ApplicantUpdateFixedInfoRequest applicantUpdateFixedInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling updateFixedInfo(Async)");
        }

        return updateFixedInfoCall(applicantId, applicantUpdateFixedInfoRequest, _callback);

    }


    private ApiResponse<Void> updateFixedInfoWithHttpInfo(String applicantId, ApplicantUpdateFixedInfoRequest applicantUpdateFixedInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFixedInfoValidateBeforeCall(applicantId, applicantUpdateFixedInfoRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateFixedInfoAsync(String applicantId, ApplicantUpdateFixedInfoRequest applicantUpdateFixedInfoRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFixedInfoValidateBeforeCall(applicantId, applicantUpdateFixedInfoRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateFixedInfoRequestBuilder {
        private final String applicantId;
        private String firstName;
        private String lastName;
        private String middleName;
        private String firstNameEn;
        private String lastNameEn;
        private String middleNameEn;
        private String legalName;
        private String gender;
        private String dob;
        private String placeOfBirth;
        private String countryOfBirth;
        private String stateOfBirth;
        private String country;
        private String nationality;
        private List<Object> addresses;
        private String tin;

        private UpdateFixedInfoRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Set firstName
         * @param firstName The first name of the applicant. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name of the applicant. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName The middle name of the applicant. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set firstNameEn
         * @param firstNameEn Automatic transliteration of the first name. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder firstNameEn(String firstNameEn) {
            this.firstNameEn = firstNameEn;
            return this;
        }
        
        /**
         * Set lastNameEn
         * @param lastNameEn Automatic transliteration of the last name. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder lastNameEn(String lastNameEn) {
            this.lastNameEn = lastNameEn;
            return this;
        }
        
        /**
         * Set middleNameEn
         * @param middleNameEn Automatic transliteration of the middle name. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder middleNameEn(String middleNameEn) {
            this.middleNameEn = middleNameEn;
            return this;
        }
        
        /**
         * Set legalName
         * @param legalName Legal name. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder legalName(String legalName) {
            this.legalName = legalName;
            return this;
        }
        
        /**
         * Set gender
         * @param gender An applicant gender (&#x60;M&#x60; or &#x60;F&#x60;). (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set dob
         * @param dob Applicant date of birth (format &#x60;YYYY-mm-dd&#x60;, e.g. 2001-09-25). (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder dob(String dob) {
            this.dob = dob;
            return this;
        }
        
        /**
         * Set placeOfBirth
         * @param placeOfBirth The applicant birthplace. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder placeOfBirth(String placeOfBirth) {
            this.placeOfBirth = placeOfBirth;
            return this;
        }
        
        /**
         * Set countryOfBirth
         * @param countryOfBirth Applicant country of birth. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder countryOfBirth(String countryOfBirth) {
            this.countryOfBirth = countryOfBirth;
            return this;
        }
        
        /**
         * Set stateOfBirth
         * @param stateOfBirth Applicant state of birth. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder stateOfBirth(String stateOfBirth) {
            this.stateOfBirth = stateOfBirth;
            return this;
        }
        
        /**
         * Set country
         * @param country Alpha-3 country code (e.g. &#x60;DEU&#x60; or &#x60;GBR&#x60;). (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality Alpha-3 country code. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set addresses
         * @param addresses List of applicant addresses. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder addresses(List<Object> addresses) {
            this.addresses = addresses;
            return this;
        }
        
        /**
         * Set tin
         * @param tin Tax identification number. (optional)
         * @return UpdateFixedInfoRequestBuilder
         */
        public UpdateFixedInfoRequestBuilder tin(String tin) {
            this.tin = tin;
            return this;
        }
        
        /**
         * Build call for updateFixedInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantUpdateFixedInfoRequest applicantUpdateFixedInfoRequest = buildBodyParams();
            return updateFixedInfoCall(applicantId, applicantUpdateFixedInfoRequest, _callback);
        }

        private ApplicantUpdateFixedInfoRequest buildBodyParams() {
            ApplicantUpdateFixedInfoRequest applicantUpdateFixedInfoRequest = new ApplicantUpdateFixedInfoRequest();
            applicantUpdateFixedInfoRequest.firstName(this.firstName);
            applicantUpdateFixedInfoRequest.lastName(this.lastName);
            applicantUpdateFixedInfoRequest.middleName(this.middleName);
            applicantUpdateFixedInfoRequest.firstNameEn(this.firstNameEn);
            applicantUpdateFixedInfoRequest.lastNameEn(this.lastNameEn);
            applicantUpdateFixedInfoRequest.middleNameEn(this.middleNameEn);
            applicantUpdateFixedInfoRequest.legalName(this.legalName);
            applicantUpdateFixedInfoRequest.gender(this.gender);
            applicantUpdateFixedInfoRequest.dob(this.dob);
            applicantUpdateFixedInfoRequest.placeOfBirth(this.placeOfBirth);
            applicantUpdateFixedInfoRequest.countryOfBirth(this.countryOfBirth);
            applicantUpdateFixedInfoRequest.stateOfBirth(this.stateOfBirth);
            applicantUpdateFixedInfoRequest.country(this.country);
            applicantUpdateFixedInfoRequest.nationality(this.nationality);
            applicantUpdateFixedInfoRequest.addresses(this.addresses);
            applicantUpdateFixedInfoRequest.tin(this.tin);
            return applicantUpdateFixedInfoRequest;
        }

        /**
         * Execute updateFixedInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantUpdateFixedInfoRequest applicantUpdateFixedInfoRequest = buildBodyParams();
            updateFixedInfoWithHttpInfo(applicantId, applicantUpdateFixedInfoRequest);
        }

        /**
         * Execute updateFixedInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantUpdateFixedInfoRequest applicantUpdateFixedInfoRequest = buildBodyParams();
            return updateFixedInfoWithHttpInfo(applicantId, applicantUpdateFixedInfoRequest);
        }

        /**
         * Execute updateFixedInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantUpdateFixedInfoRequest applicantUpdateFixedInfoRequest = buildBodyParams();
            return updateFixedInfoAsync(applicantId, applicantUpdateFixedInfoRequest, _callback);
        }
    }

    /**
     * Change provided information
     * Updates information provided when [creating an applicant](ref:create-applicants).
     * @param applicantId A unique applicant identifier. (required)
     * @return UpdateFixedInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFixedInfoRequestBuilder updateFixedInfo(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new UpdateFixedInfoRequestBuilder(applicantId);
    }
    private okhttp3.Call updateTopLevelInfoCall(ApplicantUpdateTopLevelInfoRequest applicantUpdateTopLevelInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicantUpdateTopLevelInfoRequest;

        // create path and map variables
        String localVarPath = "/resources/applicants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTopLevelInfoValidateBeforeCall(ApplicantUpdateTopLevelInfoRequest applicantUpdateTopLevelInfoRequest, final ApiCallback _callback) throws ApiException {
        return updateTopLevelInfoCall(applicantUpdateTopLevelInfoRequest, _callback);

    }


    private ApiResponse<Void> updateTopLevelInfoWithHttpInfo(ApplicantUpdateTopLevelInfoRequest applicantUpdateTopLevelInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTopLevelInfoValidateBeforeCall(applicantUpdateTopLevelInfoRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateTopLevelInfoAsync(ApplicantUpdateTopLevelInfoRequest applicantUpdateTopLevelInfoRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTopLevelInfoValidateBeforeCall(applicantUpdateTopLevelInfoRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateTopLevelInfoRequestBuilder {
        private final String id;
        private String externalUserId;
        private String email;
        private String phone;
        private String sourceKey;
        private String lang;
        private List<Object> questionnaires;
        private List<Object> metadata;
        private Boolean deleted;

        private UpdateTopLevelInfoRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set externalUserId
         * @param externalUserId An external applicant identifier. (optional)
         * @return UpdateTopLevelInfoRequestBuilder
         */
        public UpdateTopLevelInfoRequestBuilder externalUserId(String externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }
        
        /**
         * Set email
         * @param email A new email address that you want to assign to the given applicant. (optional)
         * @return UpdateTopLevelInfoRequestBuilder
         */
        public UpdateTopLevelInfoRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set phone
         * @param phone A new phone number that you want to assign to the given applicant. (optional)
         * @return UpdateTopLevelInfoRequestBuilder
         */
        public UpdateTopLevelInfoRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set sourceKey
         * @param sourceKey A new [source key](https://docs.sumsub.com/reference) that you want to assign to the given applicant. (optional)
         * @return UpdateTopLevelInfoRequestBuilder
         */
        public UpdateTopLevelInfoRequestBuilder sourceKey(String sourceKey) {
            this.sourceKey = sourceKey;
            return this;
        }
        
        /**
         * Set lang
         * @param lang The language, in which the applicant should see the verification results. (optional)
         * @return UpdateTopLevelInfoRequestBuilder
         */
        public UpdateTopLevelInfoRequestBuilder lang(String lang) {
            this.lang = lang;
            return this;
        }
        
        /**
         * Set questionnaires
         * @param questionnaires A [questionnaire](https://docs.sumsub.com/reference) configuration with answers. (optional)
         * @return UpdateTopLevelInfoRequestBuilder
         */
        public UpdateTopLevelInfoRequestBuilder questionnaires(List<Object> questionnaires) {
            this.questionnaires = questionnaires;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Additional information about the applicant. (optional)
         * @return UpdateTopLevelInfoRequestBuilder
         */
        public UpdateTopLevelInfoRequestBuilder metadata(List<Object> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set deleted
         * @param deleted Marks an applicant as inactive if set to &#x60;true&#x60;. The applicant will not be considered a duplicate. SDKs will not initiate checks for this applicant. (optional)
         * @return UpdateTopLevelInfoRequestBuilder
         */
        public UpdateTopLevelInfoRequestBuilder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }
        
        /**
         * Build call for updateTopLevelInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicantUpdateTopLevelInfoRequest applicantUpdateTopLevelInfoRequest = buildBodyParams();
            return updateTopLevelInfoCall(applicantUpdateTopLevelInfoRequest, _callback);
        }

        private ApplicantUpdateTopLevelInfoRequest buildBodyParams() {
            ApplicantUpdateTopLevelInfoRequest applicantUpdateTopLevelInfoRequest = new ApplicantUpdateTopLevelInfoRequest();
            applicantUpdateTopLevelInfoRequest.id(this.id);
            applicantUpdateTopLevelInfoRequest.externalUserId(this.externalUserId);
            applicantUpdateTopLevelInfoRequest.email(this.email);
            applicantUpdateTopLevelInfoRequest.phone(this.phone);
            applicantUpdateTopLevelInfoRequest.sourceKey(this.sourceKey);
            applicantUpdateTopLevelInfoRequest.lang(this.lang);
            applicantUpdateTopLevelInfoRequest.questionnaires(this.questionnaires);
            applicantUpdateTopLevelInfoRequest.metadata(this.metadata);
            applicantUpdateTopLevelInfoRequest.deleted(this.deleted);
            return applicantUpdateTopLevelInfoRequest;
        }

        /**
         * Execute updateTopLevelInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicantUpdateTopLevelInfoRequest applicantUpdateTopLevelInfoRequest = buildBodyParams();
            updateTopLevelInfoWithHttpInfo(applicantUpdateTopLevelInfoRequest);
        }

        /**
         * Execute updateTopLevelInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicantUpdateTopLevelInfoRequest applicantUpdateTopLevelInfoRequest = buildBodyParams();
            return updateTopLevelInfoWithHttpInfo(applicantUpdateTopLevelInfoRequest);
        }

        /**
         * Execute updateTopLevelInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicantUpdateTopLevelInfoRequest applicantUpdateTopLevelInfoRequest = buildBodyParams();
            return updateTopLevelInfoAsync(applicantUpdateTopLevelInfoRequest, _callback);
        }
    }

    /**
     * Change top-level information
     * Changes existing verification level configuration.
     * @return UpdateTopLevelInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTopLevelInfoRequestBuilder updateTopLevelInfo(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateTopLevelInfoRequestBuilder(id);
    }
}
