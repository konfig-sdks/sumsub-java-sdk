/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CheckPerformNameCrossValidationRequest;
import com.konfigthis.client.model.CheckPerformNameCrossValidationRequest1;
import com.konfigthis.client.model.CheckPerformNameCrossValidationRequestIdDocsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CheckApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CheckApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CheckApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"X-App-Token\" is required but no API key was provided. Please set \"X-App-Token\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call additionalCompanyDataCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/checks/latest?type=COMPANY";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicantId", applicantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call additionalCompanyDataValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling additionalCompanyData(Async)");
        }

        return additionalCompanyDataCall(applicantId, _callback);

    }


    private ApiResponse<Void> additionalCompanyDataWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = additionalCompanyDataValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call additionalCompanyDataAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = additionalCompanyDataValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AdditionalCompanyDataRequestBuilder {
        private final String applicantId;

        private AdditionalCompanyDataRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for additionalCompanyData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return additionalCompanyDataCall(applicantId, _callback);
        }


        /**
         * Execute additionalCompanyData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            additionalCompanyDataWithHttpInfo(applicantId);
        }

        /**
         * Execute additionalCompanyData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return additionalCompanyDataWithHttpInfo(applicantId);
        }

        /**
         * Execute additionalCompanyData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return additionalCompanyDataAsync(applicantId, _callback);
        }
    }

    /**
     * Get additional company check data
     * Returns company check results.
     * @param applicantId A unique applicant identifier. (required)
     * @return AdditionalCompanyDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AdditionalCompanyDataRequestBuilder additionalCompanyData(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new AdditionalCompanyDataRequestBuilder(applicantId);
    }
    private okhttp3.Call additionalPoaDataCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/checks/latest?type=POA";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicantId", applicantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call additionalPoaDataValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling additionalPoaData(Async)");
        }

        return additionalPoaDataCall(applicantId, _callback);

    }


    private ApiResponse<Void> additionalPoaDataWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = additionalPoaDataValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call additionalPoaDataAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = additionalPoaDataValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AdditionalPoaDataRequestBuilder {
        private final String applicantId;

        private AdditionalPoaDataRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for additionalPoaData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return additionalPoaDataCall(applicantId, _callback);
        }


        /**
         * Execute additionalPoaData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            additionalPoaDataWithHttpInfo(applicantId);
        }

        /**
         * Execute additionalPoaData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return additionalPoaDataWithHttpInfo(applicantId);
        }

        /**
         * Execute additionalPoaData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return additionalPoaDataAsync(applicantId, _callback);
        }
    }

    /**
     * Get additional PoA data
     * Returns PoA data.
     * @param applicantId A unique applicant identifier. (required)
     * @return AdditionalPoaDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AdditionalPoaDataRequestBuilder additionalPoaData(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new AdditionalPoaDataRequestBuilder(applicantId);
    }
    private okhttp3.Call emailConfirmationResultsCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/checks/latest?type=EMAIL_CONFIRMATION";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicantId", applicantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emailConfirmationResultsValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling emailConfirmationResults(Async)");
        }

        return emailConfirmationResultsCall(applicantId, _callback);

    }


    private ApiResponse<Void> emailConfirmationResultsWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = emailConfirmationResultsValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call emailConfirmationResultsAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = emailConfirmationResultsValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class EmailConfirmationResultsRequestBuilder {
        private final String applicantId;

        private EmailConfirmationResultsRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for emailConfirmationResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return emailConfirmationResultsCall(applicantId, _callback);
        }


        /**
         * Execute emailConfirmationResults request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            emailConfirmationResultsWithHttpInfo(applicantId);
        }

        /**
         * Execute emailConfirmationResults request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return emailConfirmationResultsWithHttpInfo(applicantId);
        }

        /**
         * Execute emailConfirmationResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return emailConfirmationResultsAsync(applicantId, _callback);
        }
    }

    /**
     * Get email confirmation check results
     * Returns email confirmation check results.
     * @param applicantId A unique applicant identifier. (required)
     * @return EmailConfirmationResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmailConfirmationResultsRequestBuilder emailConfirmationResults(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new EmailConfirmationResultsRequestBuilder(applicantId);
    }
    private okhttp3.Call ipCheckResultsCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/checks/latest?type=IP_CHECK";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicantId", applicantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipCheckResultsValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling ipCheckResults(Async)");
        }

        return ipCheckResultsCall(applicantId, _callback);

    }


    private ApiResponse<Void> ipCheckResultsWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = ipCheckResultsValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call ipCheckResultsAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipCheckResultsValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class IpCheckResultsRequestBuilder {
        private final String applicantId;

        private IpCheckResultsRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for ipCheckResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return ipCheckResultsCall(applicantId, _callback);
        }


        /**
         * Execute ipCheckResults request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ipCheckResultsWithHttpInfo(applicantId);
        }

        /**
         * Execute ipCheckResults request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return ipCheckResultsWithHttpInfo(applicantId);
        }

        /**
         * Execute ipCheckResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return ipCheckResultsAsync(applicantId, _callback);
        }
    }

    /**
     * Get IP check results
     * Returns IP check results.
     * @param applicantId A unique applicant identifier. (required)
     * @return IpCheckResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpCheckResultsRequestBuilder ipCheckResults(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new IpCheckResultsRequestBuilder(applicantId);
    }
    private okhttp3.Call performNameCrossValidationCall(String comparisonMode, CheckPerformNameCrossValidationRequest checkPerformNameCrossValidationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkPerformNameCrossValidationRequest;

        // create path and map variables
        String localVarPath = "/resources/checks/crossCheck?comparisonMode={comparisonMode}"
            .replace("{" + "comparisonMode" + "}", localVarApiClient.escapeString(comparisonMode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performNameCrossValidationValidateBeforeCall(String comparisonMode, CheckPerformNameCrossValidationRequest checkPerformNameCrossValidationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'comparisonMode' is set
        if (comparisonMode == null) {
            throw new ApiException("Missing the required parameter 'comparisonMode' when calling performNameCrossValidation(Async)");
        }

        return performNameCrossValidationCall(comparisonMode, checkPerformNameCrossValidationRequest, _callback);

    }


    private ApiResponse<Void> performNameCrossValidationWithHttpInfo(String comparisonMode, CheckPerformNameCrossValidationRequest checkPerformNameCrossValidationRequest) throws ApiException {
        okhttp3.Call localVarCall = performNameCrossValidationValidateBeforeCall(comparisonMode, checkPerformNameCrossValidationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call performNameCrossValidationAsync(String comparisonMode, CheckPerformNameCrossValidationRequest checkPerformNameCrossValidationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = performNameCrossValidationValidateBeforeCall(comparisonMode, checkPerformNameCrossValidationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PerformNameCrossValidationRequestBuilder {
        private final List<CheckPerformNameCrossValidationRequestIdDocsInner> idDocs;
        private final String comparisonMode;

        private PerformNameCrossValidationRequestBuilder(List<CheckPerformNameCrossValidationRequestIdDocsInner> idDocs, String comparisonMode) {
            this.idDocs = idDocs;
            this.comparisonMode = comparisonMode;
        }

        /**
         * Build call for performNameCrossValidation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckPerformNameCrossValidationRequest checkPerformNameCrossValidationRequest = buildBodyParams();
            return performNameCrossValidationCall(comparisonMode, checkPerformNameCrossValidationRequest, _callback);
        }

        private CheckPerformNameCrossValidationRequest buildBodyParams() {
            CheckPerformNameCrossValidationRequest checkPerformNameCrossValidationRequest = new CheckPerformNameCrossValidationRequest();
            checkPerformNameCrossValidationRequest.idDocs(this.idDocs);
            return checkPerformNameCrossValidationRequest;
        }

        /**
         * Execute performNameCrossValidation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CheckPerformNameCrossValidationRequest checkPerformNameCrossValidationRequest = buildBodyParams();
            performNameCrossValidationWithHttpInfo(comparisonMode, checkPerformNameCrossValidationRequest);
        }

        /**
         * Execute performNameCrossValidation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CheckPerformNameCrossValidationRequest checkPerformNameCrossValidationRequest = buildBodyParams();
            return performNameCrossValidationWithHttpInfo(comparisonMode, checkPerformNameCrossValidationRequest);
        }

        /**
         * Execute performNameCrossValidation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CheckPerformNameCrossValidationRequest checkPerformNameCrossValidationRequest = buildBodyParams();
            return performNameCrossValidationAsync(comparisonMode, checkPerformNameCrossValidationRequest, _callback);
        }
    }

    /**
     * Perform name cross validation
     * Performs a name cross validation.
     * @param comparisonMode Data comparison mode. See the [possible values](/reference/perform-name-cross-validation#possible-comparisonmode-values). (required)
     * @return PerformNameCrossValidationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PerformNameCrossValidationRequestBuilder performNameCrossValidation(List<CheckPerformNameCrossValidationRequestIdDocsInner> idDocs, String comparisonMode) throws IllegalArgumentException {
        if (idDocs == null) throw new IllegalArgumentException("\"idDocs\" is required but got null");
        if (comparisonMode == null) throw new IllegalArgumentException("\"comparisonMode\" is required but got null");
            

        return new PerformNameCrossValidationRequestBuilder(idDocs, comparisonMode);
    }
    private okhttp3.Call phoneConfirmationResultsCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/checks/latest?type=PHONE_CONFIRMATION";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicantId", applicantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phoneConfirmationResultsValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling phoneConfirmationResults(Async)");
        }

        return phoneConfirmationResultsCall(applicantId, _callback);

    }


    private ApiResponse<Void> phoneConfirmationResultsWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = phoneConfirmationResultsValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call phoneConfirmationResultsAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = phoneConfirmationResultsValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PhoneConfirmationResultsRequestBuilder {
        private final String applicantId;

        private PhoneConfirmationResultsRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for phoneConfirmationResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return phoneConfirmationResultsCall(applicantId, _callback);
        }


        /**
         * Execute phoneConfirmationResults request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            phoneConfirmationResultsWithHttpInfo(applicantId);
        }

        /**
         * Execute phoneConfirmationResults request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return phoneConfirmationResultsWithHttpInfo(applicantId);
        }

        /**
         * Execute phoneConfirmationResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return phoneConfirmationResultsAsync(applicantId, _callback);
        }
    }

    /**
     * Get phone confirmation check results
     * Returns phone confirmation check results.
     * @param applicantId A unique applicant identifier. (required)
     * @return PhoneConfirmationResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PhoneConfirmationResultsRequestBuilder phoneConfirmationResults(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new PhoneConfirmationResultsRequestBuilder(applicantId);
    }
    private okhttp3.Call tinSsnCheckResultsCall(String applicantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/checks/latest?type=TIN";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicantId", applicantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tinSsnCheckResultsValidateBeforeCall(String applicantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling tinSsnCheckResults(Async)");
        }

        return tinSsnCheckResultsCall(applicantId, _callback);

    }


    private ApiResponse<Void> tinSsnCheckResultsWithHttpInfo(String applicantId) throws ApiException {
        okhttp3.Call localVarCall = tinSsnCheckResultsValidateBeforeCall(applicantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call tinSsnCheckResultsAsync(String applicantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tinSsnCheckResultsValidateBeforeCall(applicantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class TinSsnCheckResultsRequestBuilder {
        private final String applicantId;

        private TinSsnCheckResultsRequestBuilder(String applicantId) {
            this.applicantId = applicantId;
        }

        /**
         * Build call for tinSsnCheckResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return tinSsnCheckResultsCall(applicantId, _callback);
        }


        /**
         * Execute tinSsnCheckResults request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            tinSsnCheckResultsWithHttpInfo(applicantId);
        }

        /**
         * Execute tinSsnCheckResults request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return tinSsnCheckResultsWithHttpInfo(applicantId);
        }

        /**
         * Execute tinSsnCheckResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return tinSsnCheckResultsAsync(applicantId, _callback);
        }
    }

    /**
     * Get TIN (SSN) check results
     * Returns TIN (SSN) check results.
     * @param applicantId A unique applicant identification number. (required)
     * @return TinSsnCheckResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TinSsnCheckResultsRequestBuilder tinSsnCheckResults(String applicantId) throws IllegalArgumentException {
        if (applicantId == null) throw new IllegalArgumentException("\"applicantId\" is required but got null");
            

        return new TinSsnCheckResultsRequestBuilder(applicantId);
    }
}
