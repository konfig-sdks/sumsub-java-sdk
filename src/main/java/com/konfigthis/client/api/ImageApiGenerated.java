/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ImageApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImageApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ImageApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"X-App-Token\" is required but no API key was provided. Please set \"X-App-Token\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDocumentImagesCall(String inspectionId, String imageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/inspections/{inspectionId}/resources/{imageId}"
            .replace("{" + "inspectionId" + "}", localVarApiClient.escapeString(inspectionId.toString()))
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentImagesValidateBeforeCall(String inspectionId, String imageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inspectionId' is set
        if (inspectionId == null) {
            throw new ApiException("Missing the required parameter 'inspectionId' when calling getDocumentImages(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getDocumentImages(Async)");
        }

        return getDocumentImagesCall(inspectionId, imageId, _callback);

    }


    private ApiResponse<Void> getDocumentImagesWithHttpInfo(String inspectionId, String imageId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentImagesValidateBeforeCall(inspectionId, imageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDocumentImagesAsync(String inspectionId, String imageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentImagesValidateBeforeCall(inspectionId, imageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDocumentImagesRequestBuilder {
        private final String inspectionId;
        private final String imageId;

        private GetDocumentImagesRequestBuilder(String inspectionId, String imageId) {
            this.inspectionId = inspectionId;
            this.imageId = imageId;
        }

        /**
         * Build call for getDocumentImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDocumentImagesCall(inspectionId, imageId, _callback);
        }


        /**
         * Execute getDocumentImages request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDocumentImagesWithHttpInfo(inspectionId, imageId);
        }

        /**
         * Execute getDocumentImages request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDocumentImagesWithHttpInfo(inspectionId, imageId);
        }

        /**
         * Execute getDocumentImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDocumentImagesAsync(inspectionId, imageId, _callback);
        }
    }

    /**
     * Get document images
     * Returns document images.
     * @param inspectionId An inspection identifier. This identifier is returned as a root field upon running [this API method](ref:get-applicant-data). (required)
     * @param imageId An image identifier. You can get this number by using [this API method](ref:get-applicant-verification-steps-status). (required)
     * @return GetDocumentImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentImagesRequestBuilder getDocumentImages(String inspectionId, String imageId) throws IllegalArgumentException {
        if (inspectionId == null) throw new IllegalArgumentException("\"inspectionId\" is required but got null");
            

        if (imageId == null) throw new IllegalArgumentException("\"imageId\" is required but got null");
            

        return new GetDocumentImagesRequestBuilder(inspectionId, imageId);
    }
    private okhttp3.Call markAsInactiveCall(String inspectionId, String imageId, Boolean revert, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/inspections/{inspectionId}/resources/{imageId}"
            .replace("{" + "inspectionId" + "}", localVarApiClient.escapeString(inspectionId.toString()))
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (revert != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revert", revert));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAsInactiveValidateBeforeCall(String inspectionId, String imageId, Boolean revert, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inspectionId' is set
        if (inspectionId == null) {
            throw new ApiException("Missing the required parameter 'inspectionId' when calling markAsInactive(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling markAsInactive(Async)");
        }

        return markAsInactiveCall(inspectionId, imageId, revert, _callback);

    }


    private ApiResponse<Void> markAsInactiveWithHttpInfo(String inspectionId, String imageId, Boolean revert) throws ApiException {
        okhttp3.Call localVarCall = markAsInactiveValidateBeforeCall(inspectionId, imageId, revert, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call markAsInactiveAsync(String inspectionId, String imageId, Boolean revert, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAsInactiveValidateBeforeCall(inspectionId, imageId, revert, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MarkAsInactiveRequestBuilder {
        private final String inspectionId;
        private final String imageId;
        private Boolean revert;

        private MarkAsInactiveRequestBuilder(String inspectionId, String imageId) {
            this.inspectionId = inspectionId;
            this.imageId = imageId;
        }

        /**
         * Set revert
         * @param revert Set &#x60;true&#x60; to revert inactivity of the image. (optional, default to false)
         * @return MarkAsInactiveRequestBuilder
         */
        public MarkAsInactiveRequestBuilder revert(Boolean revert) {
            this.revert = revert;
            return this;
        }
        
        /**
         * Build call for markAsInactive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return markAsInactiveCall(inspectionId, imageId, revert, _callback);
        }


        /**
         * Execute markAsInactive request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            markAsInactiveWithHttpInfo(inspectionId, imageId, revert);
        }

        /**
         * Execute markAsInactive request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return markAsInactiveWithHttpInfo(inspectionId, imageId, revert);
        }

        /**
         * Execute markAsInactive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return markAsInactiveAsync(inspectionId, imageId, revert, _callback);
        }
    }

    /**
     * Mark image as inactive
     * Marks uploaded images as deleted.
     * @param inspectionId An inspection identifier. You can get this number by using [this API method](ref:get-applicant-data). (required)
     * @param imageId An image identifier. You can get this number by using [this API method](ref:get-applicant-verification-steps-status). (required)
     * @return MarkAsInactiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MarkAsInactiveRequestBuilder markAsInactive(String inspectionId, String imageId) throws IllegalArgumentException {
        if (inspectionId == null) throw new IllegalArgumentException("\"inspectionId\" is required but got null");
            

        if (imageId == null) throw new IllegalArgumentException("\"imageId\" is required but got null");
            

        return new MarkAsInactiveRequestBuilder(inspectionId, imageId);
    }
}
