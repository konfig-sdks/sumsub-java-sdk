/*
 * Sumsub API
 * Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TransactionApproveRejectRequest;
import com.konfigthis.client.model.TransactionApproveRejectRequest1;
import com.konfigthis.client.model.TransactionBulkImportRequest;
import com.konfigthis.client.model.TransactionBulkImportRequest1;
import com.konfigthis.client.model.TransactionBulkImportRequestData;
import com.konfigthis.client.model.TransactionRemoveTagsRequest;
import com.konfigthis.client.model.TransactionRemoveTagsRequest1;
import com.konfigthis.client.model.TransactionUpdateBlockchainInfoRequest;
import com.konfigthis.client.model.TransactionUpdateBlockchainInfoRequest1;
import com.konfigthis.client.model.TransactionUpdatePropertiesRequest;
import com.konfigthis.client.model.TransactionUpdatePropertiesRequest1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Disabled
public class TransactionApiTest {

    private static TransactionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TransactionApi(apiClient);
    }

    /**
     * Approve and reject transaction
     *
     * Approves or rejects transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveRejectTest() throws ApiException {
        String id = null;
        String reviewAnswer = null;
        api.approveReject(id)
                .reviewAnswer(reviewAnswer)
                .execute();
        // TODO: test validations
    }

    /**
     * Bulk transaction import
     *
     * Imports a list of transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkImportTest() throws ApiException {
        String applicantId = null;
        TransactionBulkImportRequestData data = null;
        Boolean ignoreErrors = null;
        Boolean scoreSavedTxns = null;
        api.bulkImport(applicantId, data)
                .ignoreErrors(ignoreErrors)
                .scoreSavedTxns(scoreSavedTxns)
                .execute();
        // TODO: test validations
    }

    /**
     * Confirm transaction ownership
     *
     * Confirms that the specified transaction belongs to your exchange (VASP).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmOwnershipTest() throws ApiException {
        String txnId = null;
        api.confirmOwnership(txnId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get transaction information (externalTxnId)
     *
     * Returns transaction information based on the provided &#x60;externalTxnId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOneDataTest() throws ApiException {
        String externalTxnId = null;
        api.getOneData(externalTxnId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get transaction information
     *
     * Returns transaction information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void informationOneTest() throws ApiException {
        String id = null;
        api.informationOne(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tags
     *
     * Returns a list of transaction tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        String id = null;
        api.listTags(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Re-score transaction
     *
     * Re-scores transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reScoreTest() throws ApiException {
        String id = null;
        api.reScore(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove transaction ownership
     *
     * Removes the ownership from a previously confirmed transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOwnershipTest() throws ApiException {
        String txnId = null;
        api.removeOwnership(txnId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove tags
     *
     * Removes tags from transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTagsTest() throws ApiException {
        String id = null;
        List<String> RAW_BODY = null;
        api.removeTags(id)
                .RAW_BODY(RAW_BODY)
                .execute();
        // TODO: test validations
    }

    /**
     * Patch transaction with chain transaction ID
     *
     * Updates information from the blockchain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBlockchainInfoTest() throws ApiException {
        String txnId = null;
        String fingerprint = null;
        Object response = api.updateBlockchainInfo(txnId)
                .fingerprint(fingerprint)
                .execute();
        // TODO: test validations
    }

    /**
     * Change transaction properties
     *
     * Updates transaction properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePropertiesTest() throws ApiException {
        String customProperty = null;
        String id = null;
        String unsetKeys = null;
        api.updateProperties(customProperty, id)
                .unsetKeys(unsetKeys)
                .execute();
        // TODO: test validations
    }

}
